===== aliceismissing/asgi.py =====

"""
ASGI config for aliceismissing project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aliceismissing.settings')

application = get_asgi_application()

----- END OF FILE -----

===== aliceismissing/__init__.py =====


----- END OF FILE -----

===== aliceismissing/settings.py =====

"""
Django settings for aliceismissing project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@7mlo1j1yv*g1kl%($%&=_e4=2+v+m82sjv_#@)z#ykn6rp-%h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'game',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'game.middleware.TemplateErrorMiddleware',
]

ROOT_URLCONF = 'aliceismissing.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aliceismissing.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Create media directory if it doesn't exist
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)

# Authentication settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Session settings for game
SESSION_COOKIE_AGE = 7200  # 2 hours, enough for a full game (90 mins) plus setup

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module} {funcName} L{lineno}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'log.txt',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG' if DEBUG else 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'game': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

----- END OF FILE -----

===== aliceismissing/urls.py =====

"""
URL configuration for aliceismissing project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import RedirectView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('game.urls')),
    path('favicon.ico', RedirectView.as_view(url=settings.STATIC_URL + 'img/favicon.ico')),
]

# Serve media files in development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

----- END OF FILE -----

===== aliceismissing/wsgi.py =====

"""
WSGI config for aliceismissing project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aliceismissing.settings')

application = get_wsgi_application()

----- END OF FILE -----

===== game/admin.py =====

from django.contrib import admin
from .models import Game, Player, Card, Deck, Hand, Message

admin.site.register(Game)
admin.site.register(Player)
admin.site.register(Card)
admin.site.register(Deck)
admin.site.register(Hand)
admin.site.register(Message)

----- END OF FILE -----

===== game/apps.py =====

from django.apps import AppConfig


class GameConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'game'

----- END OF FILE -----

===== game/__init__.py =====


----- END OF FILE -----

===== game/middleware.py =====

import logging
from django.template.exceptions import TemplateSyntaxError, TemplateDoesNotExist
from django.http import HttpResponseServerError
import traceback

logger = logging.getLogger(__name__)

class TemplateErrorMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_exception(self, request, exception):
        if isinstance(exception, (TemplateSyntaxError, TemplateDoesNotExist)):
            error_details = f"Template Error on {request.path}:\n"
            error_details += f"Error Type: {type(exception).__name__}\n"
            error_details += f"Message: {str(exception)}\n"
            
            if hasattr(exception, 'exc_info') and exception.exc_info:
                exc_type, exc_value, exc_traceback = exception.exc_info
                error_details += f"Line: {getattr(exception, 'lineno', 'N/A')}\n"
                error_details += f"Source: {getattr(exception, 'source', ('N/A', (0,0)))[0]}\n"
            elif hasattr(exception, 'template_debug'):
                error_details += f"Line: {exception.template_debug.get('line', 'N/A')}\n"
                error_details += f"During: {exception.template_debug.get('during', 'N/A')}\n"

            logger.error(error_details, exc_info=True)
            
        return None 
----- END OF FILE -----

===== game/migrations/0001_initial.py =====

# Generated by Django 5.1.4 on 2025-05-19 07:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Deck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deck_type', models.CharField(choices=[('reference', 'Reference Deck'), ('game', 'Game Deck')], default='reference', max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('setup', 'Setup'), ('in_progress', 'In Progress'), ('finished', 'Finished')], default='setup', max_length=20)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('join_code', models.CharField(blank=True, max_length=8, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('front_image', models.ImageField(blank=True, null=True, upload_to='cards/fronts/')),
                ('back_image', models.ImageField(blank=True, null=True, upload_to='cards/backs/')),
                ('card_type', models.CharField(choices=[('character', 'Character'), ('motive', 'Motive'), ('location', 'Location'), ('clue', 'Clue'), ('suspect', 'Suspect')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('revealed', models.BooleanField(default=False)),
                ('reveal_time', models.IntegerField(blank=True, help_text='Time in minutes when this card is revealed', null=True)),
                ('deck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='game.deck')),
            ],
        ),
        migrations.AddField(
            model_name='deck',
            name='game',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='decks', to='game.game'),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character_name', models.CharField(max_length=100)),
                ('color', models.CharField(choices=[('blue', 'Blue'), ('green', 'Green'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('pink', 'Pink')], max_length=20)),
                ('is_host', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('character_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_to', to='game.card')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='game.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('game', 'character_name'), ('game', 'color')},
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_system_message', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='game.game')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to='game.player')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Hand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cards', models.ManyToManyField(related_name='in_hands', to='game.card')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hands', to='game.game')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hand', to='game.player')),
            ],
        ),
    ]

----- END OF FILE -----

===== game/migrations/0002_create_initial_game_data.py =====

# Generated by Django 5.1.4 on 2025-05-19 09:06

from django.db import migrations


def create_initial_game_data(apps, schema_editor):
    # Get model references
    Deck = apps.get_model('game', 'Deck')
    Card = apps.get_model('game', 'Card')
    
    # Create reference deck
    reference_deck = Deck.objects.create(
        name="Alice is Missing Reference Deck",
        deck_type="reference"
    )
    
    # Create character cards
    character_cards = [
        {
            "title": "Charlie Barnes",
            "description": "Charlie is Alice's ex and still harbors feelings for her. Known for having a temper, but is genuinely concerned about her disappearance.",
            "card_type": "character",
        },
        {
            "title": "Dakota Travis",
            "description": "Dakota is Alice's best friend who knows all her secrets. Was the last person to see Alice before she disappeared.",
            "card_type": "character",
        },
        {
            "title": "Evan Holwell",
            "description": "Evan is Alice's cousin who recently moved to Silent Falls. Has been trying to find his place in town and was close to Alice.",
            "card_type": "character",
        },
        {
            "title": "Jack Briarwood",
            "description": "Jack is Alice's older brother who left Silent Falls for college but returned when he heard about his sister's disappearance.",
            "card_type": "character",
        },
        {
            "title": "Julia Reeves",
            "description": "Julia is Alice's childhood friend who grew apart from her in recent years. Feels guilty about their falling out.",
            "card_type": "character",
        },
    ]
    
    for card_data in character_cards:
        Card.objects.create(
            title=card_data["title"],
            description=card_data["description"],
            card_type=card_data["card_type"],
            deck=reference_deck,
        )
    
    # Create location cards
    location_cards = [
        {
            "title": "Silent Falls High School",
            "description": "The local high school where Alice attended. Recently there have been rumors of strange activities happening after hours.",
            "card_type": "location",
        },
        {
            "title": "Twin Lakes",
            "description": "A secluded spot outside of town where teenagers often go to hang out. Alice mentioned she was meeting someone there the night she disappeared.",
            "card_type": "location",
        },
        {
            "title": "The Old Mill",
            "description": "An abandoned mill at the edge of town with a dark history. Local legend says it's haunted by the ghosts of workers who died there.",
            "card_type": "location",
        },
        {
            "title": "Briarwood Family Home",
            "description": "Alice's home where she lived with her parents. Her room remains untouched since her disappearance.",
            "card_type": "location",
        },
        {
            "title": "Main Street Diner",
            "description": "A popular hangout spot for the local teenagers. Alice worked part-time as a waitress here.",
            "card_type": "location",
        },
    ]
    
    for card_data in location_cards:
        Card.objects.create(
            title=card_data["title"],
            description=card_data["description"],
            card_type=card_data["card_type"],
            deck=reference_deck,
        )
    
    # Create motive cards
    motive_cards = [
        {
            "title": "Running Away",
            "description": "Evidence suggests Alice may have been planning to leave Silent Falls for some time. Her diary mentions feeling trapped and needing to escape.",
            "card_type": "motive",
        },
        {
            "title": "Forbidden Relationship",
            "description": "Alice may have been involved with someone her parents disapproved of, leading to conflict that pushed her to leave or hide.",
            "card_type": "motive",
        },
        {
            "title": "Witness to a Crime",
            "description": "Alice might have seen something she wasn't supposed to see, putting her in danger from those involved.",
            "card_type": "motive",
        },
        {
            "title": "Family Secrets",
            "description": "The Briarwood family has some dark secrets that Alice may have discovered, leading to her disappearance.",
            "card_type": "motive",
        },
        {
            "title": "Supernatural Encounter",
            "description": "Silent Falls has a history of strange occurrences. Alice had been researching local legends shortly before she disappeared.",
            "card_type": "motive",
        },
    ]
    
    for card_data in motive_cards:
        Card.objects.create(
            title=card_data["title"],
            description=card_data["description"],
            card_type=card_data["card_type"],
            deck=reference_deck,
        )
    
    # Create clue cards with reveal times
    clue_cards = [
        {
            "title": "Alice's Diary",
            "description": "A hidden diary found under Alice's bed reveals her feelings of being watched and plans to meet someone secretly.",
            "card_type": "clue",
            "reveal_time": 10,
        },
        {
            "title": "Strange Text Messages",
            "description": "Alice's phone records show cryptic messages from an unknown number in the weeks before her disappearance.",
            "card_type": "clue",
            "reveal_time": 20,
        },
        {
            "title": "Abandoned Car",
            "description": "Alice's car was found abandoned at Twin Lakes with the driver's door open and her keys still in the ignition.",
            "card_type": "clue",
            "reveal_time": 30,
        },
        {
            "title": "Security Camera Footage",
            "description": "Footage from the gas station shows Alice buying supplies late at night, acting nervous and constantly looking over her shoulder.",
            "card_type": "clue",
            "reveal_time": 45,
        },
        {
            "title": "Mysterious Necklace",
            "description": "A necklace not belonging to Alice was found in her room, bearing a symbol connected to a local cult.",
            "card_type": "clue",
            "reveal_time": 60,
        },
        {
            "title": "Final Phone Call",
            "description": "Alice's last phone call was to an unknown number. The recording contains the sound of rain, footsteps, and a muffled conversation.",
            "card_type": "clue",
            "reveal_time": 75,
        },
    ]
    
    for card_data in clue_cards:
        Card.objects.create(
            title=card_data["title"],
            description=card_data["description"],
            card_type=card_data["card_type"],
            deck=reference_deck,
            reveal_time=card_data["reveal_time"],
        )
    
    # Create suspect cards
    suspect_cards = [
        {
            "title": "Mr. Collins",
            "description": "Alice's history teacher who had an unusual interest in her academic progress. Recently had a heated argument with Alice that was overheard by other students.",
            "card_type": "suspect",
        },
        {
            "title": "The Stranger",
            "description": "A mysterious person who arrived in Silent Falls a few weeks before Alice's disappearance. No one knows much about them, but Alice was seen talking to them on several occasions.",
            "card_type": "suspect",
        },
        {
            "title": "Robert Briarwood",
            "description": "Alice's father who has been acting strangely since her disappearance. Financial records show large withdrawals from his bank account recently.",
            "card_type": "suspect",
        },
        {
            "title": "The Silent Falls Cult",
            "description": "A secretive group operating on the outskirts of town. Rumors suggest they've been recruiting young people for unknown purposes.",
            "card_type": "suspect",
        },
        {
            "title": "Former Friend Group",
            "description": "Alice recently had a falling out with her old friends. Some have been spreading rumors about her and may have had motives to harm her.",
            "card_type": "suspect",
        },
    ]
    
    for card_data in suspect_cards:
        Card.objects.create(
            title=card_data["title"],
            description=card_data["description"],
            card_type=card_data["card_type"],
            deck=reference_deck,
        )
    
    print("Initial game data created successfully!")


def remove_initial_game_data(apps, schema_editor):
    # Get model references
    Deck = apps.get_model('game', 'Deck')
    
    # Delete reference deck (this will cascade delete all cards)
    Deck.objects.filter(name="Alice is Missing Reference Deck").delete()


class Migration(migrations.Migration):

    dependencies = [
        ('game', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_initial_game_data, remove_initial_game_data),
    ]

----- END OF FILE -----

===== game/migrations/0003_message_image_message_recipient.py =====

# Generated by Django 5.1.4 on 2025-05-19 10:05

import django.db.models.deletion
import game.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('game', '0002_create_initial_game_data'),
    ]

    operations = [
        migrations.AddField(
            model_name='message',
            name='image',
            field=models.ImageField(blank=True, help_text='Image to share in the message', null=True, upload_to=game.models.get_message_image_path),
        ),
        migrations.AddField(
            model_name='message',
            name='recipient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_messages', to='game.player'),
        ),
    ]

----- END OF FILE -----

===== game/migrations/0004_message_system_type_alter_message_image_and_more.py =====

# Generated by Django 5.2.1 on 2025-05-19 19:19

import django.db.models.deletion
import game.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('game', '0003_message_image_message_recipient'),
    ]

    operations = [
        migrations.AddField(
            model_name='message',
            name='system_type',
            field=models.CharField(blank=True, choices=[('alert', 'Alert'), ('success', 'Success'), ('info', 'Info'), ('warning', 'Warning')], max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name='message',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to=game.models.get_message_image_path),
        ),
        migrations.AlterField(
            model_name='message',
            name='recipient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_messages', to='game.player'),
        ),
        migrations.AlterField(
            model_name='message',
            name='sender',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to='game.player'),
        ),
    ]

----- END OF FILE -----

===== game/migrations/__init__.py =====


----- END OF FILE -----

===== game/models.py =====

from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from PIL import Image
import datetime
import uuid
from django.utils import timezone

# Create your models here.

class Deck(models.Model):
    """Model representing a deck of cards (either reference or game-specific)"""
    DECK_TYPES = [
        ('reference', 'Reference Deck'),
        ('game', 'Game Deck'),
    ]
    
    deck_type = models.CharField(max_length=20, choices=DECK_TYPES, default='reference')
    name = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    game = models.ForeignKey('Game', on_delete=models.CASCADE, null=True, blank=True, related_name='decks')
    
    def __str__(self):
        if self.game:
            return f"{self.name} - {self.game.title}"
        return f"{self.name} (Reference)"
    
    def create_game_copy(self, game):
        """Create a copy of this deck for a specific game"""
        if self.deck_type != 'reference':
            raise ValueError("Can only create game copies from reference decks")
        
        game_deck = Deck.objects.create(
            deck_type='game',
            name=self.name,
            game=game
        )
        
        # Copy all cards from reference deck to game deck
        for card in self.cards.all():
            card.create_game_copy(game_deck)
        
        return game_deck


class Card(models.Model):
    """Model representing a card in the game"""
    CARD_TYPES = [
        ('character', 'Character'),
        ('motive', 'Motive'),
        ('location', 'Location'),
        ('clue', 'Clue'),
        ('suspect', 'Suspect'),
    ]
    
    title = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    front_image = models.ImageField(upload_to='cards/fronts/', null=True, blank=True)
    back_image = models.ImageField(upload_to='cards/backs/', null=True, blank=True)
    card_type = models.CharField(max_length=20, choices=CARD_TYPES)
    deck = models.ForeignKey(Deck, on_delete=models.CASCADE, related_name='cards')
    created_at = models.DateTimeField(auto_now_add=True)
    revealed = models.BooleanField(default=False)
    reveal_time = models.IntegerField(null=True, blank=True, help_text="Time in minutes when this card is revealed")
    
    def __str__(self):
        return f"{self.get_card_type_display()}: {self.title}"
    
    def create_game_copy(self, game_deck):
        """Create a copy of this card for a specific game deck"""
        return Card.objects.create(
            title=self.title,
            description=self.description,
            front_image=self.front_image,
            back_image=self.back_image,
            card_type=self.card_type,
            deck=game_deck,
            reveal_time=self.reveal_time,
            revealed=False
        )
    
    def reveal(self):
        """Reveal this card"""
        self.revealed = True
        self.save()
    
    def should_reveal(self, game_time_elapsed):
        """Check if this card should be revealed based on game time"""
        if self.reveal_time and not self.revealed:
            return game_time_elapsed >= self.reveal_time
        return False


class Game(models.Model):
    """Model representing a game session"""
    STATUS_CHOICES = [
        ('setup', 'Setup'),
        ('in_progress', 'In Progress'),
        ('finished', 'Finished'),
    ]
    
    title = models.CharField(max_length=100)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='setup')
    start_time = models.DateTimeField(null=True, blank=True)
    end_time = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    join_code = models.CharField(max_length=8, unique=True, blank=True)
    
    def __str__(self):
        return f"{self.title} ({self.get_status_display()})"
    
    def save(self, *args, **kwargs):
        # Generate a unique join code if not provided
        if not self.join_code:
            self.join_code = str(uuid.uuid4())[:8].upper()
        super().save(*args, **kwargs)
    
    def start_game(self):
        """Start the game and set the timer"""
        if self.status == 'setup':
            from django.db.models import Count
            import random
            
            # Start transaction to ensure all card dealing is atomic
            from django.db import transaction
            with transaction.atomic():
                # Set game status and timer
                self.status = 'in_progress'
                self.start_time = timezone.now()
                self.end_time = self.start_time + datetime.timedelta(minutes=90)
                self.save()
                
                # Create system message for game start
                Message.objects.create(
                    game=self,
                    content="The game has started. You have 90 minutes to find Alice.",
                    is_system_message=True
                )
                
                # Get reference deck
                try:
                    reference_deck = Deck.objects.get(deck_type='reference', game__isnull=True)
                except Deck.DoesNotExist:
                    Message.objects.create(
                        game=self,
                        content="ERROR: Reference deck not found! Cards could not be dealt.",
                        is_system_message=True
                    )
                    return True
                
                # Create game deck for this game
                game_deck = Deck.objects.create(
                    name=f"Game Deck for {self.title}",
                    deck_type='game',
                    game=self
                )
                
                # Get players for this game
                players = self.players.all()
                player_count = players.count()
                
                if player_count < 3:
                    Message.objects.create(
                        game=self,
                        content="Warning: This game works best with 3-5 players.",
                        is_system_message=True
                    )
                
                # Get all card types from reference deck
                character_cards = list(reference_deck.cards.filter(card_type='character'))
                location_cards = list(reference_deck.cards.filter(card_type='location'))
                motive_cards = list(reference_deck.cards.filter(card_type='motive'))
                clue_cards = list(reference_deck.cards.filter(card_type='clue'))
                suspect_cards = list(reference_deck.cards.filter(card_type='suspect'))
                
                # Shuffle all card types
                random.shuffle(character_cards)
                random.shuffle(location_cards)
                random.shuffle(motive_cards)
                random.shuffle(clue_cards)
                random.shuffle(suspect_cards)
                
                # Assign character cards based on player character selections
                character_map = {}
                for card in character_cards:
                    character_map[card.title] = card
                
                # Deal clue cards
                # We need to calculate how many clue cards per player
                total_clue_cards = min(len(clue_cards), player_count * 2)  # 1-2 clue cards per player
                clues_per_player = total_clue_cards // player_count
                
                # Create a copy of each card in the game deck
                # Track which game cards correspond to which reference cards
                game_card_map = {}
                
                # Copy all needed cards to game deck
                cards_to_copy = []
                cards_to_copy.extend(character_cards[:player_count])
                cards_to_copy.extend(location_cards[:player_count])
                cards_to_copy.extend(motive_cards[:1])  # Just one motive card for the game
                cards_to_copy.extend(clue_cards[:total_clue_cards])
                cards_to_copy.extend(suspect_cards[:player_count])
                
                # Copy cards to game deck
                for ref_card in cards_to_copy:
                    game_card = Card.objects.create(
                        title=ref_card.title,
                        description=ref_card.description,
                        front_image=ref_card.front_image,
                        back_image=ref_card.back_image,
                        card_type=ref_card.card_type,
                        deck=game_deck,
                        reveal_time=ref_card.reveal_time,
                        revealed=False
                    )
                    game_card_map[ref_card.id] = game_card
                
                # Deal cards to players
                for i, player in enumerate(players):
                    # Get player's hand
                    hand, created = Hand.objects.get_or_create(player=player, game=self)
                    
                    # Assign character card based on character name
                    character_assigned = False
                    for char_card in character_cards:
                        if player.character_name in char_card.title or char_card.title in player.character_name:
                            if char_card.id in game_card_map:
                                # Assign the character card to player
                                player.character_card = game_card_map[char_card.id]
                                player.save()
                                character_assigned = True
                                break
                    
                    # If no character card matched by name, assign one randomly
                    if not character_assigned and i < len(character_cards) and character_cards[i].id in game_card_map:
                        player.character_card = game_card_map[character_cards[i].id]
                        player.save()
                    
                    # Deal clue cards
                    clue_start_idx = i * clues_per_player
                    for j in range(clues_per_player):
                        if clue_start_idx + j < len(clue_cards) and clue_cards[clue_start_idx + j].id in game_card_map:
                            hand.cards.add(game_card_map[clue_cards[clue_start_idx + j].id])
                    
                    # Each player gets one location card
                    if i < len(location_cards) and location_cards[i].id in game_card_map:
                        hand.cards.add(game_card_map[location_cards[i].id])
                    
                    # Each player gets one suspect card
                    if i < len(suspect_cards) and suspect_cards[i].id in game_card_map:
                        hand.cards.add(game_card_map[suspect_cards[i].id])
                
                # Deal the motive card to a random player
                if motive_cards and motive_cards[0].id in game_card_map:
                    random_player = random.choice(players)
                    random_hand = Hand.objects.get(player=random_player, game=self)
                    random_hand.cards.add(game_card_map[motive_cards[0].id])
                
                # Create system message about cards
                Message.objects.create(
                    game=self,
                    content="Cards have been dealt. Check your hand to see your cards.",
                    is_system_message=True
                )
                
            return True
        return False
    
    def end_game(self):
        """End the game"""
        if self.status == 'in_progress':
            self.status = 'finished'
            self.save()
            
            # Create system message for game end
            Message.objects.create(
                game=self,
                content="The game has ended.",
                is_system_message=True
            )
            
            return True
        return False
    
    def time_remaining(self):
        """Get the remaining time in minutes"""
        if self.status != 'in_progress' or not self.end_time:
            return 0
        
        remaining = self.end_time - timezone.now()
        
        # If time is up, end the game
        if remaining.total_seconds() <= 0:
            self.end_game()
            return 0
        
        # Return minutes
        return int(remaining.total_seconds() / 60)
    
    def time_elapsed(self):
        """Get the elapsed time in minutes"""
        if self.status != 'in_progress' or not self.start_time:
            return 0
        
        elapsed = timezone.now() - self.start_time
        return int(elapsed.total_seconds() / 60)
    
    def check_card_reveals(self):
        """Check and reveal cards based on elapsed time"""
        if self.status != 'in_progress':
            return
        
        elapsed_minutes = self.time_elapsed()
        
        # Get all game decks for this game
        for deck in self.decks.filter(deck_type='game'):
            # Get all unrevealed cards with reveal times
            cards_to_check = deck.cards.filter(revealed=False).exclude(reveal_time=None)
            
            for card in cards_to_check:
                if card.should_reveal(elapsed_minutes):
                    card.reveal()
                    
                    # Create system message for card reveal
                    Message.objects.create(
                        game=self,
                        content=f"A new clue has been revealed: {card.title}",
                        is_system_message=True
                    )


class Player(models.Model):
    """Model representing a player in the game"""
    PLAYER_COLORS = [
        ('blue', 'Blue'),
        ('green', 'Green'),
        ('yellow', 'Yellow'),
        ('purple', 'Purple'),
        ('pink', 'Pink'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='players')
    game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name='players')
    character_name = models.CharField(max_length=100)
    color = models.CharField(max_length=20, choices=PLAYER_COLORS)
    is_host = models.BooleanField(default=False)
    character_card = models.ForeignKey(Card, on_delete=models.SET_NULL, null=True, blank=True, related_name='assigned_to')
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = [['game', 'color'], ['game', 'character_name']]
    
    def __str__(self):
        return f"{self.character_name} ({self.get_color_display()}) in {self.game.title}"
    
    def can_start_game(self):
        """Check if this player can start the game (must be host)"""
        return self.is_host and self.game.status == 'setup'
    
    def can_send_message(self):
        """Check if this player can send a message (game must be in progress)"""
        return self.game.status == 'in_progress'


class Hand(models.Model):
    """Model representing a player's hand of cards"""
    player = models.OneToOneField(Player, on_delete=models.CASCADE, related_name='hand')
    game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name='hands')
    cards = models.ManyToManyField(Card, related_name='in_hands')
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"Hand of {self.player.character_name}"
    
    def add_card(self, card):
        """Add a card to the hand"""
        self.cards.add(card)
    
    def remove_card(self, card):
        """Remove a card from the hand"""
        self.cards.remove(card)


def get_message_image_path(instance, filename):
    """Generate a unique file path for message images"""
    # Get the file extension
    ext = filename.split('.')[-1].lower()
    
    # Generate timestamp in format YYYYMMDD_HHMMSS
    timestamp = timezone.now().strftime('%Y%m%d_%H%M%S')
    
    # Generate a UUID
    unique_id = str(uuid.uuid4())[:8]
    
    # Create new filename with timestamp and UUID
    new_filename = f"{timestamp}_{unique_id}.{ext}"
    
    # Store all message images in a single directory
    return f'messages/{new_filename}'


class Message(models.Model):
    SYSTEM_TYPES = [
        ('alert', 'Alert'),
        ('success', 'Success'),
        ('info', 'Info'),
        ('warning', 'Warning'),
    ]

    game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name='messages')
    sender = models.ForeignKey(Player, on_delete=models.SET_NULL, null=True, related_name='sent_messages')
    recipient = models.ForeignKey(Player, on_delete=models.SET_NULL, null=True, related_name='received_messages')
    content = models.TextField()
    image = models.ImageField(upload_to=get_message_image_path, null=True, blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    is_system_message = models.BooleanField(default=False)
    system_type = models.CharField(max_length=10, choices=SYSTEM_TYPES, null=True, blank=True)

    class Meta:
        ordering = ['timestamp']

    def __str__(self):
        if self.is_system_message:
            return f"System Message: {self.content[:50]}"
        return f"{self.sender.character_name if self.sender else 'Unknown'} to {self.recipient.character_name if self.recipient else 'Everyone'}: {self.content[:50]}"

----- END OF FILE -----

===== game/templatetags/game_filters.py =====

from django import template
from django.db.models import QuerySet
from itertools import chain

register = template.Library()

@register.filter
def filter(queryset, field):
    """
    Filter a queryset by field being truthy
    Usage: {{ messages|filter:"image" }}
    """
    if not queryset or not hasattr(queryset, 'filter'):
        return queryset
    
    return queryset.filter(**{field: True})

@register.filter
def add(queryset1, queryset2):
    """
    Combine two querysets
    Usage: {{ location_cards|add:suspect_cards }}
    """
    if isinstance(queryset1, QuerySet) and isinstance(queryset2, QuerySet):
        # If both are querysets, combine them
        return list(chain(queryset1, queryset2))
    
    # If one of them is already a list (from a previous add operation)
    if isinstance(queryset1, list):
        if isinstance(queryset2, QuerySet):
            return list(chain(queryset1, queryset2))
        elif isinstance(queryset2, list):
            return queryset1 + queryset2
    
    # If first is a queryset and second is a list
    if isinstance(queryset1, QuerySet) and isinstance(queryset2, list):
        return list(chain(queryset1, queryset2))
    
    # Return first if we can't combine them
    return queryset1

@register.filter
def get_item(dictionary, key):
    """
    Get an item from a dictionary by key
    
    Usage: {{ dictionary|get_item:key }}
    """
    if not dictionary:
        return []
    
    # Convert to int if it's a number string (for integer keys)
    if isinstance(key, str) and key.isdigit():
        key = int(key)
    
    # Return the value or an empty list if not found
    return dictionary.get(key, [])

@register.filter
def selectattr(iterable, attr):
    """
    Filter a list of objects by an attribute being truthy
    
    Usage: {{ list|selectattr:"revealed" }}
    """
    if not iterable:
        return []
    
    result = []
    for item in iterable:
        try:
            value = getattr(item, attr)
            if value:
                result.append(item)
        except (AttributeError, TypeError):
            pass
    
    return result


----- END OF FILE -----

===== game/templatetags/__init__.py =====

# Initialize template tags package


----- END OF FILE -----

===== game/tests.py =====

from django.test import TestCase

# Create your tests here.

----- END OF FILE -----

===== game/urls.py =====

from django.urls import path
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    # Authentication URLs
    path('login/', auth_views.LoginView.as_view(template_name='game/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='home'), name='logout'),
    path('register/', views.register, name='register'),
    
    # Game management URLs
    path('', views.home, name='home'),
    path('new-game/', views.new_game, name='new_game'),
    path('join-game/', views.join_game, name='join_game'),
    path('join-game/<str:join_code>/', views.join_game_with_code, name='join_game_with_code'),
    
    # Game play URLs
    path('game/<int:game_id>/', views.game_detail, name='game_detail'),  # Main view for messages
    path('game/<int:game_id>/info/', views.game_info, name='game_info'),  # Game information view
    path('game/<int:game_id>/setup/', views.game_setup, name='game_setup'),
    path('game/<int:game_id>/start/', views.start_game, name='start_game'),
    path('game/<int:game_id>/end/', views.end_game, name='end_game'),
    
    # Messaging URLs
    path('game/<int:game_id>/messages/send/', views.send_message, name='send_message'),
    path('game/<int:game_id>/messages/<int:message_id>/', views.message_detail, name='message_detail'),
    path('game/<int:game_id>/messages/', views.game_messages, name='game_messages'),  # Added URL for fetching messages
    
    # Card management URLs
    path('game/<int:game_id>/hand/', views.player_hand, name='player_hand'),
    path('game/<int:game_id>/card/<int:card_id>/', views.card_detail, name='card_detail'),
    path('game/<int:game_id>/card/<int:card_id>/reveal/', views.reveal_card, name='reveal_card'),
    
    # Character selection
    path('game/<int:game_id>/select-character/', views.select_character, name='select_character'),
    path('game/<int:game_id>/assign-color/', views.assign_color, name='assign_color'),
    
    # Timer and status updates
    path('game/<int:game_id>/timer/', views.game_timer, name='game_timer'),
    path('game/<int:game_id>/status/', views.game_status, name='game_status'),
    
    # In-game admin interface
    path('game/<int:game_id>/admin/', views.game_admin, name='game_admin'),
    path('game/<int:game_id>/admin/reset/', views.game_admin_reset, name='game_admin_reset'),
    path('game/<int:game_id>/admin/make-host/<int:player_id>/', views.game_admin_make_host, name='game_admin_make_host'),
    path('game/<int:game_id>/admin/player-cards/<int:player_id>/', views.game_admin_player_cards, name='game_admin_player_cards'),
    path('game/<int:game_id>/admin/deal-cards/', views.game_admin_deal_cards, name='game_admin_deal_cards'),
    path('game/<int:game_id>/admin/reveal-card/<int:card_id>/', views.game_admin_reveal_card, name='game_admin_reveal_card'),
    path('game/<int:game_id>/admin/send-message/', views.game_admin_send_message, name='game_admin_send_message'),
    path('game/<int:game_id>/admin/toggle-card/<int:card_id>/', views.game_admin_toggle_card, name='game_admin_toggle_card'),
    path('game/<int:game_id>/admin/clear-messages/', views.game_admin_clear_messages, name='game_admin_clear_messages'),
    path('log-error/', views.log_error, name='log_error_client'),
]


----- END OF FILE -----

===== game/views.py =====

import logging
from django.shortcuts import render, get_object_or_404, redirect
from django.http import Http404
from django.core.exceptions import ValidationError
from django.db import models
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login, logout
from django.contrib import messages
from django.utils import timezone
from django.db import transaction
from django.http import HttpResponseForbidden, JsonResponse
from django.urls import reverse
import json

from .models import Game, Player, Card, Deck, Hand, Message

# Configure logger
logger = logging.getLogger('game')

# Authentication Views
def register(request):
    """Register a new user"""
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, 'Account created successfully!')
            return redirect('home')
    else:
        form = UserCreationForm()
    
    return render(request, 'game/register.html', {'form': form})

# Game Views
@login_required
def home(request):
    """Display user's games and available games"""
    # Get games the user is part of
    user_games = Player.objects.filter(user=request.user).select_related('game')
    
    # Get games in setup state that the user is not part of
    available_games = Game.objects.filter(status='setup').exclude(
        players__user=request.user
    )
    
    context = {
        'user_games': user_games,
        'available_games': available_games,
    }
    
    return render(request, 'game/home.html', context)

@login_required
def new_game(request):
    """Create a new game"""
    if request.method == 'POST':
        title = request.POST.get('title', f"Alice Search - {timezone.now().strftime('%b %d, %Y')}")
        
        with transaction.atomic():
            # Create a new game
            game = Game.objects.create(
                title=title,
                status='setup'
            )
            
            # Make the current user the host
            player = Player.objects.create(
                user=request.user,
                game=game,
                character_name='',  # Will be set during character selection
                color='',  # Will be set during character selection
                is_host=True
            )
            
            # Create a welcome system message
            create_system_message(
                game,
                "Game created. Invite players using the join code: " + game.join_code,
                "info"
            )
            
            # Create the initial hand for this player
            Hand.objects.create(
                player=player,
                game=game
            )
            
            # Create a game deck from the reference deck (will be implemented later)
            
        messages.success(request, f'Game "{title}" created successfully!')
        return redirect('game_setup', game_id=game.id)
    
    return render(request, 'game/new_game.html')

@login_required
def join_game(request):
    """Join a game using a join code"""
    if request.method == 'POST':
        join_code = request.POST.get('join_code', '').strip().upper()
        
        try:
            game = Game.objects.get(join_code=join_code, status='setup')
            
            # Check if user is already in this game
            if Player.objects.filter(user=request.user, game=game).exists():
                messages.info(request, f'You are already part of the game "{game.title}"')
                return redirect('game_detail', game_id=game.id)
            
            # Create player and hand
            with transaction.atomic():
                player = Player.objects.create(
                    user=request.user,
                    game=game,
                    character_name='',  # Will be set during character selection
                    color='',  # Will be set during character selection
                )
                
                # Create player's hand
                Hand.objects.create(
                    player=player,
                    game=game
                )
                
                # Create a system message about the player joining
                create_system_message(
                    game,
                    f"{request.user.username} has joined the game.",
                    "info"
                )
            
            messages.success(request, f'You have joined the game "{game.title}"')
            return redirect('game_setup', game_id=game.id)
            
        except Game.DoesNotExist:
            messages.error(request, 'Invalid game code or the game has already started')
            return redirect('home')
    
    return redirect('home')

@login_required
def join_game_with_code(request, join_code):
    """Direct link to join a game with a specific code"""
    # This reuses the logic from join_game, but with the code from the URL
    request.method = 'POST'
    request.POST = request.POST.copy()
    request.POST['join_code'] = join_code
    return join_game(request)

@login_required
def game_detail(request, game_id):
    """View game messages"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    # If game is in progress, update card reveals
    if game.status == 'in_progress':
        game.check_card_reveals()
    
    context = {
        'game': game,
        'player': player,
    }
    
    # Determine template based on game status
    if game.status == 'setup':
        return redirect('game_setup', game_id=game.id)
    else:
        # Get the player's hand
        hand = Hand.objects.get(player=player, game=game)
        context['hand'] = hand
        
        # Get messages in chronological order (oldest to newest)
        db_messages = Message.objects.filter(game=game).order_by('timestamp')
        
        # Format messages for the template
        initial_messages_data = []
        for msg in db_messages:
            message_data = {
                'id': msg.id,
                'type': 'system' if msg.is_system_message else 'sent' if msg.sender == player else 'received',
                'isDirect': bool(msg.recipient),
                'content': msg.content,
                'time': msg.timestamp.strftime('%H:%M')
            }
            
            if not msg.is_system_message and msg.sender:
                message_data['sender'] = {
                    'name': msg.sender.character_name,
                    'color': msg.sender.color
                }
            
            if msg.recipient:
                message_data['recipient'] = msg.recipient.character_name
            
            if msg.image:
                message_data['image'] = {
                    'url': msg.image.url,
                    'detailUrl': reverse('message_detail', args=[game.id, msg.id])
                }
            
            initial_messages_data.append(message_data)
        
        # Pass the messages data to the template
        context['initial_messages_json'] = initial_messages_data
        
        # Get recently revealed cards
        context['revealed_cards'] = Card.objects.filter(
            deck__game=game, 
            revealed=True
        ).order_by('-reveal_time')[:6]
        
        return render(request, 'game/game_detail.html', context)

@login_required
def game_info(request, game_id):
    """View game information and details"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    context = {
        'game': game,
        'player': player,
    }
    
    return render(request, 'game/game_info.html', context)

@login_required
def game_setup(request, game_id):
    """Setup page for a game before it starts"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure the game is in setup status
    if game.status != 'setup':
        return redirect('game_detail', game_id=game.id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    # Get all players in this game
    players = Player.objects.filter(game=game)
    
    context = {
        'game': game,
        'player': player,
        'players': players,
        'is_host': player.is_host,
    }
    
    return render(request, 'game/game_setup.html', context)

@login_required
def start_game(request, game_id):
    """Start a game in setup mode"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure the game is in setup status
    if game.status != 'setup':
        messages.error(request, "This game has already started")
        return redirect('game_detail', game_id=game.id)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can start the game")
        return redirect('game_setup', game_id=game.id)
    
    # Ensure all players have selected characters
    incomplete_players = Player.objects.filter(
        game=game, 
        character_name=''
    ).exists()
    
    if incomplete_players:
        messages.error(request, "All players must select a character before starting")
        return redirect('game_setup', game_id=game.id)
    
    # Start the game
    game.start_game()
    messages.success(request, "The game has started! You have 90 minutes to find Alice.")
    
    return redirect('game_detail', game_id=game.id)

@login_required
def end_game(request, game_id):
    """End a game in progress"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure the game is in progress
    if game.status != 'in_progress':
        messages.error(request, "This game is not in progress")
        return redirect('game_detail', game_id=game.id)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can end the game")
        return redirect('game_detail', game_id=game.id)
    
    # End the game
    game.end_game()
    messages.success(request, "The game has ended.")
    
    return redirect('game_detail', game_id=game.id)

@login_required
def select_character(request, game_id):
    """Select a character for the game"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure the game is in setup status
    if game.status != 'setup':
        messages.error(request, "Character selection is only available during setup")
        return redirect('game_detail', game_id=game.id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    if request.method == 'POST':
        character_name = request.POST.get('character_name', '')
        color = request.POST.get('color', '')
        
        # Basic validation
        if not character_name or not color:
            messages.error(request, "Both character name and color are required")
            return redirect('select_character', game_id=game.id)
        
        # Check if the color is already taken in this game
        if Player.objects.filter(game=game, color=color).exclude(id=player.id).exists():
            messages.error(request, f"The color {color} has already been chosen by another player")
            return redirect('select_character', game_id=game.id)
        
        # Update player
        player.character_name = character_name
        player.color = color
        player.save()
        
        # Add system message
        create_system_message(
            game,
            f"{player.user.username} will be playing as {character_name}",
            "info"
        )
        
        messages.success(request, f"You are now playing as {character_name}")
        return redirect('game_setup', game_id=game.id)
    
    # Get available colors (not already chosen by other players)
    taken_colors = Player.objects.filter(game=game).exclude(id=player.id).values_list('color', flat=True)
    available_colors = [c for c, _ in Player.PLAYER_COLORS if c not in taken_colors]
    
    context = {
        'game': game,
        'player': player,
        'available_colors': available_colors,
    }
    
    return render(request, 'game/select_character.html', context)

@login_required
def assign_color(request, game_id):
    """Change player color (useful if we need this separate from character selection)"""
    # This is similar to select_character but only updates the color
    # Implementation is similar, so we'll skip the detailed code for now
    pass

@login_required
def game_timer(request, game_id):
    """API endpoint for the game timer"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        return HttpResponseForbidden("You are not part of this game")
    
    return JsonResponse({
        'time_remaining': game.time_remaining(),
        'status': game.status,
    })

@login_required
def game_status(request, game_id):
    """API endpoint for game status updates"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        return HttpResponseForbidden("You are not part of this game")
    
    # If game is in progress, update card reveals
    if game.status == 'in_progress':
        game.check_card_reveals()
    
    return JsonResponse({
        'status': game.status,
        'time_remaining': game.time_remaining(),
        'player_count': game.players.count(),
    })

@login_required
def player_hand(request, game_id):
    """View the player's hand of cards"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    # Get the player's hand
    hand = get_object_or_404(Hand, player=player, game=game)
    
    context = {
        'game': game,
        'player': player,
        'hand': hand,
        'cards': hand.cards.all(),
    }
    
    return render(request, 'game/player_hand.html', context)

@login_required
def card_detail(request, game_id, card_id):
    """View details of a specific card"""
    game = get_object_or_404(Game, id=game_id)
    card = get_object_or_404(Card, id=card_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    # Ensure this card belongs to the player or is revealed
    hand = get_object_or_404(Hand, player=player, game=game)
    if not (card.revealed or card in hand.cards.all() or card == player.character_card):
        messages.error(request, "You don't have access to this card")
        return redirect('player_hand', game_id=game.id)
    
    context = {
        'game': game,
        'player': player,
        'card': card,
        'hand': hand,
    }
    
    return render(request, 'game/card_detail.html', context)


@login_required
def reveal_card(request, game_id, card_id):
    """Reveal a card to all players"""
    game = get_object_or_404(Game, id=game_id)
    card = get_object_or_404(Card, id=card_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    # Ensure the game is in progress
    if game.status != 'in_progress':
        messages.error(request, "Cards can only be revealed during an active game")
        return redirect('game_detail', game_id=game.id)
    
    # Ensure this card belongs to the player or is ready to be revealed
    hand = get_object_or_404(Hand, player=player, game=game)
    if not (card in hand.cards.all() or card == player.character_card):
        messages.error(request, "You don't have permission to reveal this card")
        return redirect('player_hand', game_id=game.id)
    
    # Check if the card should be revealed
    if not card.revealed:
        if card.should_reveal(game.time_elapsed()):
            card.reveal()
            
            # Create system message for card reveal
            create_system_message(
                game,
                f"{player.character_name} revealed a card: {card.title}",
                "success"
            )
            
            messages.success(request, f"You revealed the card: {card.title}")
        else:
            messages.error(request, "This card isn't ready to be revealed yet")
    else:
        messages.info(request, "This card has already been revealed")
    
    return redirect('card_detail', game_id=game.id, card_id=card.id)




@login_required
def send_message(request, game_id):
    """Send a message in the game"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        logger.warning(f"User {request.user.id} tried to send message in game {game_id} but is not a player.")
        return JsonResponse({'error': 'You are not part of this game'}, status=403)
    
    # Ensure the game is in progress
    if game.status != 'in_progress':
        logger.info(f"User {player.id} tried to send message in game {game_id} but game not in progress (status: {game.status}).")
        return JsonResponse({'error': 'Messages can only be sent during an active game'}, status=400)
    
    if request.method == 'POST':
        try:
            message_content = request.POST.get('message', '').strip()
            message_type = request.POST.get('message_type', 'public')
            recipient_id_str = request.POST.get('recipient')
            image = request.FILES.get('image')
            
            if not message_content and not image:
                logger.warning(f"Player {player.id} in game {game_id} tried to send an empty message.")
                return JsonResponse({'error': 'Message must contain text or an image'}, status=400)
            
            recipient = None
            if message_type == 'direct' and recipient_id_str:
                try:
                    recipient_id = int(recipient_id_str)
                    recipient = Player.objects.get(id=recipient_id, game=game)
                    if recipient == player:
                        logger.warning(f"Player {player.id} tried to send direct message to self in game {game_id}.")
                        return JsonResponse({'error': 'Cannot send a direct message to yourself.'}, status=400)
                except ValueError:
                    logger.error(f"Invalid recipient ID '{recipient_id_str}' for direct message by player {player.id} in game {game_id}.")
                    return JsonResponse({'error': 'Invalid recipient ID format.'}, status=400)
                except Player.DoesNotExist:
                    logger.warning(f"Recipient ID {recipient_id_str} not found for direct message by player {player.id} in game {game_id}.")
                    return JsonResponse({'error': 'Selected recipient not found'}, status=400)
            elif message_type == 'direct' and not recipient_id_str:
                logger.warning(f"Player {player.id} tried to send direct message without recipient in game {game_id}.")
                return JsonResponse({'error': 'Recipient required for direct message.'}, status=400)
            
            message = Message.objects.create(
                game=game,
                sender=player,
                recipient=recipient,
                content=message_content,
                image=image,
                is_system_message=False
            )
            logger.info(f"Message {message.id} created by player {player.id} in game {game_id}.")
            
            if recipient:
                create_system_message(
                    game,
                    f"{player.character_name} sent a direct message to {recipient.character_name}",
                    "info"
                )
            
            response_data = {
                'success': True,
                'message': {
                    'id': message.id,
                    'type': 'sent',
                    'isDirect': bool(recipient),
                    'content': message.content,
                    'sender': {
                        'name': player.character_name,
                        'color': player.color
                    },
                    'recipient': recipient.character_name if recipient else None,
                    'time': message.timestamp.strftime('%H:%M')
                }
            }
            
            if message.image:
                response_data['message']['image'] = {
                    'url': message.image.url,
                    'detailUrl': reverse('message_detail', args=[game.id, message.id])
                }
            
            return JsonResponse(response_data)
            
        except ValidationError as e:
            logger.error(f"ValidationError sending message for player {player.id} in game {game_id}: {e.message_dict}")
            return JsonResponse({'error': e.message_dict}, status=400)
        except Exception as e:
            logger.exception(f"Unexpected error sending message for player {player.id} in game {game_id}: {str(e)}")
            return JsonResponse({'error': 'An unexpected error occurred while sending your message.'}, status=500)
    
    logger.warning(f"Method not allowed for send_message in game {game_id} by user {request.user.id}.")
    return JsonResponse({'error': 'Method not allowed'}, status=405)


@login_required
def message_detail(request, game_id, message_id):
    """View a message's full-size image"""
    game = get_object_or_404(Game, id=game_id)
    message = get_object_or_404(Message, id=message_id, game=game)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        messages.error(request, "You are not part of this game")
        return redirect('home')
    
    # Check if user has access to this message
    if message.recipient and message.recipient != player and message.sender != player:
        messages.error(request, "You don't have permission to view this message")
        return redirect('game_detail', game_id=game.id)
    
    context = {
        'game': game,
        'player': player,
        'message': message,
    }
    
    return render(request, 'game/message_detail.html', context)


# In-game Admin Views
@login_required
def game_admin(request, game_id):
    """Admin panel for game management"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can access the admin panel")
        return redirect('game_detail', game_id=game.id)
    
    # Get game cards
    game_cards = Card.objects.filter(deck__game=game)
    
    # Get card types for the accordions
    card_types = [
        ('character', 'Character'),
        ('clue', 'Clue'),
        ('location', 'Location'),
        ('suspect', 'Suspect'),
        ('motive', 'Motive')
    ]
    
    # Get recent messages
    recent_messages = Message.objects.filter(game=game).order_by('-timestamp')[:20]
    
    context = {
        'game': game,
        'player': player,
        'game_cards': game_cards,
        'card_types': card_types,
        'recent_messages': recent_messages,
        'cards': game_cards,  # For the accordion sections
    }
    
    return render(request, 'game/game_admin.html', context)

@login_required
def game_admin_reset(request, game_id):
    """Reset a finished game to setup status"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can reset the game")
        return redirect('game_admin', game_id=game.id)
    
    # Ensure game is in finished status
    if game.status != 'finished':
        messages.error(request, "Only finished games can be reset")
        return redirect('game_admin', game_id=game.id)
    
    # Reset game
    with transaction.atomic():
        game.status = 'setup'
        game.start_time = None
        game.end_time = None
        game.save()
        
        # Reset all cards
        for deck in game.decks.all():
            deck.cards.all().update(revealed=False)
        
        # Add a system message
        create_system_message(
            game,
            "Game has been reset by the host.",
            "warning"
        )
    
    messages.success(request, "Game has been reset to setup status")
    return redirect('game_admin', game_id=game.id)

@login_required
def game_admin_toggle_card(request, game_id, card_id):
    """Toggle the reveal status of a card"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can toggle card reveal status")
        return redirect('game_detail', game_id=game.id)
    
    # Try to find the card, either in the game deck or in a player's hand
    try:
        card = Card.objects.get(
            id=card_id,
            deck__game=game
        )
    except Card.DoesNotExist:
        try:
            card = Card.objects.get(
                id=card_id,
                in_hands__game=game
            )
        except Card.DoesNotExist:
            messages.error(request, f"Card with ID {card_id} not found in game {game.title}")
            return redirect('game_admin', game_id=game.id)
    
    
    # Toggle the card's revealed status
    card.revealed = not card.revealed
    card.save()
    
    # Add a system message
    action = "revealed" if card.revealed else "hidden"
    create_system_message(
        game,
        f"Card '{card.title}' has been {action} by the host",
        "info"
    )
    
    messages.success(request, f"Card '{card.title}' has been {action}")
    
    # Return to the previous page
    referer = request.META.get('HTTP_REFERER')
    if referer:
        return redirect(referer)
    return redirect('game_admin', game_id=game.id)

@login_required
def game_admin_make_host(request, game_id, player_id):
    """Make another player the host"""
    game = get_object_or_404(Game, id=game_id)
    target_player = get_object_or_404(Player, id=player_id, game=game)
    
    # Ensure user is host of this game
    try:
        current_host = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can transfer host status")
        return redirect('game_detail', game_id=game.id)
    
    # Ensure target player isn't already host
    if target_player.is_host:
        messages.warning(request, f"{target_player.character_name} is already the host")
        return redirect('game_admin', game_id=game.id)
    
    # Transfer host status
    with transaction.atomic():
        current_host.is_host = False
        current_host.save()
        
        target_player.is_host = True
        target_player.save()
        
        # Add a system message
        create_system_message(
            game,
            f"{current_host.character_name} has transferred host status to {target_player.character_name}.",
            "info"
        )
    
    messages.success(request, f"{target_player.character_name} is now the host")
    return redirect('game_detail', game_id=game.id)

@login_required
def game_admin_player_cards(request, game_id, player_id):
    """Manage cards for a specific player"""
    game = get_object_or_404(Game, id=game_id)
    target_player = get_object_or_404(Player, id=player_id, game=game)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can manage player cards")
        return redirect('message_view', game_id=game.id)
    
    # Get the player's hand
    hand = get_object_or_404(Hand, player=target_player, game=game)
    
    # Handle form submission
    if request.method == 'POST':
        action = request.POST.get('action')
        card_ids = request.POST.getlist('card_ids')
        
        if action and card_ids:
            if action == 'add':
                # Add cards to hand
                for card_id in card_ids:
                    card = get_object_or_404(Card, id=card_id, deck__game=game)
                    hand.cards.add(card)
                messages.success(request, f"Added {len(card_ids)} card(s) to {target_player.character_name}'s hand")
            
            elif action == 'remove':
                # Remove cards from hand
                for card_id in card_ids:
                    card = get_object_or_404(Card, id=card_id)
                    hand.cards.remove(card)
                messages.success(request, f"Removed {len(card_ids)} card(s) from {target_player.character_name}'s hand")
    
    # Get all cards for this game
    game_cards = Card.objects.filter(deck__game=game)
    
    # Get player's current cards
    player_cards = hand.cards.all()
    
    # Get available cards (cards not in player's hand)
    available_cards = game_cards.exclude(id__in=player_cards.values_list('id', flat=True))
    
    context = {
        'game': game,
        'player': player,
        'target_player': target_player,
        'hand': hand,
        'player_cards': player_cards,
        'available_cards': available_cards,
    }
    
    return render(request, 'game/game_admin_player_cards.html', context)

@login_required
def game_admin_deal_cards(request, game_id):
    """Automatically deal cards to players"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can deal cards")
        return redirect('message_view', game_id=game.id)
    
    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action:
            # Get all players
            players = game.players.all()
            
            # Get game cards for the specified type
            if action == 'clues':
                cards = Card.objects.filter(deck__game=game, card_type='clue')
                
                if cards.exists():
                    import random
                    for p in players:
                        hand = Hand.objects.get(player=p, game=game)
                        # Assign 1-2 clue cards to each player
                        available_cards = cards.exclude(in_hands__isnull=False)
                        if available_cards.exists():
                            num_cards = min(2, available_cards.count())
                            cards_to_deal = random.sample(list(available_cards), num_cards)
                            for card in cards_to_deal:
                                hand.cards.add(card)
                    
                    messages.success(request, "Clue cards have been dealt to all players")
                else:
                    messages.warning(request, "No clue cards available")
            
            elif action == 'characters':
                cards = Card.objects.filter(deck__game=game, card_type='character')
                
                if cards.exists():
                    # Try to match characters to player names
                    for p in players:
                        if not p.character_card:
                            # Try to find a matching character card
                            matching_card = None
                            for card in cards:
                                if p.character_name and card.title and p.character_name.lower() in card.title.lower():
                                    matching_card = card
                                    break
                            
                            # If no match, assign randomly
                            if not matching_card and cards.filter(assigned_to__isnull=True).exists():
                                import random
                                available_cards = cards.filter(assigned_to__isnull=True)
                                matching_card = random.choice(available_cards)
                            
                            if matching_card:
                                p.character_card = matching_card
                                p.save()
                    
                    messages.success(request, "Character cards have been assigned to players")
                else:
                    messages.warning(request, "No character cards available")
            
            elif action == 'locations':
                cards = Card.objects.filter(deck__game=game, card_type='location')
                
                if cards.exists():
                    # Deal one location card to each player
                    import random
                    available_cards = list(cards.exclude(in_hands__isnull=False))
                    for i, p in enumerate(players):
                        if i < len(available_cards):
                            hand = Hand.objects.get(player=p, game=game)
                            hand.cards.add(available_cards[i])
                    
                    messages.success(request, "Location cards have been dealt to players")
                else:
                    messages.warning(request, "No location cards available")
            
            elif action == 'suspects':
                cards = Card.objects.filter(deck__game=game, card_type='suspect')
                
                if cards.exists():
                    # Deal one suspect card to each player
                    import random
                    available_cards = list(cards.exclude(in_hands__isnull=False))
                    for i, p in enumerate(players):
                        if i < len(available_cards):
                            hand = Hand.objects.get(player=p, game=game)
                            hand.cards.add(available_cards[i])
                    
                    messages.success(request, "Suspect cards have been dealt to players")
                else:
                    messages.warning(request, "No suspect cards available")
            
            elif action == 'motive':
                cards = Card.objects.filter(deck__game=game, card_type='motive')
                
                if cards.exists():
                    # Deal one motive card to a random player
                    import random
                    available_cards = list(cards.exclude(in_hands__isnull=False))
                    if available_cards and players.exists():
                        random_player = random.choice(players)
                        hand = Hand.objects.get(player=random_player, game=game)
                        hand.cards.add(available_cards[0])
                        
                        messages.success(request, f"Motive card has been dealt to {random_player.character_name}")
                    else:
                        messages.warning(request, "No motive cards available or no players to deal to")
                else:
                    messages.warning(request, "No motive cards available")
    
    return redirect('game_admin', game_id=game.id)

@login_required
def game_admin_reveal_card(request, game_id, card_id):
    """Reveal a card immediately"""
    game = get_object_or_404(Game, id=game_id)
    card = get_object_or_404(Card, id=card_id, deck__game=game)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can reveal cards")
        return redirect('message_view', game_id=game.id)
    
    # Skip if already revealed
    if card.revealed:
        messages.warning(request, f"Card '{card.title}' is already revealed")
        return redirect('game_admin', game_id=game.id)
    
    # Reveal the card
    card.revealed = True
    card.save()
    
    # Add a system message
    create_system_message(
        game,
        f"Card revealed by host: {card.title}",
        "success"
    )
    
    messages.success(request, f"Card '{card.title}' has been revealed")
    return redirect('game_admin', game_id=game.id)

@login_required
def game_admin_send_message(request, game_id):
    """Send a system message to all players"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is host of this game
    try:
        player = Player.objects.get(user=request.user, game=game, is_host=True)
    except Player.DoesNotExist:
        messages.error(request, "Only the host can send system messages")
        return redirect('message_view', game_id=game.id)
    
    if request.method == 'POST':
        message_content = request.POST.get('message_content', '').strip()
        
        if message_content:
            # Create the system message
            create_system_message(
                game,
                message_content,
                "info"
            )
            
            messages.success(request, "System message sent successfully")
        else:
            messages.error(request, "Message content cannot be empty")
    
    return redirect('game_admin', game_id=game.id)

@login_required
def game_messages(request, game_id):
    """Get messages after a specific ID"""
    game = get_object_or_404(Game, id=game_id)
    
    # Ensure user is part of this game
    try:
        player = Player.objects.get(user=request.user, game=game)
    except Player.DoesNotExist:
        return HttpResponseForbidden("You are not part of this game")
    
    # Get the last message ID from the request
    after_id = request.GET.get('after', 0)
    try:
        after_id = int(after_id)
    except ValueError:
        after_id = 0
    
    # Get messages after the specified ID
    messages = Message.objects.filter(
        game=game,
        id__gt=after_id
    ).order_by('timestamp')
    
    # Format messages for JSON response
    message_list = []
    for msg in messages:
        message_data = {
            'id': msg.id,
            'type': 'system' if msg.is_system_message else 'sent' if msg.sender == player else 'received',
            'isDirect': bool(msg.recipient),
            'content': msg.content,
            'time': msg.timestamp.strftime('%H:%M')
        }
        
        if not msg.is_system_message:
            message_data['sender'] = {
                'name': msg.sender.character_name,
                'color': msg.sender.color
            }
            if msg.recipient:
                message_data['recipient'] = msg.recipient.character_name
        
        if msg.image:
            message_data['image'] = {
                'url': msg.image.url,
                'detailUrl': reverse('message_detail', args=[game.id, msg.id])
            }
        
        message_list.append(message_data)
    
    return JsonResponse({'messages': message_list})

def create_system_message(game, content, system_type=None):
    """
    Create a system message with optional type (alert, success, info, warning)
    """
    message = Message.objects.create(
        game=game,
        content=content,
        is_system_message=True,
        system_type=system_type
    )
    return message

def start_game(request, game_id):
    game = get_object_or_404(Game, id=game_id)
    if request.user != game.host:
        return JsonResponse({'error': 'Only the host can start the game'}, status=403)
    
    if game.status != 'setup':
        return JsonResponse({'error': 'Game is not in setup mode'}, status=400)
    
    game.status = 'in_progress'
    game.start_time = timezone.now()
    game.save()
    
    create_system_message(game, "The game has started!", "success")
    return JsonResponse({'status': 'success'})

def end_game(request, game_id):
    game = get_object_or_404(Game, id=game_id)
    if request.user != game.host:
        return JsonResponse({'error': 'Only the host can end the game'}, status=403)
    
    if game.status != 'in_progress':
        return JsonResponse({'error': 'Game is not in progress'}, status=400)
    
    game.status = 'finished'
    game.end_time = timezone.now()
    game.save()
    
    create_system_message(game, "The game has ended!", "info")
    return JsonResponse({'status': 'success'})

def reset_game(request, game_id):
    game = get_object_or_404(Game, id=game_id)
    if request.user != game.host:
        return JsonResponse({'error': 'Only the host can reset the game'}, status=403)
    
    game.status = 'setup'
    game.start_time = None
    game.end_time = None
    game.save()
    
    create_system_message(game, "The game has been reset to setup mode.", "warning")
    return JsonResponse({'status': 'success'})

def player_joined(game, player):
    create_system_message(game, f"{player.character_name} has joined the game!", "info")

def player_left(game, player):
    create_system_message(game, f"{player.character_name} has left the game.", "alert")

def card_revealed(game, card):
    create_system_message(game, f"The card '{card.title}' has been revealed!", "success")

def card_hidden(game, card):
    create_system_message(game, f"The card '{card.title}' has been hidden.", "warning")

@login_required
def game_admin_clear_messages(request, game_id):
    """Clear all messages in a game"""
    game = get_object_or_404(Game, id=game_id)
    
    # Check if user is the host
    if not game.is_host(request.user):
        return JsonResponse({'error': 'Only the host can clear messages'}, status=403)
    
    # Delete all messages
    game.messages.all().delete()
    
    return JsonResponse({'status': 'success'})

@login_required
def log_error(request):
    """Log client-side errors"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            logger.error(
                f"Client Error: {data.get('error')}\n"
                f"Context: {data.get('context')}\n"
                f"Stack: {data.get('stack')}\n"
                f"URL: {data.get('context', {}).get('url')}\n"
                f"User Agent: {data.get('context', {}).get('userAgent')}"
            )
            return JsonResponse({'status': 'success'})
        except json.JSONDecodeError:
            logger.error("Invalid JSON in log_error request")
            return JsonResponse({'error': 'Invalid JSON'}, status=400)
        except Exception as e:
            logger.exception("Error in log_error view")
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

----- END OF FILE -----

===== manage.py =====

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aliceismissing.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

----- END OF FILE -----

===== middleware.py =====

import logging
from django.template.exceptions import TemplateSyntaxError, TemplateDoesNotExist

logger = logging.getLogger('django.template')

class TemplateErrorMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        try:
            response = self.get_response(request)
            return response
        except (TemplateSyntaxError, TemplateDoesNotExist) as e:
            logger.error(f"Template error: {str(e)}", exc_info=True)
            raise 
----- END OF FILE -----

===== settings.py =====

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}\n{exc_info}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'log.txt',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template.loaders': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template.loaders.base': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template.loaders.cached': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template.loaders.filesystem': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template.loaders.app_directories': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template.backends': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template.backends.django': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'game_logger': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'ERROR',
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'game.middleware.TemplateErrorMiddleware',
] 
----- END OF FILE -----

===== static/css/cards.css =====

/* Card Container */
.card-container {
    perspective: 1000px;
    height: 400px;
    cursor: pointer;
    margin-bottom: 1rem;
}

/* Card Inner */
.card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.8s;
    transform-style: preserve-3d;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    border-radius: 10px;
}

/* Card Container Flipped */
.card-container.flipped .card-inner {
    transform: rotateY(180deg);
}

/* Card Front and Back */
.card-front, .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    border-radius: 10px;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    background: white;
}

/* Card Back */
.card-back {
    transform: rotateY(180deg);
    background: #f8f9fa;
}

/* Card Type Badge */
.card-type-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    padding: 0.25rem 0.5rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 500;
    color: white;
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

/* Card Type Colors */
.card-type-badge.character { background-color: #007bff; }
.card-type-badge.motive { background-color: #dc3545; }
.card-type-badge.location { background-color: #28a745; }
.card-type-badge.clue { background-color: #ffc107; color: #000; }
.card-type-badge.suspect { background-color: #6f42c1; }

/* Card Title */
.card-title {
    margin: 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: #333;
}

/* Card Description */
.card-description {
    font-size: 0.9rem;
    color: #666;
    line-height: 1.5;
    margin: 1rem 0;
    text-align: left;
}

/* Card Image */
.card-image {
    max-width: 100%;
    max-height: 200px;
    object-fit: contain;
    margin: 1rem 0;
    border-radius: 5px;
}

/* Card Hint */
.card-hint {
    position: absolute;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.8rem;
    color: #666;
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

/* Card Reveal Time */
.card-reveal-time {
    font-size: 0.8rem;
    color: #666;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    margin-top: auto;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .card-container {
        height: 350px;
    }
    
    .card-title {
        font-size: 1.1rem;
    }
    
    .card-description {
        font-size: 0.85rem;
    }
    
    .card-image {
        max-height: 150px;
    }
} 
----- END OF FILE -----

===== static/css/game.css =====

/* Alice is Missing - Main Style Sheet */

/* ===== VARIABLES ===== */
:root {
    --blue: #0d6efd;
    --green: #198754;
    --yellow: #ffc107;
    --purple: #6f42c1;
    --pink: #d63384;
    --red: #dc3545;
    --text-light: #f8f9fa;
    --text-dark: #212529;
    --border-light: #dee2e6;
    --background-light: #f8f9fa;
    --background-medium: #e9ecef;
    --background-dark: #343a40;
    --timer-color: var(--red);
    --system-message-bg: #fff3cd;
    --sent-message-bg: #d1e7dd;
    --received-message-bg: #f8f9fa;
    --card-flip-time: 0.6s;
    --message-input-bg: #ffffff;
    --message-input-border: #dee2e6;
    --message-input-shadow: 0 -2px 10px rgba(0,0,0,0.1);
}

/* ===== BASIC STYLES ===== */
body {
    background-color: var(--background-medium);
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    max-width: 100%;
    overflow-x: hidden;
    color: var(--text-dark);
    margin: 0;
    padding: 0;
    height: 100vh;
}

/* ===== PHONE CONTAINER ===== */
.phone-container {
    max-width: 450px;
    min-width: 320px;
    margin: 10px auto;
    border: 10px solid #111;
    border-radius: 30px;
    background-color: white;
    box-shadow: 0 8px 16px rgba(0,0,0,0.15), 0 4px 4px rgba(0,0,0,0.1);
    height: calc(100vh - 20px);
    max-height: 850px;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.phone-header {
    height: 50px;
    background-color: var(--background-light);
    border-bottom: 1px solid var(--border-light);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 12px;
    font-size: 0.85rem;
    flex-shrink: 0;
    z-index: 10;
}

.phone-header .phone-time {
    font-weight: 500;
}

.phone-header .phone-title {
    font-weight: bold;
    text-align: center;
    flex-grow: 1;
    padding: 0 10px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.phone-header .phone-status-icons {
    display: flex;
    align-items: center;
    gap: 8px;
}

.phone-header .timer {
    font-weight: bold;
    color: var(--timer-color);
}

.phone-content-main {
    flex: 1;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    background-color: var(--background-medium);
    position: relative;
    min-height: 0; /* Important pour que flex fonctionne correctement */
}

#mithril-messages-mount {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    min-height: 0; /* Important pour que flex fonctionne correctement */
}

.messages-container {
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex: 1;
    min-height: 0; /* Important pour que flex fonctionne correctement */
}

.message-input-footer {
    flex-shrink: 0;
    background: var(--message-input-bg);
    padding: 10px;
    border-top: 1px solid var(--message-input-border);
    box-shadow: var(--message-input-shadow);
    z-index: 10;
    position: relative;
}

.message-controls {
    margin-bottom: 8px;
}

.message-type-selector .btn {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
}

#recipient-select-container {
    transition: all 0.3s ease;
}

#recipient-select-container .form-select {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
}

#image-preview-container {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 5px;
    background-color: #fff;
    border: 1px solid var(--border-light);
    border-radius: 5px;
}

#image-preview-thumb {
    max-width: 40px;
    max-height: 40px;
    border-radius: 3px;
    object-fit: cover;
}

.phone-footer {
    height: 60px;
    background-color: var(--background-light);
    border-top: 1px solid var(--border-light);
    display: flex;
    align-items: center;
    justify-content: space-around;
    flex-shrink: 0;
    padding: 0 5px;
    z-index: 10;
}

.phone-footer .nav-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-size: 0.7rem;
    color: #6c757d;
    padding: 5px;
    text-decoration: none;
}

.phone-footer .nav-item i {
    font-size: 1.3rem;
    margin-bottom: 2px;
}

.phone-footer .nav-item.active {
    color: var(--blue);
}

.phone-footer .nav-item:hover {
    color: var(--blue);
    opacity: 0.8;
}

/* ===== MESSAGE STYLING ===== */
.message-bubble {
    border-radius: 18px;
    padding: 8px 12px;
    margin-bottom: 2px;
    max-width: 80%;
    position: relative;
    word-break: break-word;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    font-size: 0.9rem;
}

.message-bubble.sent {
    background-color: var(--sent-message-bg);
    margin-left: auto;
    border-bottom-right-radius: 5px;
}

.message-bubble.received {
    background-color: var(--received-message-bg);
    margin-right: auto;
    border-bottom-left-radius: 5px;
}

.message-bubble.system {
    background-color: var(--system-message-bg);
    color: var(--text-dark);
    margin: 10px auto;
    text-align: center;
    font-style: italic;
    font-size: 0.8rem;
    padding: 6px 10px;
    max-width: 90%;
    border-radius: 8px;
}

.message-bubble.message-direct {
    border: 1px solid;
}

.message-sender {
    font-size: 0.75em;
    font-weight: bold;
    display: block;
    margin-bottom: 3px;
}

.message-sender .direct-indicator {
    font-weight: normal;
    opacity: 0.8;
}

.message-image img.message-thumbnail {
    display: block;
    max-width: 100%;
    max-height: 200px;
    border-radius: 10px;
    object-fit: cover;
    cursor: pointer;
    transition: transform 0.2s ease;
}

.message-image img.message-thumbnail:hover {
    transform: scale(1.02);
}

.message-time {
    font-size: 0.7em;
    color: #777;
    text-align: right;
    margin-top: 4px;
    clear: both;
}

/* ===== PLAYER AVATARS ===== */
.player-avatar-container {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.player-avatar {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1rem;
    margin-bottom: 2px;
    background-color: #f1f1f1;
}

.player-name {
    font-size: 0.65rem;
    text-align: center;
}

/* ===== CHARACTER COLORS ===== */
.blue { color: var(--blue) !important; }
.green { color: var(--green) !important; }
.yellow { color: var(--yellow) !important; text-shadow: 0 0 2px rgba(0,0,0,0.1); }
.purple { color: var(--purple) !important; }
.pink { color: var(--pink) !important; }

/* Specific border colors for direct messages */
.message-direct.blue { border-color: var(--blue); }
.message-direct.green { border-color: var(--green); }
.message-direct.yellow { border-color: var(--yellow); }
.message-direct.purple { border-color: var(--purple); }
.message-direct.pink { border-color: var(--pink); }

/* ===== ANIMATIONS ===== */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

.pulse {
    animation: pulse 2s infinite;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.fade-in {
    animation: fadeIn 0.5s ease-in;
}

/* Message container animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Card reveal toggle switch */
.toggle-switch {
    position: relative;
    display: inline-block;
    width: 44px;
    height: 24px;
    margin: 0;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #dee2e6;
    transition: .3s;
    border-radius: 24px;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.2);
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .3s;
    border-radius: 50%;
    box-shadow: 0 1px 2px rgba(0,0,0,0.2);
}

input:checked + .toggle-slider {
    background-color: var(--green);
}

input:focus + .toggle-slider {
    box-shadow: 0 0 1px var(--green);
}

input:checked + .toggle-slider:before {
    transform: translateX(20px);
}

/* Toggle container and status styling */
.toggle-container {
    display: flex;
    align-items: center;
    gap: 8px;
}

.card-status {
    font-size: 0.75rem;
    color: #6c757d;
    margin-left: 8px;
}

/* Card list item improvements */
.list-group-item {
    transition: opacity 0.3s ease;
}

.list-group-item.text-muted {
    opacity: 0.7;
}

.fade-in-up {
    animation: fadeInUp 0.3s ease-out;
}

/* ===== RESPONSIVE ADJUSTMENTS ===== */
@media (max-width: 576px) {
    .phone-container {
        margin: 0;
        height: 100vh;
        max-height: 100vh;
        border-radius: 0;
        border: none;
        box-shadow: none;
    }
    
    .phone-header {
        height: 45px;
        padding: 0 10px;
        font-size: 0.8rem;
    }
    
    .phone-footer {
        height: 55px;
    }
    
    .phone-footer .nav-item i {
        font-size: 1.2rem;
    }
    
    .phone-footer .nav-item span {
        font-size: 0.65rem;
    }
    
    .messages-container {
        padding: 8px;
    }
    
    .message-input-footer {
        padding: 8px;
    }
}

/* ===== CARD STYLING ===== */
.card-container {
    perspective: 1000px;
    width: 100%;
    height: 300px;
    margin-bottom: 1rem;
    cursor: pointer;
}

.card-container .card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.6s;
    transform-style: preserve-3d;
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-container.flipped .card-inner {
    transform: rotateY(180deg);
}

.card-container .card-front,
.card-container .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 15px;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: white;
    border: 1px solid var(--border-light);
}

.card-container .card-front {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
}

.card-container .card-back {
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    transform: rotateY(180deg);
}

.card-type-badge {
    position: absolute;
    top: 1rem;
    left: 1rem;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--background-light);
    border: 1px solid var(--border-light);
}

.card-type-badge.clue { color: var(--blue); }
.card-type-badge.character { color: var(--green); }
.card-type-badge.location { color: var(--purple); }
.card-type-badge.suspect { color: var(--yellow); }
.card-type-badge.motive { color: var(--red); }

.card-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 2rem 0 1rem;
    color: var(--text-dark);
}

.card-description {
    font-size: 0.9rem;
    color: var(--text-dark);
    text-align: left;
    overflow-y: auto;
    flex-grow: 1;
    padding: 0.5rem;
    background-color: var(--background-light);
    border-radius: 0.5rem;
    margin: 0.5rem 0;
}

.card-image {
    max-width: 100%;
    max-height: 120px;
    object-fit: contain;
    border-radius: 0.5rem;
    margin: 0.5rem 0;
}

.card-hint {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.75rem;
    color: var(--text-muted);
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.card-reveal-time {
    position: absolute;
    bottom: 1rem;
    left: 1rem;
    font-size: 0.75rem;
    color: var(--text-muted);
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

/* Card hover effect for desktop */
@media (min-width: 768px) {
    .card-container {
        transition: transform 0.3s ease;
    }
    
    .card-container:hover {
        transform: translateY(-5px);
    }
    
    .card-container:hover .card-inner {
        box-shadow: 0 8px 16px rgba(0,0,0,0.15);
    }
}

.message-content-text {
    white-space: pre-wrap;
    word-break: break-word;
}


----- END OF FILE -----

===== staticfiles/admin/css/autocomplete.css =====

select.admin-autocomplete {
    width: 20em;
}

.select2-container--admin-autocomplete.select2-container {
    min-height: 30px;
}

.select2-container--admin-autocomplete .select2-selection--single,
.select2-container--admin-autocomplete .select2-selection--multiple {
    min-height: 30px;
    padding: 0;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection,
.select2-container--admin-autocomplete.select2-container--open .select2-selection {
    border-color: var(--body-quiet-color);
    min-height: 30px;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection.select2-selection--single,
.select2-container--admin-autocomplete.select2-container--open .select2-selection.select2-selection--single {
    padding: 0;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection.select2-selection--multiple,
.select2-container--admin-autocomplete.select2-container--open .select2-selection.select2-selection--multiple {
    padding: 0;
}

.select2-container--admin-autocomplete .select2-selection--single {
    background-color: var(--body-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__rendered {
    color: var(--body-fg);
    line-height: 30px;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__clear {
    cursor: pointer;
    float: right;
    font-weight: bold;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__placeholder {
    color: var(--body-quiet-color);
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__arrow {
    height: 26px;
    position: absolute;
    top: 1px;
    right: 1px;
    width: 20px;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__arrow b {
    border-color: #888 transparent transparent transparent;
    border-style: solid;
    border-width: 5px 4px 0 4px;
    height: 0;
    left: 50%;
    margin-left: -4px;
    margin-top: -2px;
    position: absolute;
    top: 50%;
    width: 0;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--single .select2-selection__clear {
    float: left;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--single .select2-selection__arrow {
    left: 1px;
    right: auto;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--single {
    background-color: var(--darkened-bg);
    cursor: default;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--single .select2-selection__clear {
    display: none;
}

.select2-container--admin-autocomplete.select2-container--open .select2-selection--single .select2-selection__arrow b {
    border-color: transparent transparent #888 transparent;
    border-width: 0 4px 5px 4px;
}

.select2-container--admin-autocomplete .select2-selection--multiple {
    background-color: var(--body-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    cursor: text;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__rendered {
    box-sizing: border-box;
    list-style: none;
    margin: 0;
    padding: 0 10px 5px 5px;
    width: 100%;
    display: flex;
    flex-wrap: wrap;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__rendered li {
    list-style: none;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__placeholder {
    color: var(--body-quiet-color);
    margin-top: 5px;
    float: left;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__clear {
    cursor: pointer;
    float: right;
    font-weight: bold;
    margin: 5px;
    position: absolute;
    right: 0;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__choice {
    background-color: var(--darkened-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    cursor: default;
    float: left;
    margin-right: 5px;
    margin-top: 5px;
    padding: 0 5px;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__choice__remove {
    color: var(--body-quiet-color);
    cursor: pointer;
    display: inline-block;
    font-weight: bold;
    margin-right: 2px;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__choice__remove:hover {
    color: var(--body-fg);
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__choice, .select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__placeholder, .select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-search--inline {
    float: right;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__choice {
    margin-left: 5px;
    margin-right: auto;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove {
    margin-left: 2px;
    margin-right: auto;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection--multiple {
    border: solid var(--body-quiet-color) 1px;
    outline: 0;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--multiple {
    background-color: var(--darkened-bg);
    cursor: default;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection__choice__remove {
    display: none;
}

.select2-container--admin-autocomplete.select2-container--open.select2-container--above .select2-selection--single, .select2-container--admin-autocomplete.select2-container--open.select2-container--above .select2-selection--multiple {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
}

.select2-container--admin-autocomplete.select2-container--open.select2-container--below .select2-selection--single, .select2-container--admin-autocomplete.select2-container--open.select2-container--below .select2-selection--multiple {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}

.select2-container--admin-autocomplete .select2-search--dropdown {
    background: var(--darkened-bg);
}

.select2-container--admin-autocomplete .select2-search--dropdown .select2-search__field {
    background: var(--body-bg);
    color: var(--body-fg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.select2-container--admin-autocomplete .select2-search--inline .select2-search__field {
    background: transparent;
    color: var(--body-fg);
    border: none;
    outline: 0;
    box-shadow: none;
    -webkit-appearance: textfield;
}

.select2-container--admin-autocomplete .select2-results > .select2-results__options {
    max-height: 200px;
    overflow-y: auto;
    color: var(--body-fg);
    background: var(--body-bg);
}

.select2-container--admin-autocomplete .select2-results__option[role=group] {
    padding: 0;
}

.select2-container--admin-autocomplete .select2-results__option[aria-disabled=true] {
    color: var(--body-quiet-color);
}

.select2-container--admin-autocomplete .select2-results__option[aria-selected=true] {
    background-color: var(--selected-bg);
    color: var(--body-fg);
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option {
    padding-left: 1em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__group {
    padding-left: 0;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -1em;
    padding-left: 2em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -2em;
    padding-left: 3em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -3em;
    padding-left: 4em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -4em;
    padding-left: 5em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -5em;
    padding-left: 6em;
}

.select2-container--admin-autocomplete .select2-results__option--highlighted[aria-selected] {
    background-color: var(--primary);
    color: var(--primary-fg);
}

.select2-container--admin-autocomplete .select2-results__group {
    cursor: default;
    display: block;
    padding: 6px;
}

.errors .select2-selection {
    border: 1px solid var(--error-fg);
}

----- END OF FILE -----

===== staticfiles/admin/css/base.css =====

/*
    DJANGO Admin styles
*/

/* VARIABLE DEFINITIONS */
html[data-theme="light"],
:root {
    --primary: #79aec8;
    --secondary: #417690;
    --accent: #f5dd5d;
    --primary-fg: #fff;

    --body-fg: #333;
    --body-bg: #fff;
    --body-quiet-color: #666;
    --body-medium-color: #444;
    --body-loud-color: #000;

    --header-color: #ffc;
    --header-branding-color: var(--accent);
    --header-bg: var(--secondary);
    --header-link-color: var(--primary-fg);

    --breadcrumbs-fg: #c4dce8;
    --breadcrumbs-link-fg: var(--body-bg);
    --breadcrumbs-bg: #264b5d;

    --link-fg: #417893;
    --link-hover-color: #036;
    --link-selected-fg: var(--secondary);

    --hairline-color: #e8e8e8;
    --border-color: #ccc;

    --error-fg: #ba2121;

    --message-success-bg: #dfd;
    --message-warning-bg: #ffc;
    --message-error-bg: #ffefef;

    --darkened-bg: #f8f8f8; /* A bit darker than --body-bg */
    --selected-bg: #e4e4e4; /* E.g. selected table cells */
    --selected-row: #ffc;

    --button-fg: #fff;
    --button-bg: var(--secondary);
    --button-hover-bg: #205067;
    --default-button-bg: #205067;
    --default-button-hover-bg: var(--secondary);
    --close-button-bg: #747474;
    --close-button-hover-bg: #333;
    --delete-button-bg: #ba2121;
    --delete-button-hover-bg: #a41515;

    --object-tools-fg: var(--button-fg);
    --object-tools-bg: var(--close-button-bg);
    --object-tools-hover-bg: var(--close-button-hover-bg);

    --font-family-primary:
        "Segoe UI",
        system-ui,
        Roboto,
        "Helvetica Neue",
        Arial,
        sans-serif,
        "Apple Color Emoji",
        "Segoe UI Emoji",
        "Segoe UI Symbol",
        "Noto Color Emoji";
    --font-family-monospace:
        ui-monospace,
        Menlo,
        Monaco,
        "Cascadia Mono",
        "Segoe UI Mono",
        "Roboto Mono",
        "Oxygen Mono",
        "Ubuntu Monospace",
        "Source Code Pro",
        "Fira Mono",
        "Droid Sans Mono",
        "Courier New",
        monospace,
        "Apple Color Emoji",
        "Segoe UI Emoji",
        "Segoe UI Symbol",
        "Noto Color Emoji";

    color-scheme: light;
}

html, body {
    height: 100%;
}

body {
    margin: 0;
    padding: 0;
    font-size: 0.875rem;
    font-family: var(--font-family-primary);
    color: var(--body-fg);
    background: var(--body-bg);
}

/* LINKS */

a:link, a:visited {
    color: var(--link-fg);
    text-decoration: none;
    transition: color 0.15s, background 0.15s;
}

a:focus, a:hover {
    color: var(--link-hover-color);
}

a:focus {
    text-decoration: underline;
}

a img {
    border: none;
}

a.section:link, a.section:visited {
    color: var(--header-link-color);
    text-decoration: none;
}

a.section:focus, a.section:hover {
    text-decoration: underline;
}

/* GLOBAL DEFAULTS */

p, ol, ul, dl {
    margin: .2em 0 .8em 0;
}

p {
    padding: 0;
    line-height: 140%;
}

h1,h2,h3,h4,h5 {
    font-weight: bold;
}

h1 {
    margin: 0 0 20px;
    font-weight: 300;
    font-size: 1.25rem;
}

h2 {
    font-size: 1rem;
    margin: 1em 0 .5em 0;
}

h2.subhead {
    font-weight: normal;
    margin-top: 0;
}

h3 {
    font-size: 0.875rem;
    margin: .8em 0 .3em 0;
    color: var(--body-medium-color);
    font-weight: bold;
}

h4 {
    font-size: 0.75rem;
    margin: 1em 0 .8em 0;
    padding-bottom: 3px;
    color: var(--body-medium-color);
}

h5 {
    font-size: 0.625rem;
    margin: 1.5em 0 .5em 0;
    color: var(--body-quiet-color);
    text-transform: uppercase;
    letter-spacing: 1px;
}

ul > li {
    list-style-type: square;
    padding: 1px 0;
}

li ul {
    margin-bottom: 0;
}

li, dt, dd {
    font-size: 0.8125rem;
    line-height: 1.25rem;
}

dt {
    font-weight: bold;
    margin-top: 4px;
}

dd {
    margin-left: 0;
}

form {
    margin: 0;
    padding: 0;
}

fieldset {
    margin: 0;
    min-width: 0;
    padding: 0;
    border: none;
    border-top: 1px solid var(--hairline-color);
}

details summary {
    cursor: pointer;
}

blockquote {
    font-size: 0.6875rem;
    color: #777;
    margin-left: 2px;
    padding-left: 10px;
    border-left: 5px solid #ddd;
}

code, pre {
    font-family: var(--font-family-monospace);
    color: var(--body-quiet-color);
    font-size: 0.75rem;
    overflow-x: auto;
}

pre.literal-block {
    margin: 10px;
    background: var(--darkened-bg);
    padding: 6px 8px;
}

code strong {
    color: #930;
}

hr {
    clear: both;
    color: var(--hairline-color);
    background-color: var(--hairline-color);
    height: 1px;
    border: none;
    margin: 0;
    padding: 0;
    line-height: 1px;
}

/* TEXT STYLES & MODIFIERS */

.small {
    font-size: 0.6875rem;
}

.mini {
    font-size: 0.625rem;
}

.help, p.help, form p.help, div.help, form div.help, div.help li {
    font-size: 0.6875rem;
    color: var(--body-quiet-color);
}

div.help ul {
     margin-bottom: 0;
}

.help-tooltip {
    cursor: help;
}

p img, h1 img, h2 img, h3 img, h4 img, td img {
    vertical-align: middle;
}

.quiet, a.quiet:link, a.quiet:visited {
    color: var(--body-quiet-color);
    font-weight: normal;
}

.clear {
    clear: both;
}

.nowrap {
    white-space: nowrap;
}

.hidden {
    display: none !important;
}

/* TABLES */

table {
    border-collapse: collapse;
    border-color: var(--border-color);
}

td, th {
    font-size: 0.8125rem;
    line-height: 1rem;
    border-bottom: 1px solid var(--hairline-color);
    vertical-align: top;
    padding: 8px;
}

th {
    font-weight: 500;
    text-align: left;
}

thead th,
tfoot td {
    color: var(--body-quiet-color);
    padding: 5px 10px;
    font-size: 0.6875rem;
    background: var(--body-bg);
    border: none;
    border-top: 1px solid var(--hairline-color);
    border-bottom: 1px solid var(--hairline-color);
}

tfoot td {
    border-bottom: none;
    border-top: 1px solid var(--hairline-color);
}

thead th.required {
    font-weight: bold;
}

tr.alt {
    background: var(--darkened-bg);
}

tr:nth-child(odd), .row-form-errors {
    background: var(--body-bg);
}

tr:nth-child(even),
tr:nth-child(even) .errorlist,
tr:nth-child(odd) + .row-form-errors,
tr:nth-child(odd) + .row-form-errors .errorlist {
    background: var(--darkened-bg);
}

/* SORTABLE TABLES */

thead th {
    padding: 5px 10px;
    line-height: normal;
    text-transform: uppercase;
    background: var(--darkened-bg);
}

thead th a:link, thead th a:visited {
    color: var(--body-quiet-color);
}

thead th.sorted {
    background: var(--selected-bg);
}

thead th.sorted .text {
    padding-right: 42px;
}

table thead th .text span {
    padding: 8px 10px;
    display: block;
}

table thead th .text a {
    display: block;
    cursor: pointer;
    padding: 8px 10px;
}

table thead th .text a:focus, table thead th .text a:hover {
    background: var(--selected-bg);
}

thead th.sorted a.sortremove {
    visibility: hidden;
}

table thead th.sorted:hover a.sortremove {
    visibility: visible;
}

table thead th.sorted .sortoptions {
    display: block;
    padding: 9px 5px 0 5px;
    float: right;
    text-align: right;
}

table thead th.sorted .sortpriority {
    font-size: .8em;
    min-width: 12px;
    text-align: center;
    vertical-align: 3px;
    margin-left: 2px;
    margin-right: 2px;
}

table thead th.sorted .sortoptions a {
    position: relative;
    width: 14px;
    height: 14px;
    display: inline-block;
    background: url(../img/sorting-icons.svg) 0 0 no-repeat;
    background-size: 14px auto;
}

table thead th.sorted .sortoptions a.sortremove {
    background-position: 0 0;
}

table thead th.sorted .sortoptions a.sortremove:after {
    content: '\\';
    position: absolute;
    top: -6px;
    left: 3px;
    font-weight: 200;
    font-size: 1.125rem;
    color: var(--body-quiet-color);
}

table thead th.sorted .sortoptions a.sortremove:focus:after,
table thead th.sorted .sortoptions a.sortremove:hover:after {
    color: var(--link-fg);
}

table thead th.sorted .sortoptions a.sortremove:focus,
table thead th.sorted .sortoptions a.sortremove:hover {
    background-position: 0 -14px;
}

table thead th.sorted .sortoptions a.ascending {
    background-position: 0 -28px;
}

table thead th.sorted .sortoptions a.ascending:focus,
table thead th.sorted .sortoptions a.ascending:hover {
    background-position: 0 -42px;
}

table thead th.sorted .sortoptions a.descending {
    top: 1px;
    background-position: 0 -56px;
}

table thead th.sorted .sortoptions a.descending:focus,
table thead th.sorted .sortoptions a.descending:hover {
    background-position: 0 -70px;
}

/* FORM DEFAULTS */

input, textarea, select, .form-row p, form .button {
    margin: 2px 0;
    padding: 2px 3px;
    vertical-align: middle;
    font-family: var(--font-family-primary);
    font-weight: normal;
    font-size: 0.8125rem;
}
.form-row div.help {
    padding: 2px 3px;
}

textarea {
    vertical-align: top;
}

/*
Minifiers remove the default (text) "type" attribute from "input" HTML tags.
Add input:not([type]) to make the CSS stylesheet work the same.
*/
input:not([type]), input[type=text], input[type=password], input[type=email],
input[type=url], input[type=number], input[type=tel], textarea, select,
.vTextField {
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 5px 6px;
    margin-top: 0;
    color: var(--body-fg);
    background-color: var(--body-bg);
}

/*
Minifiers remove the default (text) "type" attribute from "input" HTML tags.
Add input:not([type]) to make the CSS stylesheet work the same.
*/
input:not([type]):focus, input[type=text]:focus, input[type=password]:focus,
input[type=email]:focus, input[type=url]:focus, input[type=number]:focus,
input[type=tel]:focus, textarea:focus, select:focus, .vTextField:focus {
    border-color: var(--body-quiet-color);
}

select {
    height: 1.875rem;
}

select[multiple] {
    /* Allow HTML size attribute to override the height in the rule above. */
    height: auto;
    min-height: 150px;
}

/* FORM BUTTONS */

.button, input[type=submit], input[type=button], .submit-row input, a.button {
    background: var(--button-bg);
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    color: var(--button-fg);
    cursor: pointer;
    transition: background 0.15s;
}

a.button {
    padding: 4px 5px;
}

.button:active, input[type=submit]:active, input[type=button]:active,
.button:focus, input[type=submit]:focus, input[type=button]:focus,
.button:hover, input[type=submit]:hover, input[type=button]:hover {
    background: var(--button-hover-bg);
}

.button[disabled], input[type=submit][disabled], input[type=button][disabled] {
    opacity: 0.4;
}

.button.default, input[type=submit].default, .submit-row input.default {
    border: none;
    font-weight: 400;
    background: var(--default-button-bg);
}

.button.default:active, input[type=submit].default:active,
.button.default:focus, input[type=submit].default:focus,
.button.default:hover, input[type=submit].default:hover {
    background: var(--default-button-hover-bg);
}

.button[disabled].default,
input[type=submit][disabled].default,
input[type=button][disabled].default {
    opacity: 0.4;
}


/* MODULES */

.module {
    border: none;
    margin-bottom: 30px;
    background: var(--body-bg);
}

.module p, .module ul, .module h3, .module h4, .module dl, .module pre {
    padding-left: 10px;
    padding-right: 10px;
}

.module blockquote {
    margin-left: 12px;
}

.module ul, .module ol {
    margin-left: 1.5em;
}

.module h3 {
    margin-top: .6em;
}

.module h2, .module caption, .inline-group h2 {
    margin: 0;
    padding: 8px;
    font-weight: 400;
    font-size: 0.8125rem;
    text-align: left;
    background: var(--header-bg);
    color: var(--header-link-color);
}

.module caption,
.inline-group h2 {
    font-size: 0.75rem;
    letter-spacing: 0.5px;
    text-transform: uppercase;
}

.module table {
    border-collapse: collapse;
}

/* MESSAGES & ERRORS */

ul.messagelist {
    padding: 0;
    margin: 0;
}

ul.messagelist li {
    display: block;
    font-weight: 400;
    font-size: 0.8125rem;
    padding: 10px 10px 10px 65px;
    margin: 0 0 10px 0;
    background: var(--message-success-bg) url(../img/icon-yes.svg) 40px 12px no-repeat;
    background-size: 16px auto;
    color: var(--body-fg);
    word-break: break-word;
}

ul.messagelist li.warning {
    background: var(--message-warning-bg) url(../img/icon-alert.svg) 40px 14px no-repeat;
    background-size: 14px auto;
}

ul.messagelist li.error {
    background: var(--message-error-bg) url(../img/icon-no.svg) 40px 12px no-repeat;
    background-size: 16px auto;
}

.errornote {
    font-size: 0.875rem;
    font-weight: 700;
    display: block;
    padding: 10px 12px;
    margin: 0 0 10px 0;
    color: var(--error-fg);
    border: 1px solid var(--error-fg);
    border-radius: 4px;
    background-color: var(--body-bg);
    background-position: 5px 12px;
    overflow-wrap: break-word;
}

ul.errorlist {
    margin: 0 0 4px;
    padding: 0;
    color: var(--error-fg);
    background: var(--body-bg);
}

ul.errorlist li {
    font-size: 0.8125rem;
    display: block;
    margin-bottom: 4px;
    overflow-wrap: break-word;
}

ul.errorlist li:first-child {
    margin-top: 0;
}

ul.errorlist li a {
    color: inherit;
    text-decoration: underline;
}

td ul.errorlist {
    margin: 0;
    padding: 0;
}

td ul.errorlist li {
    margin: 0;
}

.form-row.errors {
    margin: 0;
    border: none;
    border-bottom: 1px solid var(--hairline-color);
    background: none;
}

.form-row.errors ul.errorlist li {
    padding-left: 0;
}

.errors input, .errors select, .errors textarea,
td ul.errorlist + input, td ul.errorlist + select, td ul.errorlist + textarea {
    border: 1px solid var(--error-fg);
}

.description {
    font-size: 0.75rem;
    padding: 5px 0 0 12px;
}

/* BREADCRUMBS */

div.breadcrumbs {
    background: var(--breadcrumbs-bg);
    padding: 10px 40px;
    border: none;
    color: var(--breadcrumbs-fg);
    text-align: left;
}

div.breadcrumbs a {
    color: var(--breadcrumbs-link-fg);
}

div.breadcrumbs a:focus, div.breadcrumbs a:hover {
    color: var(--breadcrumbs-fg);
}

/* ACTION ICONS */

.viewlink, .inlineviewlink {
    padding-left: 16px;
    background: url(../img/icon-viewlink.svg) 0 1px no-repeat;
}

.hidelink {
    padding-left: 16px;
    background: url(../img/icon-hidelink.svg) 0 1px no-repeat;
}

.addlink {
    padding-left: 16px;
    background: url(../img/icon-addlink.svg) 0 1px no-repeat;
}

.changelink, .inlinechangelink {
    padding-left: 16px;
    background: url(../img/icon-changelink.svg) 0 1px no-repeat;
}

.deletelink {
    padding-left: 16px;
    background: url(../img/icon-deletelink.svg) 0 1px no-repeat;
}

a.deletelink:link, a.deletelink:visited {
    color: #CC3434; /* XXX Probably unused? */
}

a.deletelink:focus, a.deletelink:hover {
    color: #993333; /* XXX Probably unused? */
    text-decoration: none;
}

/* OBJECT TOOLS */

.object-tools {
    font-size: 0.625rem;
    font-weight: bold;
    padding-left: 0;
    float: right;
    position: relative;
    margin-top: -48px;
}

.object-tools li {
    display: block;
    float: left;
    margin-left: 5px;
    height: 1rem;
}

.object-tools a {
    border-radius: 15px;
}

.object-tools a:link, .object-tools a:visited {
    display: block;
    float: left;
    padding: 3px 12px;
    background: var(--object-tools-bg);
    color: var(--object-tools-fg);
    font-weight: 400;
    font-size: 0.6875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.object-tools a:focus, .object-tools a:hover {
    background-color: var(--object-tools-hover-bg);
}

.object-tools a:focus{
    text-decoration: none;
}

.object-tools a.viewsitelink, .object-tools a.addlink {
    background-repeat: no-repeat;
    background-position: right 7px center;
    padding-right: 26px;
}

.object-tools a.viewsitelink {
    background-image: url(../img/tooltag-arrowright.svg);
}

.object-tools a.addlink {
    background-image: url(../img/tooltag-add.svg);
}

/* OBJECT HISTORY */

#change-history table {
    width: 100%;
}

#change-history table tbody th {
    width: 16em;
}

#change-history .paginator {
    color: var(--body-quiet-color);
    border-bottom: 1px solid var(--hairline-color);
    background: var(--body-bg);
    overflow: hidden;
}

/* PAGE STRUCTURE */

#container {
    position: relative;
    width: 100%;
    min-width: 980px;
    padding: 0;
    display: flex;
    flex-direction: column;
    height: 100%;
}

#container > .main {
    display: flex;
    flex: 1 0 auto;
}

.main > .content {
    flex:  1 0;
    max-width: 100%;
}

.skip-to-content-link {
    position: absolute;
    top: -999px;
    margin: 5px;
    padding: 5px;
    background: var(--body-bg);
    z-index: 1;
}

.skip-to-content-link:focus {
    left: 0px;
    top: 0px;
}

#content {
    padding: 20px 40px;
}

.dashboard #content {
    width: 600px;
}

#content-main {
    float: left;
    width: 100%;
}

#content-related {
    float: right;
    width: 260px;
    position: relative;
    margin-right: -300px;
}

@media (forced-colors: active) {
  #content-related {
      border: 1px solid;
  }
}

/* COLUMN TYPES */

.colMS {
    margin-right: 300px;
}

.colSM {
    margin-left: 300px;
}

.colSM #content-related {
    float: left;
    margin-right: 0;
    margin-left: -300px;
}

.colSM #content-main {
    float: right;
}

.popup .colM {
    width: auto;
}

/* HEADER */

#header {
    width: auto;
    height: auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 40px;
    background: var(--header-bg);
    color: var(--header-color);
}

#header a:link, #header a:visited, #logout-form button {
    color: var(--header-link-color);
}

#header a:focus , #header a:hover {
    text-decoration: underline;
}

@media (forced-colors: active) {
  #header {
      border-bottom: 1px solid;
  }
}

#branding {
    display: flex;
}

#site-name {
    padding: 0;
    margin: 0;
    margin-inline-end: 20px;
    font-weight: 300;
    font-size: 1.5rem;
    color: var(--header-branding-color);
}

#site-name a:link, #site-name a:visited {
    color: var(--accent);
}

#branding h2 {
    padding: 0 10px;
    font-size: 0.875rem;
    margin: -8px 0 8px 0;
    font-weight: normal;
    color: var(--header-color);
}

#branding a:hover {
    text-decoration: none;
}

#logout-form {
    display: inline;
}

#logout-form button {
    background: none;
    border: 0;
    cursor: pointer;
    font-family: var(--font-family-primary);
}

#user-tools {
    float: right;
    margin: 0 0 0 20px;
    text-align: right;
}

#user-tools, #logout-form button{
    padding: 0;
    font-weight: 300;
    font-size: 0.6875rem;
    letter-spacing: 0.5px;
    text-transform: uppercase;
}

#user-tools a, #logout-form button {
    border-bottom: 1px solid rgba(255, 255, 255, 0.25);
}

#user-tools a:focus, #user-tools a:hover,
#logout-form button:active, #logout-form button:hover {
    text-decoration: none;
    border-bottom: 0;
}

#logout-form button:active, #logout-form button:hover {
    margin-bottom: 1px;
}

/* SIDEBAR */

#content-related {
    background: var(--darkened-bg);
}

#content-related .module {
    background: none;
}

#content-related h3 {
    color: var(--body-quiet-color);
    padding: 0 16px;
    margin: 0 0 16px;
}

#content-related h4 {
    font-size: 0.8125rem;
}

#content-related p {
    padding-left: 16px;
    padding-right: 16px;
}

#content-related .actionlist {
    padding: 0;
    margin: 16px;
}

#content-related .actionlist li {
    line-height: 1.2;
    margin-bottom: 10px;
    padding-left: 18px;
}

#content-related .module h2 {
    background: none;
    padding: 16px;
    margin-bottom: 16px;
    border-bottom: 1px solid var(--hairline-color);
    font-size: 1.125rem;
    color: var(--body-fg);
}

.delete-confirmation form input[type="submit"] {
    background: var(--delete-button-bg);
    border-radius: 4px;
    padding: 10px 15px;
    color: var(--button-fg);
}

.delete-confirmation form input[type="submit"]:active,
.delete-confirmation form input[type="submit"]:focus,
.delete-confirmation form input[type="submit"]:hover {
    background: var(--delete-button-hover-bg);
}

.delete-confirmation form .cancel-link {
    display: inline-block;
    vertical-align: middle;
    height: 0.9375rem;
    line-height: 0.9375rem;
    border-radius: 4px;
    padding: 10px 15px;
    color: var(--button-fg);
    background: var(--close-button-bg);
    margin: 0 0 0 10px;
}

.delete-confirmation form .cancel-link:active,
.delete-confirmation form .cancel-link:focus,
.delete-confirmation form .cancel-link:hover {
    background: var(--close-button-hover-bg);
}

/* POPUP */
.popup #content {
    padding: 20px;
}

.popup #container {
    min-width: 0;
}

.popup #header {
    padding: 10px 20px;
}

/* PAGINATOR */

.paginator {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 0.8125rem;
    padding-top: 10px;
    padding-bottom: 10px;
    line-height: 22px;
    margin: 0;
    border-top: 1px solid var(--hairline-color);
    width: 100%;
}

.paginator a:link, .paginator a:visited {
    padding: 2px 6px;
    background: var(--button-bg);
    text-decoration: none;
    color: var(--button-fg);
}

.paginator a.showall {
    border: none;
    background: none;
    color: var(--link-fg);
}

.paginator a.showall:focus, .paginator a.showall:hover {
    background: none;
    color: var(--link-hover-color);
}

.paginator .end {
    margin-right: 6px;
}

.paginator .this-page {
    padding: 2px 6px;
    font-weight: bold;
    font-size: 0.8125rem;
    vertical-align: top;
}

.paginator a:focus, .paginator a:hover {
    color: white;
    background: var(--link-hover-color);
}

.paginator input {
    margin-left: auto;
}

.base-svgs {
    display: none;
}

.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0,0,0,0);
    white-space: nowrap;
    border: 0;
    color: var(--body-fg);
    background-color: var(--body-bg);
}

----- END OF FILE -----

===== staticfiles/admin/css/changelists.css =====

/* CHANGELISTS */

#changelist {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
}

#changelist .changelist-form-container {
    flex: 1 1 auto;
    min-width: 0;
}

#changelist table {
    width: 100%;
}

.change-list .hiddenfields { display:none; }

.change-list .filtered table {
    border-right: none;
}

.change-list .filtered {
    min-height: 400px;
}

.change-list .filtered .results, .change-list .filtered .paginator,
.filtered #toolbar, .filtered div.xfull {
    width: auto;
}

.change-list .filtered table tbody th {
    padding-right: 1em;
}

#changelist-form .results {
    overflow-x: auto;
    width: 100%;
}

#changelist .toplinks {
    border-bottom: 1px solid var(--hairline-color);
}

#changelist .paginator {
    color: var(--body-quiet-color);
    border-bottom: 1px solid var(--hairline-color);
    background: var(--body-bg);
    overflow: hidden;
}

/* CHANGELIST TABLES */

#changelist table thead th {
    padding: 0;
    white-space: nowrap;
    vertical-align: middle;
}

#changelist table thead th.action-checkbox-column {
    width: 1.5em;
    text-align: center;
}

#changelist table tbody td.action-checkbox {
    text-align: center;
}

#changelist table tfoot {
    color: var(--body-quiet-color);
}

/* TOOLBAR */

#toolbar {
    padding: 8px 10px;
    margin-bottom: 15px;
    border-top: 1px solid var(--hairline-color);
    border-bottom: 1px solid var(--hairline-color);
    background: var(--darkened-bg);
    color: var(--body-quiet-color);
}

#toolbar form input {
    border-radius: 4px;
    font-size: 0.875rem;
    padding: 5px;
    color: var(--body-fg);
}

#toolbar #searchbar {
    height: 1.1875rem;
    border: 1px solid var(--border-color);
    padding: 2px 5px;
    margin: 0;
    vertical-align: top;
    font-size: 0.8125rem;
    max-width: 100%;
}

#toolbar #searchbar:focus {
    border-color: var(--body-quiet-color);
}

#toolbar form input[type="submit"] {
    border: 1px solid var(--border-color);
    font-size: 0.8125rem;
    padding: 4px 8px;
    margin: 0;
    vertical-align: middle;
    background: var(--body-bg);
    box-shadow: 0 -15px 20px -10px rgba(0, 0, 0, 0.15) inset;
    cursor: pointer;
    color: var(--body-fg);
}

#toolbar form input[type="submit"]:focus,
#toolbar form input[type="submit"]:hover {
    border-color: var(--body-quiet-color);
}

#changelist-search img {
    vertical-align: middle;
    margin-right: 4px;
}

#changelist-search .help {
    word-break: break-word;
}

/* FILTER COLUMN */

#changelist-filter {
    flex: 0 0 240px;
    order: 1;
    background: var(--darkened-bg);
    border-left: none;
    margin: 0 0 0 30px;
}

@media (forced-colors: active) {
  #changelist-filter {
      border: 1px solid;
  }
}

#changelist-filter h2 {
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    padding: 5px 15px;
    margin-bottom: 12px;
    border-bottom: none;
}

#changelist-filter h3,
#changelist-filter details summary {
    font-weight: 400;
    padding: 0 15px;
    margin-bottom: 10px;
}

#changelist-filter details summary > * {
    display: inline;
}

#changelist-filter details > summary {
    list-style-type: none;
}

#changelist-filter details > summary::-webkit-details-marker {
    display: none;
}

#changelist-filter details > summary::before {
    content: '→';
    font-weight: bold;
    color: var(--link-hover-color);
}

#changelist-filter details[open] > summary::before {
    content: '↓';
}

#changelist-filter ul {
    margin: 5px 0;
    padding: 0 15px 15px;
    border-bottom: 1px solid var(--hairline-color);
}

#changelist-filter ul:last-child {
    border-bottom: none;
}

#changelist-filter li {
    list-style-type: none;
    margin-left: 0;
    padding-left: 0;
}

#changelist-filter a {
    display: block;
    color: var(--body-quiet-color);
    word-break: break-word;
}

#changelist-filter li.selected {
    border-left: 5px solid var(--hairline-color);
    padding-left: 10px;
    margin-left: -15px;
}

#changelist-filter li.selected a {
    color: var(--link-selected-fg);
}

#changelist-filter a:focus, #changelist-filter a:hover,
#changelist-filter li.selected a:focus,
#changelist-filter li.selected a:hover {
    color: var(--link-hover-color);
}

#changelist-filter #changelist-filter-extra-actions {
    font-size: 0.8125rem;
    margin-bottom: 10px;
    border-bottom: 1px solid var(--hairline-color);
}

/* DATE DRILLDOWN */

.change-list .toplinks {
    display: flex;
    padding-bottom: 5px;
    flex-wrap: wrap;
    gap: 3px 17px;
    font-weight: bold;
}

.change-list .toplinks a {
    font-size: 0.8125rem;
}

.change-list .toplinks .date-back {
    color: var(--body-quiet-color);
}

.change-list .toplinks .date-back:focus,
.change-list .toplinks .date-back:hover {
    color: var(--link-hover-color);
}

/* ACTIONS */

.filtered .actions {
    border-right: none;
}

#changelist table input {
    margin: 0;
    vertical-align: baseline;
}

/* Once the :has() pseudo-class is supported by all browsers, the tr.selected
   selector and the JS adding the class can be removed. */
#changelist tbody tr.selected {
    background-color: var(--selected-row);
}

#changelist tbody tr:has(.action-select:checked) {
    background-color: var(--selected-row);
}

@media (forced-colors: active) {
    #changelist tbody tr.selected {
        background-color: SelectedItem;
    }
    #changelist tbody tr:has(.action-select:checked) {
        background-color: SelectedItem;
    }
}

#changelist .actions {
    padding: 10px;
    background: var(--body-bg);
    border-top: none;
    border-bottom: none;
    line-height: 1.5rem;
    color: var(--body-quiet-color);
    width: 100%;
}

#changelist .actions span.all,
#changelist .actions span.action-counter,
#changelist .actions span.clear,
#changelist .actions span.question {
    font-size: 0.8125rem;
    margin: 0 0.5em;
}

#changelist .actions:last-child {
    border-bottom: none;
}

#changelist .actions select {
    vertical-align: top;
    height: 1.5rem;
    color: var(--body-fg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 0.875rem;
    padding: 0 0 0 4px;
    margin: 0;
    margin-left: 10px;
}

#changelist .actions select:focus {
    border-color: var(--body-quiet-color);
}

#changelist .actions label {
    display: inline-block;
    vertical-align: middle;
    font-size: 0.8125rem;
}

#changelist .actions .button {
    font-size: 0.8125rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background: var(--body-bg);
    box-shadow: 0 -15px 20px -10px rgba(0, 0, 0, 0.15) inset;
    cursor: pointer;
    height: 1.5rem;
    line-height: 1;
    padding: 4px 8px;
    margin: 0;
    color: var(--body-fg);
}

#changelist .actions .button:focus, #changelist .actions .button:hover {
    border-color: var(--body-quiet-color);
}

----- END OF FILE -----

===== staticfiles/admin/css/dark_mode.css =====

@media (prefers-color-scheme: dark) {
    :root {
      --primary: #264b5d;
      --primary-fg: #f7f7f7;
  
      --body-fg: #eeeeee;
      --body-bg: #121212;
      --body-quiet-color: #d0d0d0;
      --body-medium-color: #e0e0e0;
      --body-loud-color: #ffffff;
  
      --breadcrumbs-link-fg: #e0e0e0;
      --breadcrumbs-bg: var(--primary);
  
      --link-fg: #81d4fa;
      --link-hover-color: #4ac1f7;
      --link-selected-fg: #6f94c6;
  
      --hairline-color: #272727;
      --border-color: #353535;
  
      --error-fg: #e35f5f;
      --message-success-bg: #006b1b;
      --message-warning-bg: #583305;
      --message-error-bg: #570808;
  
      --darkened-bg: #212121;
      --selected-bg: #1b1b1b;
      --selected-row: #00363a;
  
      --close-button-bg: #333333;
      --close-button-hover-bg: #666666;

      color-scheme: dark;
    }
  }


html[data-theme="dark"] {
    --primary: #264b5d;
    --primary-fg: #f7f7f7;

    --body-fg: #eeeeee;
    --body-bg: #121212;
    --body-quiet-color: #d0d0d0;
    --body-medium-color: #e0e0e0;
    --body-loud-color: #ffffff;

    --breadcrumbs-link-fg: #e0e0e0;
    --breadcrumbs-bg: var(--primary);

    --link-fg: #81d4fa;
    --link-hover-color: #4ac1f7;
    --link-selected-fg: #6f94c6;

    --hairline-color: #272727;
    --border-color: #353535;

    --error-fg: #e35f5f;
    --message-success-bg: #006b1b;
    --message-warning-bg: #583305;
    --message-error-bg: #570808;

    --darkened-bg: #212121;
    --selected-bg: #1b1b1b;
    --selected-row: #00363a;

    --close-button-bg: #333333;
    --close-button-hover-bg: #666666;

    color-scheme: dark;
}

/* THEME SWITCH */
.theme-toggle {
    cursor: pointer;
    border: none;
    padding: 0;
    background: transparent;
    vertical-align: middle;
    margin-inline-start: 5px;
    margin-top: -1px;
}

.theme-toggle svg {
    vertical-align: middle;
    height: 1rem;
    width: 1rem;
    display: none;
}

/*
Fully hide screen reader text so we only show the one matching the current
theme.
*/
.theme-toggle .visually-hidden {
    display: none;
}

html[data-theme="auto"] .theme-toggle .theme-label-when-auto {
    display: block;
}

html[data-theme="dark"] .theme-toggle .theme-label-when-dark {
    display: block;
}

html[data-theme="light"] .theme-toggle .theme-label-when-light {
    display: block;
}

/* ICONS */
.theme-toggle svg.theme-icon-when-auto,
.theme-toggle svg.theme-icon-when-dark,
.theme-toggle svg.theme-icon-when-light {
    fill: var(--header-link-color);
    color: var(--header-bg);
}

html[data-theme="auto"] .theme-toggle svg.theme-icon-when-auto {
    display: block;
}

html[data-theme="dark"] .theme-toggle svg.theme-icon-when-dark {
    display: block;
}

html[data-theme="light"] .theme-toggle svg.theme-icon-when-light {
    display: block;
}

----- END OF FILE -----

===== staticfiles/admin/css/dashboard.css =====

/* DASHBOARD */
.dashboard td, .dashboard th {
    word-break: break-word;
}

.dashboard .module table th {
    width: 100%;
}

.dashboard .module table td {
    white-space: nowrap;
}

.dashboard .module table td a {
    display: block;
    padding-right: .6em;
}

/* RECENT ACTIONS MODULE */

.module ul.actionlist {
    margin-left: 0;
}

ul.actionlist li {
    list-style-type: none;
    overflow: hidden;
    text-overflow: ellipsis;
}

----- END OF FILE -----

===== staticfiles/admin/css/forms.css =====

@import url('widgets.css');

/* FORM ROWS */

.form-row {
    overflow: hidden;
    padding: 10px;
    font-size: 0.8125rem;
    border-bottom: 1px solid var(--hairline-color);
}

.form-row img, .form-row input {
    vertical-align: middle;
}

.form-row label input[type="checkbox"] {
    margin-top: 0;
    vertical-align: 0;
}

form .form-row p {
    padding-left: 0;
}

.flex-container {
    display: flex;
}

.form-multiline {
    flex-wrap: wrap;
}

.form-multiline > div {
    padding-bottom: 10px;
}

/* FORM LABELS */

label {
    font-weight: normal;
    color: var(--body-quiet-color);
    font-size: 0.8125rem;
}

.required label, label.required {
    font-weight: bold;
}

/* RADIO BUTTONS */

form div.radiolist div {
    padding-right: 7px;
}

form div.radiolist.inline div {
    display: inline-block;
}

form div.radiolist label {
    width: auto;
}

form div.radiolist input[type="radio"] {
    margin: -2px 4px 0 0;
    padding: 0;
}

form ul.inline {
    margin-left: 0;
    padding: 0;
}

form ul.inline li {
    float: left;
    padding-right: 7px;
}

/* FIELDSETS */

fieldset .fieldset-heading,
fieldset .inline-heading,
:not(.inline-related) .collapse summary {
    border: 1px solid var(--header-bg);
    margin: 0;
    padding: 8px;
    font-weight: 400;
    font-size: 0.8125rem;
    background: var(--header-bg);
    color: var(--header-link-color);
}

/* ALIGNED FIELDSETS */

.aligned label {
    display: block;
    padding: 4px 10px 0 0;
    min-width: 160px;
    width: 160px;
    word-wrap: break-word;
}

.aligned label:not(.vCheckboxLabel):after {
    content: '';
    display: inline-block;
    vertical-align: middle;
}

.aligned label + p, .aligned .checkbox-row + div.help, .aligned label + div.readonly {
    padding: 6px 0;
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 0;
    overflow-wrap: break-word;
}

.aligned ul label {
    display: inline;
    float: none;
    width: auto;
}

.aligned .form-row input {
    margin-bottom: 0;
}

.colMS .aligned .vLargeTextField, .colMS .aligned .vXMLLargeTextField {
    width: 350px;
}

form .aligned ul {
    margin-left: 160px;
    padding-left: 10px;
}

form .aligned div.radiolist {
    display: inline-block;
    margin: 0;
    padding: 0;
}

form .aligned p.help,
form .aligned div.help {
    margin-top: 0;
    margin-left: 160px;
    padding-left: 10px;
}

form .aligned p.date div.help.timezonewarning,
form .aligned p.datetime div.help.timezonewarning,
form .aligned p.time div.help.timezonewarning {
    margin-left: 0;
    padding-left: 0;
    font-weight: normal;
}

form .aligned p.help:last-child,
form .aligned div.help:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
}

form .aligned input + p.help,
form .aligned textarea + p.help,
form .aligned select + p.help,
form .aligned input + div.help,
form .aligned textarea + div.help,
form .aligned select + div.help {
    margin-left: 160px;
    padding-left: 10px;
}

form .aligned select option:checked {
    background-color: var(--selected-row);
}

form .aligned ul li {
    list-style: none;
}

form .aligned table p {
    margin-left: 0;
    padding-left: 0;
}

.aligned .vCheckboxLabel {
    padding: 1px 0 0 5px;
}

.aligned .vCheckboxLabel + p.help,
.aligned .vCheckboxLabel + div.help {
    margin-top: -4px;
}

.colM .aligned .vLargeTextField, .colM .aligned .vXMLLargeTextField {
    width: 610px;
}

fieldset .fieldBox {
    margin-right: 20px;
}

/* WIDE FIELDSETS */

.wide label {
    width: 200px;
}

form .wide p.help,
form .wide ul.errorlist,
form .wide div.help {
    padding-left: 50px;
}

form div.help ul {
    padding-left: 0;
    margin-left: 0;
}

.colM fieldset.wide .vLargeTextField, .colM fieldset.wide .vXMLLargeTextField {
    width: 450px;
}

/* COLLAPSIBLE FIELDSETS */

.collapse summary .fieldset-heading,
.collapse summary .inline-heading {
    background: transparent;
    border: none;
    color: currentColor;
    display: inline;
    margin: 0;
    padding: 0;
}

/* MONOSPACE TEXTAREAS */

fieldset.monospace textarea {
    font-family: var(--font-family-monospace);
}

/* SUBMIT ROW */

.submit-row {
    padding: 12px 14px 12px;
    margin: 0 0 20px;
    background: var(--darkened-bg);
    border: 1px solid var(--hairline-color);
    border-radius: 4px;
    overflow: hidden;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

body.popup .submit-row {
    overflow: auto;
}

.submit-row input {
    height: 2.1875rem;
    line-height: 0.9375rem;
}

.submit-row input, .submit-row a {
    margin: 0;
}

.submit-row input.default {
    text-transform: uppercase;
}

.submit-row a.deletelink {
    margin-left: auto;
}

.submit-row a.deletelink {
    display: block;
    background: var(--delete-button-bg);
    border-radius: 4px;
    padding: 0.625rem 0.9375rem;
    height: 0.9375rem;
    line-height: 0.9375rem;
    color: var(--button-fg);
}

.submit-row a.closelink {
    display: inline-block;
    background: var(--close-button-bg);
    border-radius: 4px;
    padding: 10px 15px;
    height: 0.9375rem;
    line-height: 0.9375rem;
    color: var(--button-fg);
}

.submit-row a.deletelink:focus,
.submit-row a.deletelink:hover,
.submit-row a.deletelink:active {
    background: var(--delete-button-hover-bg);
    text-decoration: none;
}

.submit-row a.closelink:focus,
.submit-row a.closelink:hover,
.submit-row a.closelink:active {
    background: var(--close-button-hover-bg);
    text-decoration: none;
}

/* CUSTOM FORM FIELDS */

.vSelectMultipleField {
    vertical-align: top;
}

.vCheckboxField {
    border: none;
}

.vDateField, .vTimeField {
    margin-right: 2px;
    margin-bottom: 4px;
}

.vDateField {
    min-width: 6.85em;
}

.vTimeField {
    min-width: 4.7em;
}

.vURLField {
    width: 30em;
}

.vLargeTextField, .vXMLLargeTextField {
    width: 48em;
}

.flatpages-flatpage #id_content {
    height: 40.2em;
}

.module table .vPositiveSmallIntegerField {
    width: 2.2em;
}

.vIntegerField {
    width: 5em;
}

.vBigIntegerField {
    width: 10em;
}

.vForeignKeyRawIdAdminField {
    width: 5em;
}

.vTextField, .vUUIDField {
    width: 20em;
}

/* INLINES */

.inline-group {
    padding: 0;
    margin: 0 0 30px;
}

.inline-group thead th {
    padding: 8px 10px;
}

.inline-group .aligned label {
    width: 160px;
}

.inline-related {
    position: relative;
}

.inline-related h4,
.inline-related:not(.tabular) .collapse summary {
    margin: 0;
    color: var(--body-medium-color);
    padding: 5px;
    font-size: 0.8125rem;
    background: var(--darkened-bg);
    border: 1px solid var(--hairline-color);
    border-left-color: var(--darkened-bg);
    border-right-color: var(--darkened-bg);
}

.inline-related h3 span.delete {
    float: right;
}

.inline-related h3 span.delete label {
    margin-left: 2px;
    font-size: 0.6875rem;
}

.inline-related fieldset {
    margin: 0;
    background: var(--body-bg);
    border: none;
    width: 100%;
}

.inline-group .tabular fieldset.module {
    border: none;
}

.inline-related.tabular fieldset.module table {
    width: 100%;
    overflow-x: scroll;
}

.last-related fieldset {
    border: none;
}

.inline-group .tabular tr.has_original td {
    padding-top: 2em;
}

.inline-group .tabular tr td.original {
    padding: 2px 0 0 0;
    width: 0;
    _position: relative;
}

.inline-group .tabular th.original {
    width: 0px;
    padding: 0;
}

.inline-group .tabular td.original p {
    position: absolute;
    left: 0;
    height: 1.1em;
    padding: 2px 9px;
    overflow: hidden;
    font-size: 0.5625rem;
    font-weight: bold;
    color: var(--body-quiet-color);
    _width: 700px;
}

.inline-group ul.tools {
    padding: 0;
    margin: 0;
    list-style: none;
}

.inline-group ul.tools li {
    display: inline;
    padding: 0 5px;
}

.inline-group div.add-row,
.inline-group .tabular tr.add-row td {
    color: var(--body-quiet-color);
    background: var(--darkened-bg);
    padding: 8px 10px;
    border-bottom: 1px solid var(--hairline-color);
}

.inline-group .tabular tr.add-row td {
    padding: 8px 10px;
    border-bottom: 1px solid var(--hairline-color);
}

.inline-group ul.tools a.add,
.inline-group div.add-row a,
.inline-group .tabular tr.add-row td a {
    background: url(../img/icon-addlink.svg) 0 1px no-repeat;
    padding-left: 16px;
    font-size: 0.75rem;
}

.empty-form {
    display: none;
}

/* RELATED FIELD ADD ONE / LOOKUP */

.related-lookup {
    margin-left: 5px;
    display: inline-block;
    vertical-align: middle;
    background-repeat: no-repeat;
    background-size: 14px;
}

.related-lookup {
    width: 1rem;
    height: 1rem;
    background-image: url(../img/search.svg);
}

form .related-widget-wrapper ul {
    display: inline-block;
    margin-left: 0;
    padding-left: 0;
}

.clearable-file-input input {
    margin-top: 0;
}

----- END OF FILE -----

===== staticfiles/admin/css/login.css =====

/* LOGIN FORM */

.login {
    background: var(--darkened-bg);
    height: auto;
}

.login #header {
    height: auto;
    padding: 15px 16px;
    justify-content: center;
}

.login #header h1 {
    font-size: 1.125rem;
    margin: 0;
}

.login #header h1 a {
    color: var(--header-link-color);
}

.login #content {
    padding: 20px;
}

.login #container {
    background: var(--body-bg);
    border: 1px solid var(--hairline-color);
    border-radius: 4px;
    overflow: hidden;
    width: 28em;
    min-width: 300px;
    margin: 100px auto;
    height: auto;
}

.login .form-row {
    padding: 4px 0;
}

.login .form-row label {
    display: block;
    line-height: 2em;
}

.login .form-row #id_username, .login .form-row #id_password {
    padding: 8px;
    width: 100%;
    box-sizing: border-box;
}

.login .submit-row {
    padding: 1em 0 0 0;
    margin: 0;
    text-align: center;
}

.login .password-reset-link {
    text-align: center;
}

----- END OF FILE -----

===== staticfiles/admin/css/nav_sidebar.css =====

.sticky {
    position: sticky;
    top: 0;
    max-height: 100vh;
}

.toggle-nav-sidebar {
    z-index: 20;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 0 0 23px;
    width: 23px;
    border: 0;
    border-right: 1px solid var(--hairline-color);
    background-color: var(--body-bg);
    cursor: pointer;
    font-size: 1.25rem;
    color: var(--link-fg);
    padding: 0;
}

[dir="rtl"] .toggle-nav-sidebar {
    border-left: 1px solid var(--hairline-color);
    border-right: 0;
}

.toggle-nav-sidebar:hover,
.toggle-nav-sidebar:focus {
    background-color: var(--darkened-bg);
}

#nav-sidebar {
    z-index: 15;
    flex: 0 0 275px;
    left: -276px;
    margin-left: -276px;
    border-top: 1px solid transparent;
    border-right: 1px solid var(--hairline-color);
    background-color: var(--body-bg);
    overflow: auto;
}

[dir="rtl"] #nav-sidebar {
    border-left: 1px solid var(--hairline-color);
    border-right: 0;
    left: 0;
    margin-left: 0;
    right: -276px;
    margin-right: -276px;
}

.toggle-nav-sidebar::before {
    content: '\00BB';
}

.main.shifted .toggle-nav-sidebar::before {
    content: '\00AB';
}

.main > #nav-sidebar {
    visibility: hidden;
}

.main.shifted > #nav-sidebar {
    margin-left: 0;
    visibility: visible;
}

[dir="rtl"] .main.shifted > #nav-sidebar {
    margin-right: 0;
}

#nav-sidebar .module th {
    width: 100%;
    overflow-wrap: anywhere;
}

#nav-sidebar .module th,
#nav-sidebar .module caption {
    padding-left: 16px;
}

#nav-sidebar .module td {
    white-space: nowrap;
}

[dir="rtl"] #nav-sidebar .module th,
[dir="rtl"] #nav-sidebar .module caption {
    padding-left: 8px;
    padding-right: 16px;
}

#nav-sidebar .current-app .section:link,
#nav-sidebar .current-app .section:visited {
    color: var(--header-color);
    font-weight: bold;
}

#nav-sidebar .current-model {
    background: var(--selected-row);
}

@media (forced-colors: active) {
    #nav-sidebar .current-model {
        background-color: SelectedItem;
    }
}

.main > #nav-sidebar + .content {
    max-width: calc(100% - 23px);
}

.main.shifted > #nav-sidebar + .content {
    max-width: calc(100% - 299px);
}

@media (max-width: 767px) {
    #nav-sidebar, #toggle-nav-sidebar {
        display: none;
    }

    .main > #nav-sidebar + .content,
    .main.shifted > #nav-sidebar + .content {
        max-width: 100%;
    }
}

#nav-filter {
    width: 100%;
    box-sizing: border-box;
    padding: 2px 5px;
    margin: 5px 0;
    border: 1px solid var(--border-color);
    background-color: var(--darkened-bg);
    color: var(--body-fg);
}

#nav-filter:focus {
    border-color: var(--body-quiet-color);
}

#nav-filter.no-results {
    background: var(--message-error-bg);
}

#nav-sidebar table {
    width: 100%;
}

----- END OF FILE -----

===== staticfiles/admin/css/responsive.css =====

/* Tablets */

input[type="submit"], button {
    -webkit-appearance: none;
    appearance: none;
}

@media (max-width: 1024px) {
    /* Basic */

    html {
        -webkit-text-size-adjust: 100%;
    }

    td, th {
        padding: 10px;
        font-size: 0.875rem;
    }

    .small {
        font-size: 0.75rem;
    }

    /* Layout */

    #container {
        min-width: 0;
    }

    #content {
        padding: 15px 20px 20px;
    }

    div.breadcrumbs {
        padding: 10px 30px;
    }

    /* Header */

    #header {
        flex-direction: column;
        padding: 15px 30px;
        justify-content: flex-start;
    }

    #site-name {
        margin: 0 0 8px;
        line-height: 1.2;
    }

    #user-tools {
        margin: 0;
        font-weight: 400;
        line-height: 1.85;
        text-align: left;
    }

    #user-tools a {
        display: inline-block;
        line-height: 1.4;
    }

    /* Dashboard */

    .dashboard #content {
        width: auto;
    }

    #content-related {
        margin-right: -290px;
    }

    .colSM #content-related {
        margin-left: -290px;
    }

    .colMS {
        margin-right: 290px;
    }

    .colSM {
        margin-left: 290px;
    }

    .dashboard .module table td a {
        padding-right: 0;
    }

    td .changelink, td .addlink {
        font-size: 0.8125rem;
    }

    /* Changelist */

    #toolbar {
        border: none;
        padding: 15px;
    }

    #changelist-search > div {
        display: flex;
        flex-wrap: nowrap;
        max-width: 480px;
    }

    #changelist-search label {
        line-height: 1.375rem;
    }

    #toolbar form #searchbar {
        flex: 1 0 auto;
        width: 0;
        height: 1.375rem;
        margin: 0 10px 0 6px;
    }

    #toolbar form input[type=submit] {
        flex: 0 1 auto;
    }

    #changelist-search .quiet {
        width: 0;
        flex: 1 0 auto;
        margin: 5px 0 0 25px;
    }

    #changelist .actions {
        display: flex;
        flex-wrap: wrap;
        padding: 15px 0;
    }

    #changelist .actions label {
        display: flex;
    }

    #changelist .actions select {
        background: var(--body-bg);
    }

    #changelist .actions .button {
        min-width: 48px;
        margin: 0 10px;
    }

    #changelist .actions span.all,
    #changelist .actions span.clear,
    #changelist .actions span.question,
    #changelist .actions span.action-counter {
        font-size: 0.6875rem;
        margin: 0 10px 0 0;
    }

    #changelist-filter {
        flex-basis: 200px;
    }

    .change-list .filtered .results,
    .change-list .filtered .paginator,
    .filtered #toolbar,
    .filtered .actions,

    #changelist .paginator {
        border-top-color: var(--hairline-color); /* XXX Is this used at all? */
    }

    #changelist .results + .paginator {
        border-top: none;
    }

    /* Forms */

    label {
        font-size: 1rem;
    }

    /*
    Minifiers remove the default (text) "type" attribute from "input" HTML
    tags. Add input:not([type]) to make the CSS stylesheet work the same.
    */
    .form-row input:not([type]),
    .form-row input[type=text],
    .form-row input[type=password],
    .form-row input[type=email],
    .form-row input[type=url],
    .form-row input[type=tel],
    .form-row input[type=number],
    .form-row textarea,
    .form-row select,
    .form-row .vTextField {
        box-sizing: border-box;
        margin: 0;
        padding: 6px 8px;
        min-height: 2.25rem;
        font-size: 1rem;
    }

    .form-row select {
        height: 2.25rem;
    }

    .form-row select[multiple] {
        height: auto;
        min-height: 0;
    }

    fieldset .fieldBox + .fieldBox {
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid var(--hairline-color);
    }

    textarea {
        max-width: 100%;
        max-height: 120px;
    }

    .aligned label {
        padding-top: 6px;
    }

    .aligned .related-lookup,
    .aligned .datetimeshortcuts,
    .aligned .related-lookup + strong {
        align-self: center;
        margin-left: 15px;
    }

    form .aligned div.radiolist {
        margin-left: 2px;
    }

    .submit-row {
        padding: 8px;
    }

    .submit-row a.deletelink {
        padding: 10px 7px;
    }

    .button, input[type=submit], input[type=button], .submit-row input, a.button {
        padding: 7px;
    }

    /* Selector */

    .selector {
        display: flex;
        width: 100%;
    }

    .selector .selector-filter {
        display: flex;
        align-items: center;
    }

    .selector .selector-filter label {
        margin: 0 8px 0 0;
    }

    .selector .selector-filter input {
        width: 100%;
        min-height: 0;
        flex: 1 1;
    }

    .selector-available, .selector-chosen {
        width: auto;
        flex: 1 1;
        display: flex;
        flex-direction: column;
    }

    .selector select {
        width: 100%;
        flex: 1 0 auto;
        margin-bottom: 5px;
    }

    .selector ul.selector-chooser {
        width: 26px;
        height: 52px;
        padding: 2px 0;
        border-radius: 20px;
        transform: translateY(-10px);
    }

    .selector-add, .selector-remove {
        width: 20px;
        height: 20px;
        background-size: 20px auto;
    }

    .selector-add {
        background-position: 0 -120px;
    }

    .selector-remove {
        background-position: 0 -80px;
    }

    a.selector-chooseall, a.selector-clearall {
        align-self: center;
    }

    .stacked {
        flex-direction: column;
        max-width: 480px;
    }

    .stacked > * {
        flex: 0 1 auto;
    }

    .stacked select {
        margin-bottom: 0;
    }

    .stacked .selector-available, .stacked .selector-chosen {
        width: auto;
    }

    .stacked ul.selector-chooser {
        width: 52px;
        height: 26px;
        padding: 0 2px;
        transform: none;
    }

    .stacked .selector-chooser li {
        padding: 3px;
    }

    .stacked .selector-add, .stacked .selector-remove {
        background-size: 20px auto;
    }

    .stacked .selector-add {
        background-position: 0 -40px;
    }

    .stacked .active.selector-add {
        background-position: 0 -40px;
    }

    .active.selector-add:focus, .active.selector-add:hover {
        background-position: 0 -140px;
    }

    .stacked .active.selector-add:focus, .stacked .active.selector-add:hover {
        background-position: 0 -60px;
    }

    .stacked .selector-remove {
        background-position: 0 0;
    }

    .stacked .active.selector-remove {
        background-position: 0 0;
    }

    .active.selector-remove:focus, .active.selector-remove:hover {
        background-position: 0 -100px;
    }

    .stacked .active.selector-remove:focus, .stacked .active.selector-remove:hover {
        background-position: 0 -20px;
    }

    .help-tooltip, .selector .help-icon {
        display: none;
    }

    .datetime input {
        width: 50%;
        max-width: 120px;
    }

    .datetime span {
        font-size: 0.8125rem;
    }

    .datetime .timezonewarning {
        display: block;
        font-size: 0.6875rem;
        color: var(--body-quiet-color);
    }

    .datetimeshortcuts {
        color: var(--border-color); /* XXX Redundant, .datetime span also sets #ccc */
    }

    .form-row .datetime input.vDateField, .form-row .datetime input.vTimeField {
        width: 75%;
    }

    .inline-group {
        overflow: auto;
    }

    /* Messages */

    ul.messagelist li {
        padding-left: 55px;
        background-position: 30px 12px;
    }

    ul.messagelist li.error {
        background-position: 30px 12px;
    }

    ul.messagelist li.warning {
        background-position: 30px 14px;
    }

    /* Login */

    .login #header {
        padding: 15px 20px;
    }

    .login #site-name {
        margin: 0;
    }

    /* GIS */

    div.olMap {
        max-width: calc(100vw - 30px);
        max-height: 300px;
    }

    .olMap + .clear_features {
        display: block;
        margin-top: 10px;
    }

    /* Docs */

    .module table.xfull {
        width: 100%;
    }

    pre.literal-block {
        overflow: auto;
    }
}

/* Mobile */

@media (max-width: 767px) {
    /* Layout */

    #header, #content {
        padding: 15px;
    }

    div.breadcrumbs {
        padding: 10px 15px;
    }

    /* Dashboard */

    .colMS, .colSM {
        margin: 0;
    }

    #content-related, .colSM #content-related {
        width: 100%;
        margin: 0;
    }

    #content-related .module {
        margin-bottom: 0;
    }

    #content-related .module h2 {
        padding: 10px 15px;
        font-size: 1rem;
    }

    /* Changelist */

    #changelist {
        align-items: stretch;
        flex-direction: column;
    }

    #toolbar {
        padding: 10px;
    }

    #changelist-filter {
        margin-left: 0;
    }

    #changelist .actions label {
        flex: 1 1;
    }

    #changelist .actions select {
        flex: 1 0;
        width: 100%;
    }

    #changelist .actions span {
        flex: 1 0 100%;
    }

    #changelist-filter {
        position: static;
        width: auto;
        margin-top: 30px;
    }

    .object-tools {
        float: none;
        margin: 0 0 15px;
        padding: 0;
        overflow: hidden;
    }

    .object-tools li {
        height: auto;
        margin-left: 0;
    }

    .object-tools li + li {
        margin-left: 15px;
    }

    /* Forms */

    .form-row {
        padding: 15px 0;
    }

    .aligned .form-row,
    .aligned .form-row > div {
        max-width: 100vw;
    }

    .aligned .form-row > div {
        width: calc(100vw - 30px);
    }

    .flex-container {
        flex-flow: column;
    }

    .flex-container.checkbox-row {
        flex-flow: row;
    }

    textarea {
        max-width: none;
    }

    .vURLField {
        width: auto;
    }

    fieldset .fieldBox + .fieldBox {
        margin-top: 15px;
        padding-top: 15px;
    }

    .aligned label {
        width: 100%;
        min-width: auto;
        padding: 0 0 10px;
    }

    .aligned label:after {
        max-height: 0;
    }

    .aligned .form-row input,
    .aligned .form-row select,
    .aligned .form-row textarea {
        flex: 1 1 auto;
        max-width: 100%;
    }

    .aligned .checkbox-row input {
        flex: 0 1 auto;
        margin: 0;
    }

    .aligned .vCheckboxLabel {
        flex: 1 0;
        padding: 1px 0 0 5px;
    }

    .aligned label + p,
    .aligned label + div.help,
    .aligned label + div.readonly {
        padding: 0;
        margin-left: 0;
    }

    .aligned p.file-upload {
        font-size: 0.8125rem;
    }

    span.clearable-file-input {
        margin-left: 15px;
    }

    span.clearable-file-input label {
        font-size: 0.8125rem;
        padding-bottom: 0;
    }

    .aligned .timezonewarning {
        flex: 1 0 100%;
        margin-top: 5px;
    }

    form .aligned .form-row div.help {
        width: 100%;
        margin: 5px 0 0;
        padding: 0;
    }

    form .aligned ul,
    form .aligned ul.errorlist {
        margin-left: 0;
        padding-left: 0;
    }

    form .aligned div.radiolist {
        margin-top: 5px;
        margin-right: 15px;
        margin-bottom: -3px;
    }

    form .aligned div.radiolist:not(.inline) div + div {
        margin-top: 5px;
    }

    /* Related widget */

    .related-widget-wrapper {
        width: 100%;
        display: flex;
        align-items: flex-start;
    }

    .related-widget-wrapper .selector {
        order: 1;
    }

    .related-widget-wrapper > a {
        order: 2;
    }

    .related-widget-wrapper .radiolist ~ a {
        align-self: flex-end;
    }

    .related-widget-wrapper > select ~ a {
        align-self: center;
    }

    /* Selector */

    .selector {
        flex-direction: column;
        gap: 10px 0;
    }

    .selector-available, .selector-chosen {
        flex: 1 1 auto;
    }

    .selector select {
        max-height: 96px;
    }

    .selector ul.selector-chooser {
        display: block;
        width: 52px;
        height: 26px;
        padding: 0 2px;
        transform: none;
    }

    .selector ul.selector-chooser li {
        float: left;
    }

    .selector-remove {
        background-position: 0 0;
    }

    .active.selector-remove:focus, .active.selector-remove:hover {
        background-position: 0 -20px;
    }

    .selector-add  {
        background-position: 0 -40px;
    }

    .active.selector-add:focus, .active.selector-add:hover {
        background-position: 0 -60px;
    }

    /* Inlines */

    .inline-group[data-inline-type="stacked"] .inline-related {
        border: 1px solid var(--hairline-color);
        border-radius: 4px;
        margin-top: 15px;
        overflow: auto;
    }

    .inline-group[data-inline-type="stacked"] .inline-related > * {
        box-sizing: border-box;
    }

    .inline-group[data-inline-type="stacked"] .inline-related .module {
        padding: 0 10px;
    }

    .inline-group[data-inline-type="stacked"] .inline-related .module .form-row {
        border-top: 1px solid var(--hairline-color);
        border-bottom: none;
    }

    .inline-group[data-inline-type="stacked"] .inline-related .module .form-row:first-child {
        border-top: none;
    }

    .inline-group[data-inline-type="stacked"] .inline-related h3 {
        padding: 10px;
        border-top-width: 0;
        border-bottom-width: 2px;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
    }

    .inline-group[data-inline-type="stacked"] .inline-related h3 .inline_label {
        margin-right: auto;
    }

    .inline-group[data-inline-type="stacked"] .inline-related h3 span.delete {
        float: none;
        flex: 1 1 100%;
        margin-top: 5px;
    }

    .inline-group[data-inline-type="stacked"] .aligned .form-row > div:not([class]) {
        width: 100%;
    }

    .inline-group[data-inline-type="stacked"] .aligned label {
        width: 100%;
    }

    .inline-group[data-inline-type="stacked"] div.add-row {
        margin-top: 15px;
        border: 1px solid var(--hairline-color);
        border-radius: 4px;
    }

    .inline-group div.add-row,
    .inline-group .tabular tr.add-row td {
        padding: 0;
    }

    .inline-group div.add-row a,
    .inline-group .tabular tr.add-row td a {
        display: block;
        padding: 8px 10px 8px 26px;
        background-position: 8px 9px;
    }

    /* Submit row */

    .submit-row {
        padding: 10px;
        margin: 0 0 15px;
        flex-direction: column;
        gap: 8px;
    }

    .submit-row input, .submit-row input.default, .submit-row a {
        text-align: center;
    }

    .submit-row a.closelink {
        padding: 10px 0;
        text-align: center;
    }

    .submit-row a.deletelink {
        margin: 0;
    }

    /* Messages */

    ul.messagelist li {
        padding-left: 40px;
        background-position: 15px 12px;
    }

    ul.messagelist li.error {
        background-position: 15px 12px;
    }

    ul.messagelist li.warning {
        background-position: 15px 14px;
    }

    /* Paginator */

    .paginator .this-page, .paginator a:link, .paginator a:visited {
        padding: 4px 10px;
    }

    /* Login */

    body.login {
        padding: 0 15px;
    }

    .login #container {
        width: auto;
        max-width: 480px;
        margin: 50px auto;
    }

    .login #header,
    .login #content {
        padding: 15px;
    }

    .login #content-main {
        float: none;
    }

    .login .form-row {
        padding: 0;
    }

    .login .form-row + .form-row {
        margin-top: 15px;
    }

    .login .form-row label {
        margin: 0 0 5px;
        line-height: 1.2;
    }

    .login .submit-row {
        padding: 15px 0 0;
    }

    .login br {
        display: none;
    }

    .login .submit-row input {
        margin: 0;
        text-transform: uppercase;
    }

    .errornote {
        margin: 0 0 20px;
        padding: 8px 12px;
        font-size: 0.8125rem;
    }

    /* Calendar and clock */

    .calendarbox, .clockbox {
        position: fixed !important;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%);
        margin: 0;
        border: none;
        overflow: visible;
    }

    .calendarbox:before, .clockbox:before {
        content: '';
        position: fixed;
        top: 50%;
        left: 50%;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.75);
        transform: translate(-50%, -50%);
    }

    .calendarbox > *, .clockbox > * {
        position: relative;
        z-index: 1;
    }

    .calendarbox > div:first-child {
        z-index: 2;
    }

    .calendarbox .calendar, .clockbox h2 {
        border-radius: 4px 4px 0 0;
        overflow: hidden;
    }

    .calendarbox .calendar-cancel, .clockbox .calendar-cancel {
        border-radius: 0 0 4px 4px;
        overflow: hidden;
    }

    .calendar-shortcuts {
        padding: 10px 0;
        font-size: 0.75rem;
        line-height: 0.75rem;
    }

    .calendar-shortcuts a {
        margin: 0 4px;
    }

    .timelist a {
        background: var(--body-bg);
        padding: 4px;
    }

    .calendar-cancel {
        padding: 8px 10px;
    }

    .clockbox h2 {
        padding: 8px 15px;
    }

    .calendar caption {
        padding: 10px;
    }

    .calendarbox .calendarnav-previous, .calendarbox .calendarnav-next {
        z-index: 1;
        top: 10px;
    }

    /* History */

    table#change-history tbody th, table#change-history tbody td {
        font-size: 0.8125rem;
        word-break: break-word;
    }

    table#change-history tbody th {
        width: auto;
    }

    /* Docs */

    table.model tbody th, table.model tbody td {
        font-size: 0.8125rem;
        word-break: break-word;
    }
}

----- END OF FILE -----

===== staticfiles/admin/css/responsive_rtl.css =====

/* TABLETS */

@media (max-width: 1024px) {
    [dir="rtl"] .colMS {
        margin-right: 0;
    }

    [dir="rtl"] #user-tools {
        text-align: right;
    }

    [dir="rtl"] #changelist .actions label {
        padding-left: 10px;
        padding-right: 0;
    }

    [dir="rtl"] #changelist .actions select {
        margin-left: 0;
        margin-right: 15px;
    }

    [dir="rtl"] .change-list .filtered .results,
    [dir="rtl"] .change-list .filtered .paginator,
    [dir="rtl"] .filtered #toolbar,
    [dir="rtl"] .filtered div.xfull,
    [dir="rtl"] .filtered .actions,
    [dir="rtl"] #changelist-filter {
        margin-left: 0;
    }

    [dir="rtl"] .inline-group ul.tools a.add,
    [dir="rtl"] .inline-group div.add-row a,
    [dir="rtl"] .inline-group .tabular tr.add-row td a {
        padding: 8px 26px 8px 10px;
        background-position: calc(100% - 8px) 9px;
    }

    [dir="rtl"] .selector .selector-filter label {
        margin-right: 0;
        margin-left: 8px;
    }

    [dir="rtl"] .object-tools li {
        float: right;
    }

    [dir="rtl"] .object-tools li + li {
        margin-left: 0;
        margin-right: 15px;
    }

    [dir="rtl"] .dashboard .module table td a {
        padding-left: 0;
        padding-right: 16px;
    }

    [dir="rtl"] .selector-add {
        background-position: 0 -80px;
    }

    [dir="rtl"] .selector-remove {
        background-position: 0 -120px;
    }

    [dir="rtl"] .active.selector-add:focus, .active.selector-add:hover {
        background-position: 0 -100px;
    }

    [dir="rtl"] .active.selector-remove:focus, .active.selector-remove:hover {
        background-position: 0 -140px;
    }
}

/* MOBILE */

@media (max-width: 767px) {
    [dir="rtl"] .aligned .related-lookup,
    [dir="rtl"] .aligned .datetimeshortcuts {
        margin-left: 0;
        margin-right: 15px;
    }

    [dir="rtl"] .aligned ul,
    [dir="rtl"] form .aligned ul.errorlist {
        margin-right: 0;
    }

    [dir="rtl"] #changelist-filter {
        margin-left: 0;
        margin-right: 0;
    }
    [dir="rtl"] .aligned .vCheckboxLabel {
        padding: 1px 5px 0 0;
    }

    [dir="rtl"] .selector-remove {
        background-position: 0 0;
    }

    [dir="rtl"] .active.selector-remove:focus, .active.selector-remove:hover {
        background-position: 0 -20px;
    }

    [dir="rtl"] .selector-add  {
        background-position: 0 -40px;
    }

    [dir="rtl"] .active.selector-add:focus, .active.selector-add:hover {
        background-position: 0 -60px;
    }
}

----- END OF FILE -----

===== staticfiles/admin/css/rtl.css =====

/* GLOBAL */

th {
    text-align: right;
}

.module h2, .module caption {
    text-align: right;
}

.module ul, .module ol {
    margin-left: 0;
    margin-right: 1.5em;
}

.viewlink, .addlink, .changelink, .hidelink {
    padding-left: 0;
    padding-right: 16px;
    background-position: 100% 1px;
}

.deletelink {
    padding-left: 0;
    padding-right: 16px;
    background-position: 100% 1px;
}

.object-tools {
    float: left;
}

thead th:first-child,
tfoot td:first-child {
    border-left: none;
}

/* LAYOUT */

#user-tools {
    right: auto;
    left: 0;
    text-align: left;
}

div.breadcrumbs {
    text-align: right;
}

#content-main {
    float: right;
}

#content-related {
    float: left;
    margin-left: -300px;
    margin-right: auto;
}

.colMS {
    margin-left: 300px;
    margin-right: 0;
}

/* SORTABLE TABLES */

table thead th.sorted .sortoptions {
   float: left;
}

thead th.sorted .text {
    padding-right: 0;
    padding-left: 42px;
}

/* dashboard styles */

.dashboard .module table td a {
    padding-left: .6em;
    padding-right: 16px;
}

/* changelists styles */

.change-list .filtered table {
    border-left: none;
    border-right: 0px none;
}

#changelist-filter {
    border-left: none;
    border-right: none;
    margin-left: 0;
    margin-right: 30px;
}

#changelist-filter li.selected {
    border-left: none;
    padding-left: 10px;
    margin-left: 0;
    border-right: 5px solid var(--hairline-color);
    padding-right: 10px;
    margin-right: -15px;
}

#changelist table tbody td:first-child, #changelist table tbody th:first-child {
    border-right: none;
    border-left: none;
}

.paginator .end {
    margin-left: 6px;
    margin-right: 0;
}

.paginator input {
    margin-left: 0;
    margin-right: auto;
}

/* FORMS */

.aligned label {
    padding: 0 0 3px 1em;
}

.submit-row a.deletelink {
    margin-left: 0;
    margin-right: auto;
}

.vDateField, .vTimeField {
    margin-left: 2px;
}

.aligned .form-row input {
    margin-left: 5px;
}

form .aligned ul {
    margin-right: 163px;
    padding-right: 10px;
    margin-left: 0;
    padding-left: 0;
}

form ul.inline li {
    float: right;
    padding-right: 0;
    padding-left: 7px;
}

form .aligned p.help,
form .aligned div.help {
    margin-left: 0;
    margin-right: 160px;
    padding-right: 10px;
}

form div.help ul,
form .aligned .checkbox-row + .help,
form .aligned p.date div.help.timezonewarning,
form .aligned p.datetime div.help.timezonewarning,
form .aligned p.time div.help.timezonewarning {
    margin-right: 0;
    padding-right: 0;
}

form .wide p.help,
form .wide ul.errorlist,
form .wide div.help {
    padding-left: 0;
    padding-right: 50px;
}

.submit-row {
    text-align: right;
}

fieldset .fieldBox {
    margin-left: 20px;
    margin-right: 0;
}

.errorlist li {
    background-position: 100% 12px;
    padding: 0;
}

.errornote {
    background-position: 100% 12px;
    padding: 10px 12px;
}

/* WIDGETS */

.calendarnav-previous {
    top: 0;
    left: auto;
    right: 10px;
    background: url(../img/calendar-icons.svg) 0 -15px no-repeat;
}

.calendarnav-next {
    top: 0;
    right: auto;
    left: 10px;
    background: url(../img/calendar-icons.svg) 0 0 no-repeat;
}

.calendar caption, .calendarbox h2 {
    text-align: center;
}

.selector {
    float: right;
}

.selector .selector-filter {
    text-align: right;
}

.selector-add {
  background: url(../img/selector-icons.svg) 0 -64px no-repeat;
}

.active.selector-add:focus, .active.selector-add:hover {
  background-position: 0 -80px;
}

.selector-remove {
  background: url(../img/selector-icons.svg) 0 -96px no-repeat;
}

.active.selector-remove:focus, .active.selector-remove:hover {
  background-position: 0 -112px;
}

a.selector-chooseall {
    background: url(../img/selector-icons.svg) right -128px no-repeat;
}

a.active.selector-chooseall:focus, a.active.selector-chooseall:hover {
    background-position: 100% -144px;
}

a.selector-clearall {
    background: url(../img/selector-icons.svg) 0 -160px no-repeat;
}

a.active.selector-clearall:focus, a.active.selector-clearall:hover {
    background-position: 0 -176px;
}

.inline-deletelink {
    float: left;
}

form .form-row p.datetime {
    overflow: hidden;
}

.related-widget-wrapper {
    float: right;
}

/* MISC */

.inline-related h2, .inline-group h2 {
    text-align: right
}

.inline-related h3 span.delete {
    padding-right: 20px;
    padding-left: inherit;
    left: 10px;
    right: inherit;
    float:left;
}

.inline-related h3 span.delete label {
    margin-left: inherit;
    margin-right: 2px;
}

.inline-group .tabular td.original p {
    right: 0;
}

.selector .selector-chooser {
    margin: 0;
}

----- END OF FILE -----

===== staticfiles/admin/css/unusable_password_field.css =====

/* Hide warnings fields if usable password is selected */
form:has(#id_usable_password input[value="true"]:checked) .messagelist {
    display: none;
}

/* Hide password fields if unusable password is selected */
form:has(#id_usable_password input[value="false"]:checked) .field-password1,
form:has(#id_usable_password input[value="false"]:checked) .field-password2 {
    display: none;
}

/* Select appropriate submit button */
form:has(#id_usable_password input[value="true"]:checked) input[type="submit"].unset-password {
    display: none;
}

form:has(#id_usable_password input[value="false"]:checked) input[type="submit"].set-password {
    display: none;
}

----- END OF FILE -----

===== staticfiles/admin/css/vendor/select2/select2.css =====

.select2-container {
  box-sizing: border-box;
  display: inline-block;
  margin: 0;
  position: relative;
  vertical-align: middle; }
  .select2-container .select2-selection--single {
    box-sizing: border-box;
    cursor: pointer;
    display: block;
    height: 28px;
    user-select: none;
    -webkit-user-select: none; }
    .select2-container .select2-selection--single .select2-selection__rendered {
      display: block;
      padding-left: 8px;
      padding-right: 20px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap; }
    .select2-container .select2-selection--single .select2-selection__clear {
      position: relative; }
  .select2-container[dir="rtl"] .select2-selection--single .select2-selection__rendered {
    padding-right: 8px;
    padding-left: 20px; }
  .select2-container .select2-selection--multiple {
    box-sizing: border-box;
    cursor: pointer;
    display: block;
    min-height: 32px;
    user-select: none;
    -webkit-user-select: none; }
    .select2-container .select2-selection--multiple .select2-selection__rendered {
      display: inline-block;
      overflow: hidden;
      padding-left: 8px;
      text-overflow: ellipsis;
      white-space: nowrap; }
  .select2-container .select2-search--inline {
    float: left; }
    .select2-container .select2-search--inline .select2-search__field {
      box-sizing: border-box;
      border: none;
      font-size: 100%;
      margin-top: 5px;
      padding: 0; }
      .select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button {
        -webkit-appearance: none; }

.select2-dropdown {
  background-color: white;
  border: 1px solid #aaa;
  border-radius: 4px;
  box-sizing: border-box;
  display: block;
  position: absolute;
  left: -100000px;
  width: 100%;
  z-index: 1051; }

.select2-results {
  display: block; }

.select2-results__options {
  list-style: none;
  margin: 0;
  padding: 0; }

.select2-results__option {
  padding: 6px;
  user-select: none;
  -webkit-user-select: none; }
  .select2-results__option[aria-selected] {
    cursor: pointer; }

.select2-container--open .select2-dropdown {
  left: 0; }

.select2-container--open .select2-dropdown--above {
  border-bottom: none;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0; }

.select2-container--open .select2-dropdown--below {
  border-top: none;
  border-top-left-radius: 0;
  border-top-right-radius: 0; }

.select2-search--dropdown {
  display: block;
  padding: 4px; }
  .select2-search--dropdown .select2-search__field {
    padding: 4px;
    width: 100%;
    box-sizing: border-box; }
    .select2-search--dropdown .select2-search__field::-webkit-search-cancel-button {
      -webkit-appearance: none; }
  .select2-search--dropdown.select2-search--hide {
    display: none; }

.select2-close-mask {
  border: 0;
  margin: 0;
  padding: 0;
  display: block;
  position: fixed;
  left: 0;
  top: 0;
  min-height: 100%;
  min-width: 100%;
  height: auto;
  width: auto;
  opacity: 0;
  z-index: 99;
  background-color: #fff;
  filter: alpha(opacity=0); }

.select2-hidden-accessible {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
  white-space: nowrap !important; }

.select2-container--default .select2-selection--single {
  background-color: #fff;
  border: 1px solid #aaa;
  border-radius: 4px; }
  .select2-container--default .select2-selection--single .select2-selection__rendered {
    color: #444;
    line-height: 28px; }
  .select2-container--default .select2-selection--single .select2-selection__clear {
    cursor: pointer;
    float: right;
    font-weight: bold; }
  .select2-container--default .select2-selection--single .select2-selection__placeholder {
    color: #999; }
  .select2-container--default .select2-selection--single .select2-selection__arrow {
    height: 26px;
    position: absolute;
    top: 1px;
    right: 1px;
    width: 20px; }
    .select2-container--default .select2-selection--single .select2-selection__arrow b {
      border-color: #888 transparent transparent transparent;
      border-style: solid;
      border-width: 5px 4px 0 4px;
      height: 0;
      left: 50%;
      margin-left: -4px;
      margin-top: -2px;
      position: absolute;
      top: 50%;
      width: 0; }

.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__clear {
  float: left; }

.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__arrow {
  left: 1px;
  right: auto; }

.select2-container--default.select2-container--disabled .select2-selection--single {
  background-color: #eee;
  cursor: default; }
  .select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear {
    display: none; }

.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow b {
  border-color: transparent transparent #888 transparent;
  border-width: 0 4px 5px 4px; }

.select2-container--default .select2-selection--multiple {
  background-color: white;
  border: 1px solid #aaa;
  border-radius: 4px;
  cursor: text; }
  .select2-container--default .select2-selection--multiple .select2-selection__rendered {
    box-sizing: border-box;
    list-style: none;
    margin: 0;
    padding: 0 5px;
    width: 100%; }
    .select2-container--default .select2-selection--multiple .select2-selection__rendered li {
      list-style: none; }
  .select2-container--default .select2-selection--multiple .select2-selection__clear {
    cursor: pointer;
    float: right;
    font-weight: bold;
    margin-top: 5px;
    margin-right: 10px;
    padding: 1px; }
  .select2-container--default .select2-selection--multiple .select2-selection__choice {
    background-color: #e4e4e4;
    border: 1px solid #aaa;
    border-radius: 4px;
    cursor: default;
    float: left;
    margin-right: 5px;
    margin-top: 5px;
    padding: 0 5px; }
  .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
    color: #999;
    cursor: pointer;
    display: inline-block;
    font-weight: bold;
    margin-right: 2px; }
    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {
      color: #333; }

.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice, .select2-container--default[dir="rtl"] .select2-selection--multiple .select2-search--inline {
  float: right; }

.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice {
  margin-left: 5px;
  margin-right: auto; }

.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove {
  margin-left: 2px;
  margin-right: auto; }

.select2-container--default.select2-container--focus .select2-selection--multiple {
  border: solid black 1px;
  outline: 0; }

.select2-container--default.select2-container--disabled .select2-selection--multiple {
  background-color: #eee;
  cursor: default; }

.select2-container--default.select2-container--disabled .select2-selection__choice__remove {
  display: none; }

.select2-container--default.select2-container--open.select2-container--above .select2-selection--single, .select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple {
  border-top-left-radius: 0;
  border-top-right-radius: 0; }

.select2-container--default.select2-container--open.select2-container--below .select2-selection--single, .select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple {
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0; }

.select2-container--default .select2-search--dropdown .select2-search__field {
  border: 1px solid #aaa; }

.select2-container--default .select2-search--inline .select2-search__field {
  background: transparent;
  border: none;
  outline: 0;
  box-shadow: none;
  -webkit-appearance: textfield; }

.select2-container--default .select2-results > .select2-results__options {
  max-height: 200px;
  overflow-y: auto; }

.select2-container--default .select2-results__option[role=group] {
  padding: 0; }

.select2-container--default .select2-results__option[aria-disabled=true] {
  color: #999; }

.select2-container--default .select2-results__option[aria-selected=true] {
  background-color: #ddd; }

.select2-container--default .select2-results__option .select2-results__option {
  padding-left: 1em; }
  .select2-container--default .select2-results__option .select2-results__option .select2-results__group {
    padding-left: 0; }
  .select2-container--default .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -1em;
    padding-left: 2em; }
    .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
      margin-left: -2em;
      padding-left: 3em; }
      .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
        margin-left: -3em;
        padding-left: 4em; }
        .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
          margin-left: -4em;
          padding-left: 5em; }
          .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
            margin-left: -5em;
            padding-left: 6em; }

.select2-container--default .select2-results__option--highlighted[aria-selected] {
  background-color: #5897fb;
  color: white; }

.select2-container--default .select2-results__group {
  cursor: default;
  display: block;
  padding: 6px; }

.select2-container--classic .select2-selection--single {
  background-color: #f7f7f7;
  border: 1px solid #aaa;
  border-radius: 4px;
  outline: 0;
  background-image: -webkit-linear-gradient(top, white 50%, #eeeeee 100%);
  background-image: -o-linear-gradient(top, white 50%, #eeeeee 100%);
  background-image: linear-gradient(to bottom, white 50%, #eeeeee 100%);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFFFF', endColorstr='#FFEEEEEE', GradientType=0); }
  .select2-container--classic .select2-selection--single:focus {
    border: 1px solid #5897fb; }
  .select2-container--classic .select2-selection--single .select2-selection__rendered {
    color: #444;
    line-height: 28px; }
  .select2-container--classic .select2-selection--single .select2-selection__clear {
    cursor: pointer;
    float: right;
    font-weight: bold;
    margin-right: 10px; }
  .select2-container--classic .select2-selection--single .select2-selection__placeholder {
    color: #999; }
  .select2-container--classic .select2-selection--single .select2-selection__arrow {
    background-color: #ddd;
    border: none;
    border-left: 1px solid #aaa;
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
    height: 26px;
    position: absolute;
    top: 1px;
    right: 1px;
    width: 20px;
    background-image: -webkit-linear-gradient(top, #eeeeee 50%, #cccccc 100%);
    background-image: -o-linear-gradient(top, #eeeeee 50%, #cccccc 100%);
    background-image: linear-gradient(to bottom, #eeeeee 50%, #cccccc 100%);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFEEEEEE', endColorstr='#FFCCCCCC', GradientType=0); }
    .select2-container--classic .select2-selection--single .select2-selection__arrow b {
      border-color: #888 transparent transparent transparent;
      border-style: solid;
      border-width: 5px 4px 0 4px;
      height: 0;
      left: 50%;
      margin-left: -4px;
      margin-top: -2px;
      position: absolute;
      top: 50%;
      width: 0; }

.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__clear {
  float: left; }

.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__arrow {
  border: none;
  border-right: 1px solid #aaa;
  border-radius: 0;
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
  left: 1px;
  right: auto; }

.select2-container--classic.select2-container--open .select2-selection--single {
  border: 1px solid #5897fb; }
  .select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow {
    background: transparent;
    border: none; }
    .select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow b {
      border-color: transparent transparent #888 transparent;
      border-width: 0 4px 5px 4px; }

.select2-container--classic.select2-container--open.select2-container--above .select2-selection--single {
  border-top: none;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  background-image: -webkit-linear-gradient(top, white 0%, #eeeeee 50%);
  background-image: -o-linear-gradient(top, white 0%, #eeeeee 50%);
  background-image: linear-gradient(to bottom, white 0%, #eeeeee 50%);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFFFF', endColorstr='#FFEEEEEE', GradientType=0); }

.select2-container--classic.select2-container--open.select2-container--below .select2-selection--single {
  border-bottom: none;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  background-image: -webkit-linear-gradient(top, #eeeeee 50%, white 100%);
  background-image: -o-linear-gradient(top, #eeeeee 50%, white 100%);
  background-image: linear-gradient(to bottom, #eeeeee 50%, white 100%);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFEEEEEE', endColorstr='#FFFFFFFF', GradientType=0); }

.select2-container--classic .select2-selection--multiple {
  background-color: white;
  border: 1px solid #aaa;
  border-radius: 4px;
  cursor: text;
  outline: 0; }
  .select2-container--classic .select2-selection--multiple:focus {
    border: 1px solid #5897fb; }
  .select2-container--classic .select2-selection--multiple .select2-selection__rendered {
    list-style: none;
    margin: 0;
    padding: 0 5px; }
  .select2-container--classic .select2-selection--multiple .select2-selection__clear {
    display: none; }
  .select2-container--classic .select2-selection--multiple .select2-selection__choice {
    background-color: #e4e4e4;
    border: 1px solid #aaa;
    border-radius: 4px;
    cursor: default;
    float: left;
    margin-right: 5px;
    margin-top: 5px;
    padding: 0 5px; }
  .select2-container--classic .select2-selection--multiple .select2-selection__choice__remove {
    color: #888;
    cursor: pointer;
    display: inline-block;
    font-weight: bold;
    margin-right: 2px; }
    .select2-container--classic .select2-selection--multiple .select2-selection__choice__remove:hover {
      color: #555; }

.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice {
  float: right;
  margin-left: 5px;
  margin-right: auto; }

.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove {
  margin-left: 2px;
  margin-right: auto; }

.select2-container--classic.select2-container--open .select2-selection--multiple {
  border: 1px solid #5897fb; }

.select2-container--classic.select2-container--open.select2-container--above .select2-selection--multiple {
  border-top: none;
  border-top-left-radius: 0;
  border-top-right-radius: 0; }

.select2-container--classic.select2-container--open.select2-container--below .select2-selection--multiple {
  border-bottom: none;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0; }

.select2-container--classic .select2-search--dropdown .select2-search__field {
  border: 1px solid #aaa;
  outline: 0; }

.select2-container--classic .select2-search--inline .select2-search__field {
  outline: 0;
  box-shadow: none; }

.select2-container--classic .select2-dropdown {
  background-color: white;
  border: 1px solid transparent; }

.select2-container--classic .select2-dropdown--above {
  border-bottom: none; }

.select2-container--classic .select2-dropdown--below {
  border-top: none; }

.select2-container--classic .select2-results > .select2-results__options {
  max-height: 200px;
  overflow-y: auto; }

.select2-container--classic .select2-results__option[role=group] {
  padding: 0; }

.select2-container--classic .select2-results__option[aria-disabled=true] {
  color: grey; }

.select2-container--classic .select2-results__option--highlighted[aria-selected] {
  background-color: #3875d7;
  color: white; }

.select2-container--classic .select2-results__group {
  cursor: default;
  display: block;
  padding: 6px; }

.select2-container--classic.select2-container--open .select2-dropdown {
  border-color: #5897fb; }

----- END OF FILE -----

===== staticfiles/admin/css/vendor/select2/select2.min.css =====

.select2-container{box-sizing:border-box;display:inline-block;margin:0;position:relative;vertical-align:middle}.select2-container .select2-selection--single{box-sizing:border-box;cursor:pointer;display:block;height:28px;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;padding-left:8px;padding-right:20px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--single .select2-selection__clear{position:relative}.select2-container[dir="rtl"] .select2-selection--single .select2-selection__rendered{padding-right:8px;padding-left:20px}.select2-container .select2-selection--multiple{box-sizing:border-box;cursor:pointer;display:block;min-height:32px;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline-block;overflow:hidden;padding-left:8px;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-search--inline{float:left}.select2-container .select2-search--inline .select2-search__field{box-sizing:border-box;border:none;font-size:100%;margin-top:5px;padding:0}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{background-color:white;border:1px solid #aaa;border-radius:4px;box-sizing:border-box;display:block;position:absolute;left:-100000px;width:100%;z-index:1051}.select2-results{display:block}.select2-results__options{list-style:none;margin:0;padding:0}.select2-results__option{padding:6px;user-select:none;-webkit-user-select:none}.select2-results__option[aria-selected]{cursor:pointer}.select2-container--open .select2-dropdown{left:0}.select2-container--open .select2-dropdown--above{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--open .select2-dropdown--below{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{padding:4px;width:100%;box-sizing:border-box}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{border:0;margin:0;padding:0;display:block;position:fixed;left:0;top:0;min-height:100%;min-width:100%;height:auto;width:auto;opacity:0;z-index:99;background-color:#fff;filter:alpha(opacity=0)}.select2-hidden-accessible{border:0 !important;clip:rect(0 0 0 0) !important;-webkit-clip-path:inset(50%) !important;clip-path:inset(50%) !important;height:1px !important;overflow:hidden !important;padding:0 !important;position:absolute !important;width:1px !important;white-space:nowrap !important}.select2-container--default .select2-selection--single{background-color:#fff;border:1px solid #aaa;border-radius:4px}.select2-container--default .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--default .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:bold}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--default .select2-selection--single .select2-selection__arrow{height:26px;position:absolute;top:1px;right:1px;width:20px}.select2-container--default .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent transparent;border-style:solid;border-width:5px 4px 0 4px;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__clear{float:left}.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__arrow{left:1px;right:auto}.select2-container--default.select2-container--disabled .select2-selection--single{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear{display:none}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888 transparent;border-width:0 4px 5px 4px}.select2-container--default .select2-selection--multiple{background-color:white;border:1px solid #aaa;border-radius:4px;cursor:text}.select2-container--default .select2-selection--multiple .select2-selection__rendered{box-sizing:border-box;list-style:none;margin:0;padding:0 5px;width:100%}.select2-container--default .select2-selection--multiple .select2-selection__rendered li{list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__clear{cursor:pointer;float:right;font-weight:bold;margin-top:5px;margin-right:10px;padding:1px}.select2-container--default .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;cursor:default;float:left;margin-right:5px;margin-top:5px;padding:0 5px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{color:#999;cursor:pointer;display:inline-block;font-weight:bold;margin-right:2px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover{color:#333}.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice,.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-search--inline{float:right}.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice{margin-left:5px;margin-right:auto}.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove{margin-left:2px;margin-right:auto}.select2-container--default.select2-container--focus .select2-selection--multiple{border:solid black 1px;outline:0}.select2-container--default.select2-container--disabled .select2-selection--multiple{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--open.select2-container--above .select2-selection--single,.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple{border-top-left-radius:0;border-top-right-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--single,.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid #aaa}.select2-container--default .select2-search--inline .select2-search__field{background:transparent;border:none;outline:0;box-shadow:none;-webkit-appearance:textfield}.select2-container--default .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--default .select2-results__option[role=group]{padding:0}.select2-container--default .select2-results__option[aria-disabled=true]{color:#999}.select2-container--default .select2-results__option[aria-selected=true]{background-color:#ddd}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--highlighted[aria-selected]{background-color:#5897fb;color:white}.select2-container--default .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic .select2-selection--single{background-color:#f7f7f7;border:1px solid #aaa;border-radius:4px;outline:0;background-image:-webkit-linear-gradient(top, #fff 50%, #eee 100%);background-image:-o-linear-gradient(top, #fff 50%, #eee 100%);background-image:linear-gradient(to bottom, #fff 50%, #eee 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFFFF', endColorstr='#FFEEEEEE', GradientType=0)}.select2-container--classic .select2-selection--single:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--classic .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:bold;margin-right:10px}.select2-container--classic .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--classic .select2-selection--single .select2-selection__arrow{background-color:#ddd;border:none;border-left:1px solid #aaa;border-top-right-radius:4px;border-bottom-right-radius:4px;height:26px;position:absolute;top:1px;right:1px;width:20px;background-image:-webkit-linear-gradient(top, #eee 50%, #ccc 100%);background-image:-o-linear-gradient(top, #eee 50%, #ccc 100%);background-image:linear-gradient(to bottom, #eee 50%, #ccc 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFEEEEEE', endColorstr='#FFCCCCCC', GradientType=0)}.select2-container--classic .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent transparent;border-style:solid;border-width:5px 4px 0 4px;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__clear{float:left}.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__arrow{border:none;border-right:1px solid #aaa;border-radius:0;border-top-left-radius:4px;border-bottom-left-radius:4px;left:1px;right:auto}.select2-container--classic.select2-container--open .select2-selection--single{border:1px solid #5897fb}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow{background:transparent;border:none}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888 transparent;border-width:0 4px 5px 4px}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--single{border-top:none;border-top-left-radius:0;border-top-right-radius:0;background-image:-webkit-linear-gradient(top, #fff 0%, #eee 50%);background-image:-o-linear-gradient(top, #fff 0%, #eee 50%);background-image:linear-gradient(to bottom, #fff 0%, #eee 50%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFFFF', endColorstr='#FFEEEEEE', GradientType=0)}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--single{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0;background-image:-webkit-linear-gradient(top, #eee 50%, #fff 100%);background-image:-o-linear-gradient(top, #eee 50%, #fff 100%);background-image:linear-gradient(to bottom, #eee 50%, #fff 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFEEEEEE', endColorstr='#FFFFFFFF', GradientType=0)}.select2-container--classic .select2-selection--multiple{background-color:white;border:1px solid #aaa;border-radius:4px;cursor:text;outline:0}.select2-container--classic .select2-selection--multiple:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--multiple .select2-selection__rendered{list-style:none;margin:0;padding:0 5px}.select2-container--classic .select2-selection--multiple .select2-selection__clear{display:none}.select2-container--classic .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;cursor:default;float:left;margin-right:5px;margin-top:5px;padding:0 5px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove{color:#888;cursor:pointer;display:inline-block;font-weight:bold;margin-right:2px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove:hover{color:#555}.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice{float:right;margin-left:5px;margin-right:auto}.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove{margin-left:2px;margin-right:auto}.select2-container--classic.select2-container--open .select2-selection--multiple{border:1px solid #5897fb}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--multiple{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--classic .select2-search--dropdown .select2-search__field{border:1px solid #aaa;outline:0}.select2-container--classic .select2-search--inline .select2-search__field{outline:0;box-shadow:none}.select2-container--classic .select2-dropdown{background-color:#fff;border:1px solid transparent}.select2-container--classic .select2-dropdown--above{border-bottom:none}.select2-container--classic .select2-dropdown--below{border-top:none}.select2-container--classic .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--classic .select2-results__option[role=group]{padding:0}.select2-container--classic .select2-results__option[aria-disabled=true]{color:grey}.select2-container--classic .select2-results__option--highlighted[aria-selected]{background-color:#3875d7;color:#fff}.select2-container--classic .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic.select2-container--open .select2-dropdown{border-color:#5897fb}

----- END OF FILE -----

===== staticfiles/admin/css/widgets.css =====

/* SELECTOR (FILTER INTERFACE) */

.selector {
    display: flex;
    flex-grow: 1;
    gap: 0 10px;
}

.selector select {
    height: 17.2em;
    flex: 1 0 auto;
    overflow: scroll;
    width: 100%;
}

.selector-available, .selector-chosen {
    text-align: center;
    display: flex;
    flex-direction: column;
    flex: 1 1;
}

.selector-available h2, .selector-chosen h2 {
    border: 1px solid var(--border-color);
    border-radius: 4px 4px 0 0;
}

.selector-chosen .list-footer-display {
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 4px 4px;
    margin: 0 0 10px;
    padding: 8px;
    text-align: center;
    background: var(--primary);
    color: var(--header-link-color);
    cursor: pointer;
}
.selector-chosen .list-footer-display__clear {
    color: var(--breadcrumbs-fg);
}

.selector-chosen h2 {
    background: var(--secondary);
    color: var(--header-link-color);
}

.selector .selector-available h2 {
    background: var(--darkened-bg);
    color: var(--body-quiet-color);
}

.selector .selector-filter {
    border: 1px solid var(--border-color);
    border-width: 0 1px;
    padding: 8px;
    color: var(--body-quiet-color);
    font-size: 0.625rem;
    margin: 0;
    text-align: left;
    display: flex;
}

.selector .selector-filter label,
.inline-group .aligned .selector .selector-filter label {
    float: left;
    margin: 7px 0 0;
    width: 18px;
    height: 18px;
    padding: 0;
    overflow: hidden;
    line-height: 1;
    min-width: auto;
}

.selector-filter input {
    flex-grow: 1;
}

.selector .selector-available input,
.selector .selector-chosen input {
    margin-left: 8px;
}

.selector ul.selector-chooser {
    align-self: center;
    width: 22px;
    background-color: var(--selected-bg);
    border-radius: 10px;
    margin: 0;
    padding: 0;
    transform: translateY(-17px);
}

.selector-chooser li {
    margin: 0;
    padding: 3px;
    list-style-type: none;
}

.selector select {
    padding: 0 10px;
    margin: 0 0 10px;
    border-radius: 0 0 4px 4px;
}
.selector .selector-chosen--with-filtered select {
    margin: 0;
    border-radius: 0;
    height: 14em;
}

.selector .selector-chosen:not(.selector-chosen--with-filtered) .list-footer-display {
    display: none;
}

.selector-add, .selector-remove {
    width: 16px;
    height: 16px;
    display: block;
    text-indent: -3000px;
    overflow: hidden;
    cursor: default;
    opacity: 0.55;
}

.active.selector-add, .active.selector-remove {
    opacity: 1;
}

.active.selector-add:hover, .active.selector-remove:hover {
    cursor: pointer;
}

.selector-add {
    background: url(../img/selector-icons.svg) 0 -96px no-repeat;
}

.active.selector-add:focus, .active.selector-add:hover {
    background-position: 0 -112px;
}

.selector-remove {
    background: url(../img/selector-icons.svg) 0 -64px no-repeat;
}

.active.selector-remove:focus, .active.selector-remove:hover {
    background-position: 0 -80px;
}

a.selector-chooseall, a.selector-clearall {
    display: inline-block;
    height: 16px;
    text-align: left;
    margin: 0 auto;
    overflow: hidden;
    font-weight: bold;
    line-height: 16px;
    color: var(--body-quiet-color);
    text-decoration: none;
    opacity: 0.55;
}

a.active.selector-chooseall:focus, a.active.selector-clearall:focus,
a.active.selector-chooseall:hover, a.active.selector-clearall:hover {
    color: var(--link-fg);
}

a.active.selector-chooseall, a.active.selector-clearall {
    opacity: 1;
}

a.active.selector-chooseall:hover, a.active.selector-clearall:hover {
    cursor: pointer;
}

a.selector-chooseall {
    padding: 0 18px 0 0;
    background: url(../img/selector-icons.svg) right -160px no-repeat;
    cursor: default;
}

a.active.selector-chooseall:focus, a.active.selector-chooseall:hover {
    background-position: 100% -176px;
}

a.selector-clearall {
    padding: 0 0 0 18px;
    background: url(../img/selector-icons.svg) 0 -128px no-repeat;
    cursor: default;
}

a.active.selector-clearall:focus, a.active.selector-clearall:hover {
    background-position: 0 -144px;
}

/* STACKED SELECTORS */

.stacked {
    float: left;
    width: 490px;
    display: block;
}

.stacked select {
    width: 480px;
    height: 10.1em;
}

.stacked .selector-available, .stacked .selector-chosen {
    width: 480px;
}

.stacked .selector-available {
    margin-bottom: 0;
}

.stacked .selector-available input {
    width: 422px;
}

.stacked ul.selector-chooser {
    height: 22px;
    width: 50px;
    margin: 0 0 10px 40%;
    background-color: #eee;
    border-radius: 10px;
    transform: none;
}

.stacked .selector-chooser li {
    float: left;
    padding: 3px 3px 3px 5px;
}

.stacked .selector-chooseall, .stacked .selector-clearall {
    display: none;
}

.stacked .selector-add {
    background: url(../img/selector-icons.svg) 0 -32px no-repeat;
    cursor: default;
}

.stacked .active.selector-add {
    background-position: 0 -32px;
    cursor: pointer;
}

.stacked .active.selector-add:focus, .stacked .active.selector-add:hover {
    background-position: 0 -48px;
    cursor: pointer;
}

.stacked .selector-remove {
    background: url(../img/selector-icons.svg) 0 0 no-repeat;
    cursor: default;
}

.stacked .active.selector-remove {
    background-position: 0 0px;
    cursor: pointer;
}

.stacked .active.selector-remove:focus, .stacked .active.selector-remove:hover {
    background-position: 0 -16px;
    cursor: pointer;
}

.selector .help-icon {
    background: url(../img/icon-unknown.svg) 0 0 no-repeat;
    display: inline-block;
    vertical-align: middle;
    margin: -2px 0 0 2px;
    width: 13px;
    height: 13px;
}

.selector .selector-chosen .help-icon {
    background: url(../img/icon-unknown-alt.svg) 0 0 no-repeat;
}

.selector .search-label-icon {
    background: url(../img/search.svg) 0 0 no-repeat;
    display: inline-block;
    height: 1.125rem;
    width: 1.125rem;
}

/* DATE AND TIME */

p.datetime {
    line-height: 20px;
    margin: 0;
    padding: 0;
    color: var(--body-quiet-color);
    font-weight: bold;
}

.datetime span {
    white-space: nowrap;
    font-weight: normal;
    font-size: 0.6875rem;
    color: var(--body-quiet-color);
}

.datetime input, .form-row .datetime input.vDateField, .form-row .datetime input.vTimeField {
    margin-left: 5px;
    margin-bottom: 4px;
}

table p.datetime {
    font-size: 0.6875rem;
    margin-left: 0;
    padding-left: 0;
}

.datetimeshortcuts .clock-icon, .datetimeshortcuts .date-icon {
    position: relative;
    display: inline-block;
    vertical-align: middle;
    height: 16px;
    width: 16px;
    overflow: hidden;
}

.datetimeshortcuts .clock-icon {
    background: url(../img/icon-clock.svg) 0 0 no-repeat;
}

.datetimeshortcuts a:focus .clock-icon,
.datetimeshortcuts a:hover .clock-icon {
    background-position: 0 -16px;
}

.datetimeshortcuts .date-icon {
    background: url(../img/icon-calendar.svg) 0 0 no-repeat;
    top: -1px;
}

.datetimeshortcuts a:focus .date-icon,
.datetimeshortcuts a:hover .date-icon {
    background-position: 0 -16px;
}

.timezonewarning {
    font-size: 0.6875rem;
    color: var(--body-quiet-color);
}

/* URL */

p.url {
    line-height: 20px;
    margin: 0;
    padding: 0;
    color: var(--body-quiet-color);
    font-size: 0.6875rem;
    font-weight: bold;
}

.url a {
    font-weight: normal;
}

/* FILE UPLOADS */

p.file-upload {
    line-height: 20px;
    margin: 0;
    padding: 0;
    color: var(--body-quiet-color);
    font-size: 0.6875rem;
    font-weight: bold;
}

.file-upload a {
    font-weight: normal;
}

.file-upload .deletelink {
    margin-left: 5px;
}

span.clearable-file-input label {
    color: var(--body-fg);
    font-size: 0.6875rem;
    display: inline;
    float: none;
}

/* CALENDARS & CLOCKS */

.calendarbox, .clockbox {
    margin: 5px auto;
    font-size: 0.75rem;
    width: 19em;
    text-align: center;
    background: var(--body-bg);
    color: var(--body-fg);
    border: 1px solid var(--hairline-color);
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    position: relative;
}

.clockbox {
    width: auto;
}

.calendar {
    margin: 0;
    padding: 0;
}

.calendar table {
    margin: 0;
    padding: 0;
    border-collapse: collapse;
    background: white;
    width: 100%;
}

.calendar caption, .calendarbox h2 {
    margin: 0;
    text-align: center;
    border-top: none;
    font-weight: 700;
    font-size: 0.75rem;
    color: #333;
    background: var(--accent);
}

.calendar th {
    padding: 8px 5px;
    background: var(--darkened-bg);
    border-bottom: 1px solid var(--border-color);
    font-weight: 400;
    font-size: 0.75rem;
    text-align: center;
    color: var(--body-quiet-color);
}

.calendar td {
    font-weight: 400;
    font-size: 0.75rem;
    text-align: center;
    padding: 0;
    border-top: 1px solid var(--hairline-color);
    border-bottom: none;
}

.calendar td.selected a {
    background: var(--secondary);
    color: var(--button-fg);
}

.calendar td.nonday {
    background: var(--darkened-bg);
}

.calendar td.today a {
    font-weight: 700;
}

.calendar td a, .timelist a {
    display: block;
    font-weight: 400;
    padding: 6px;
    text-decoration: none;
    color: var(--body-quiet-color);
}

.calendar td a:focus, .timelist a:focus,
.calendar td a:hover, .timelist a:hover {
    background: var(--primary);
    color: white;
}

.calendar td a:active, .timelist a:active {
    background: var(--header-bg);
    color: white;
}

.calendarnav {
    font-size: 0.625rem;
    text-align: center;
    color: #ccc;
    margin: 0;
    padding: 1px 3px;
}

.calendarnav a:link, #calendarnav a:visited,
#calendarnav a:focus, #calendarnav a:hover {
    color: var(--body-quiet-color);
}

.calendar-shortcuts {
    background: var(--body-bg);
    color: var(--body-quiet-color);
    font-size: 0.6875rem;
    line-height: 0.6875rem;
    border-top: 1px solid var(--hairline-color);
    padding: 8px 0;
}

.calendarbox .calendarnav-previous, .calendarbox .calendarnav-next {
    display: block;
    position: absolute;
    top: 8px;
    width: 15px;
    height: 15px;
    text-indent: -9999px;
    padding: 0;
}

.calendarnav-previous {
    left: 10px;
    background: url(../img/calendar-icons.svg) 0 0 no-repeat;
}

.calendarnav-next {
    right: 10px;
    background: url(../img/calendar-icons.svg) 0 -15px no-repeat;
}

.calendar-cancel {
    margin: 0;
    padding: 4px 0;
    font-size: 0.75rem;
    background: var(--close-button-bg);
    border-top: 1px solid var(--border-color);
    color: var(--button-fg);
}

.calendar-cancel:focus, .calendar-cancel:hover {
    background: var(--close-button-hover-bg);
}

.calendar-cancel a {
    color: var(--button-fg);
    display: block;
}

ul.timelist, .timelist li {
    list-style-type: none;
    margin: 0;
    padding: 0;
}

.timelist a {
    padding: 2px;
}

/* EDIT INLINE */

.inline-deletelink {
    float: right;
    text-indent: -9999px;
    background: url(../img/inline-delete.svg) 0 0 no-repeat;
    width: 16px;
    height: 16px;
    border: 0px none;
}

.inline-deletelink:focus, .inline-deletelink:hover {
    cursor: pointer;
}

/* RELATED WIDGET WRAPPER */
.related-widget-wrapper {
    display: flex;
    gap: 0 10px;
    flex-grow: 1;
    flex-wrap: wrap;
    margin-bottom: 5px;
}

.related-widget-wrapper-link {
    opacity: .6;
    filter: grayscale(1);
}

.related-widget-wrapper-link:link {
    opacity: 1;
    filter: grayscale(0);
}

/* GIS MAPS */
.dj_map {
    width: 600px;
    height: 400px;
}

----- END OF FILE -----

===== staticfiles/css/game.css =====

/* Alice is Missing - Main Style Sheet */

/* ===== VARIABLES ===== */
:root {
    --blue: #0d6efd;
    --green: #198754;
    --yellow: #ffc107;
    --purple: #6f42c1;
    --pink: #d63384;
    --red: #dc3545;
    --timer-color: var(--red);
    --system-message-bg: #FFD700;
    --sent-message-bg: #dcf8c6;
    --received-message-bg: #f1f0f0;
    --card-flip-time: 0.6s;
}

/* ===== BASIC STYLES ===== */
body {
    background-color: #f8f9fa;
    font-family: 'Helvetica Neue', sans-serif;
    max-width: 100%;
    overflow-x: hidden;
}

/* ===== PHONE CONTAINER ===== */
.phone-container {
    max-width: 450px;
    margin: 20px auto;
    border: 12px solid #000;
    border-radius: 36px;
    background-color: white;
    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    height: calc(100vh - 40px);
    position: relative;
    overflow: hidden;
}

.phone-header {
    height: 60px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 15px;
}

.phone-content {
    height: calc(100% - 120px);
    overflow-y: auto;
    padding: 15px;
}

.phone-footer {
    height: 60px;
    background-color: #f8f9fa;
    border-top: 1px solid #dee2e6;
    display: flex;
    align-items: center;
    justify-content: space-around;
    position: absolute;
    bottom: 0;
    width: 100%;
}

/* ===== MESSAGE STYLING ===== */
.message-bubble {
    border-radius: 20px;
    padding: 10px 15px;
    margin-bottom: 10px;
    max-width: 80%;
    position: relative;
}

.message-sent {
    background-color: var(--sent-message-bg);
    margin-left: auto;
    border-bottom-right-radius: 5px;
}

.message-received {
    background-color: var(--received-message-bg);
    margin-right: auto;
    border-bottom-left-radius: 5px;
}

.message-system {
    background-color: var(--system-message-bg);
    margin: 10px auto;
    text-align: center;
    font-weight: bold;
}

.message-time {
    font-size: 0.7em;
    color: #999;
    text-align: right;
    margin-top: 5px;
}

.message-sender {
    font-size: 0.8em;
    font-weight: bold;
    display: block;
    margin-bottom: 5px;
}

/* ===== CARD STYLING ===== */
.card-container {
    perspective: 1000px;
    width: 100%;
    height: 300px;
    margin-bottom: 20px;
}

.card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform var(--card-flip-time);
    transform-style: preserve-3d;
}

.card-container.flipped .card-inner {
    transform: rotateY(180deg);
}

.card-front, .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-front {
    background-color: #f1f0f0;
    color: black;
    display: flex;
    align-items: center;
    justify-content: center;
}

.card-back {
    background-color: #f8f9fa;
    color: black;
    transform: rotateY(180deg);
    display: flex;
    align-items: center;
    justify-content: center;
}

/* ===== TIMER STYLING ===== */
.timer {
    font-size: 24px;
    font-weight: bold;
    text-align: center;
    margin: 10px 0;
    color: var(--timer-color);
}

/* ===== CHARACTER COLORS ===== */
.blue { color: var(--blue); }
.green { color: var(--green); }
.yellow { color: var(--yellow); }
.purple { color: var(--purple); }
.pink { color: var(--pink); }

/* ===== ANIMATIONS ===== */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

.pulse {
    animation: pulse 2s infinite;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.fade-in {
    animation: fadeIn 0.5s ease-in;
}

/* ===== RESPONSIVE ADJUSTMENTS ===== */
@media (max-width: 576px) {
    .phone-container {
        margin: 0;
        height: 100vh;
        border-radius: 0;
        border: none;
    }
}


----- END OF FILE -----

===== templates/game/base.html =====

<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Alice is Missing{% endblock %}</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <!-- Mithril JS -->
    <script src="https://unpkg.com/mithril@2.2.2/mithril.js"></script>
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/game.css' %}">
    <link rel="stylesheet" href="{% static 'css/cards.css' %}">
    {% block head_extra %}{% endblock %}
</head>
<body>
    {% block phone_container_wrapper %}
    <div class="phone-container">
        <div class="phone-header">
            <div class="phone-time">
                {% now "H:i" %}
            </div>
            <div class="phone-title">
                {% block header_title %}Alice is Missing{% endblock %}
            </div>
            <div class="phone-status-icons">
                {% if game %}
                    <span class="timer" id="game-timer-display">
                        {% if game.status == 'in_progress' %}
                            {{ game.time_remaining }}:00
                        {% else %}
                            00:00
                        {% endif %}
                    </span>
                {% endif %}
                <i class="bi bi-wifi"></i>
                <i class="bi bi-battery-full"></i>
            </div>
        </div>
        
        <div class="phone-content-main">
            {% if messages %}
                <div class="django-messages p-2">
                    {% for message in messages %}
                        <div class="alert alert-{{ message.tags }} alert-dismissible fade show m-0 mb-2" role="alert">
                            {{ message }}
                            <button type="button" class="btn-close btn-sm" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
            
            {% block content %}
            {% endblock %}
        </div>
        
        {% block page_footer %}
        {% endblock %}
        
        <div class="phone-footer">
            {% if user.is_authenticated and game %}
                <a href="{% url 'game_detail' game.id %}" class="btn btn-link nav-item {% if request.resolver_match.url_name == 'game_detail' %}active{% endif %}">
                    <i class="bi bi-chat-dots-fill"></i><span>Messages</span>
                </a>
                <a href="{% url 'player_hand' game.id %}" class="btn btn-link nav-item {% if request.resolver_match.url_name == 'player_hand' %}active{% endif %}">
                    <i class="bi bi-journals"></i><span>Cards</span>
                </a>
                <a href="{% url 'game_info' game.id %}" class="btn btn-link nav-item {% if request.resolver_match.url_name == 'game_info' %}active{% endif %}">
                    <i class="bi bi-info-circle-fill"></i><span>Game</span>
                </a>
                {% if player.is_host %}
                    <a href="{% url 'game_admin' game.id %}" class="btn btn-link nav-item {% if request.resolver_match.url_name == 'game_admin' or 'game_admin' in request.resolver_match.url_name %}active{% endif %}">
                        <i class="bi bi-gear-fill"></i><span>Admin</span>
                    </a>
                {% endif %}
            {% elif user.is_authenticated %}
                <a href="{% url 'home' %}" class="btn btn-link nav-item">
                    <i class="bi bi-house-fill"></i><span>Home</span>
                </a>
                <form method="post" action="{% url 'logout' %}" class="d-inline">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-link nav-item">
                        <i class="bi bi-box-arrow-right"></i><span>Logout</span>
                    </button>
                </form>
            {% else %}
                <a href="{% url 'login' %}" class="btn btn-link nav-item">
                    <i class="bi bi-box-arrow-in-right"></i><span>Login</span>
                </a>
                <a href="{% url 'register' %}" class="btn btn-link nav-item">
                    <i class="bi bi-person-plus-fill"></i><span>Register</span>
                </a>
            {% endif %}
        </div>
    </div>
    {% endblock %}
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    {% block scripts %}
    {{ block.super }}
    <script>
    // Timer management
    const TimerManager = {
        timerElement: null,
        timerInterval: null,
        lastSync: null,
        syncInterval: 30000, // Sync with server every 30 seconds

        init: function() {
            this.timerElement = document.getElementById('game-timer-display');
            if (!this.timerElement) return;

            const gameStatus = "{{ game.status }}";
            if (gameStatus === 'in_progress') {
                this.startTimer();
                this.startSync();
            } else if (gameStatus === 'setup') {
                this.timerElement.textContent = "90:00";
            } else {
                this.timerElement.textContent = "00:00";
            }
        },

        startTimer: function() {
            if (this.timerInterval) clearInterval(this.timerInterval);
            
            let timeText = this.timerElement.textContent.trim();
            let [minutes, seconds] = timeText.split(':').map(Number);
            if (isNaN(seconds)) seconds = 0;
            
            let totalSeconds = minutes * 60 + seconds;
            this.lastSync = Date.now();

            this.timerInterval = setInterval(() => {
                if (totalSeconds <= 0) {
                    this.timerElement.textContent = "00:00";
                    clearInterval(this.timerInterval);
                    this.checkGameStatus();
                    return;
                }
                
                totalSeconds--;
                const currentMinutes = Math.floor(totalSeconds / 60);
                const currentSeconds = totalSeconds % 60;
                
                this.timerElement.textContent = 
                    currentMinutes.toString().padStart(2, '0') + ':' + 
                    currentSeconds.toString().padStart(2, '0');
            }, 1000);
        },

        startSync: function() {
            if (this.syncInterval) clearInterval(this.syncInterval);
            
            this.syncInterval = setInterval(() => {
                this.syncWithServer();
            }, 30000); // Sync every 30 seconds
        },

        syncWithServer: async function() {
            try {
                {% if game %}
                    const response = await fetch(`{% url 'game_timer' game.id %}`);
                    if (!response.ok) {
                        console.error(`Error fetching timer data: ${response.status} ${response.statusText}`);
                        return;
                    }
                    const data = await response.json();
                    console.log("Timer sync data from server:", data);

                    if (data.status === 'in_progress') {
                        if (typeof data.time_remaining === 'number') {
                            const serverTotalMinutes = data.time_remaining;
                            const serverTotalSeconds = serverTotalMinutes * 60;

                            // Get current client time in total seconds
                            const currentTimeText = this.timerElement.textContent.trim();
                            let clientMinutes = 0, clientSeconds = 0;

                            if (currentTimeText.includes(':')) {
                                [clientMinutes, clientSeconds] = currentTimeText.split(':').map(Number);
                            } else {
                                console.warn("Client timer display format unexpected:", currentTimeText);
                            }
                            const clientTotalSeconds = (clientMinutes * 60) + (isNaN(clientSeconds) ? 0 : clientSeconds);

                            // Only update if difference is significant (> 5 seconds)
                            if (Math.abs(clientTotalSeconds - serverTotalSeconds) > 5) {
                                console.log(`Timer desync detected. Client: ${clientTotalSeconds}s, Server: ${serverTotalSeconds}s. Resyncing.`);
                                this.timerElement.textContent =
                                    Math.floor(serverTotalSeconds / 60).toString().padStart(2, '0') + ':' +
                                    (serverTotalSeconds % 60).toString().padStart(2, '0');
                                this.startTimer();
                            }
                        } else {
                            console.error('Error: data.time_remaining from server is not a number:', data.time_remaining, typeof data.time_remaining);
                        }
                    } else if (data.status === 'finished' || data.status === 'setup') {
                        clearInterval(this.timerInterval);
                        clearInterval(this.syncInterval);
                        this.timerElement.textContent = (data.status === 'setup') ? "90:00" : "00:00";
                    }
                {% endif %}
            } catch (error) {
                console.error('Error in syncWithServer:', error);
            }
        },

        checkGameStatus: async function() {
            try {
                {% if game %}
                    const response = await fetch(`{% url 'game_status' game.id %}`);
                    const data = await response.json();
                    
                    if (data.status !== 'in_progress') {
                        clearInterval(this.timerInterval);
                        clearInterval(this.syncInterval);
                        this.timerElement.textContent = "00:00";
                    }
                {% endif %}
            } catch (error) {
                console.error('Error checking game status:', error);
            }
        }
    };

    document.addEventListener('DOMContentLoaded', function() {
        TimerManager.init();
    });
    </script>
    {% endblock %}
</body>
</html>


----- END OF FILE -----

===== templates/game/card_detail.html =====

{% extends 'game/base.html' %}

{% block title %}{{ card.title }} - {{ game.title }}{% endblock %}

{% block header_title %}Card Details{% endblock %}

{% block content %}
<div class="container-fluid p-0">
    <!-- Game Status Bar -->
    <div class="alert {% if game.status == 'in_progress' %}alert-primary{% elif game.status == 'finished' %}alert-secondary{% else %}alert-info{% endif %} mb-3 py-2">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-journals me-2"></i>
                <div>
                    <strong>{{ game.title }}</strong>
                    <small class="d-block text-muted">Card Details</small>
                </div>
            </div>
            <span class="badge {% if game.status == 'setup' %}bg-secondary{% elif game.status == 'in_progress' %}bg-success{% else %}bg-danger{% endif %}">
                {{ game.get_status_display }}
            </span>
        </div>
    </div>

    <!-- Card Detail Section -->
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card-container" id="card-detail">
                <div class="card-inner">
                    <!-- Card Front -->
                    <div class="card-front">
                        <div class="card-type-badge {{ card.card_type }}">
                            <i class="bi {% if card.card_type == 'clue' %}bi-lightbulb{% elif card.card_type == 'character' %}bi-person-badge{% elif card.card_type == 'location' %}bi-geo-alt{% elif card.card_type == 'suspect' %}bi-person-lines-fill{% else %}bi-question-circle{% endif %}"></i>
                            {{ card.get_card_type_display }}
                        </div>
                        <h3 class="card-title">{{ card.title }}</h3>
                        {% if card.image %}
                            <img src="{{ card.image.url }}" alt="{{ card.title }}" class="card-image">
                        {% endif %}
                        <div class="card-hint">
                            <i class="bi bi-info-circle"></i>
                            Tap to flip
                        </div>
                    </div>
                    
                    <!-- Card Back -->
                    <div class="card-back">
                        <div class="card-type-badge {{ card.card_type }}">
                            <i class="bi {% if card.card_type == 'clue' %}bi-lightbulb{% elif card.card_type == 'character' %}bi-person-badge{% elif card.card_type == 'location' %}bi-geo-alt{% elif card.card_type == 'suspect' %}bi-person-lines-fill{% else %}bi-question-circle{% endif %}"></i>
                            {{ card.get_card_type_display }}
                        </div>
                        <h3 class="card-title">{{ card.title }}</h3>
                        <div class="card-description">
                            {{ card.description|linebreaks }}
                        </div>
                        {% if card.reveal_time %}
                            <div class="card-reveal-time">
                                <i class="bi bi-clock"></i>
                                Reveals at {{ card.reveal_time }} minutes
                            </div>
                        {% endif %}
                        {% if card.image %}
                            <img src="{{ card.image.url }}" alt="{{ card.title }}" class="card-image">
                        {% endif %}
                    </div>
                </div>
            </div>

            <!-- Card Actions -->
            <div class="card mt-3">
                <div class="card-body">
                    <div class="d-grid gap-2">
                        {% if game.status == 'in_progress' and not card.revealed and card.reveal_time and game.time_elapsed >= card.reveal_time %}
                            <a href="{% url 'reveal_card' game.id card.id %}" class="btn btn-primary">
                                <i class="bi bi-eye me-2"></i>Reveal Card
                            </a>
                        {% endif %}
                        <a href="{% url 'player_hand' game.id %}" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left me-2"></i>Back to Hand
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ block.super }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const cardContainer = document.getElementById('card-detail');
    
    // Add click handler for mobile
    cardContainer.addEventListener('click', function() {
        this.classList.toggle('flipped');
    });
    
    // Add hover effect for desktop
    if (window.innerWidth > 768) {
        cardContainer.addEventListener('mouseenter', function() {
            this.classList.add('flipped');
        });
        cardContainer.addEventListener('mouseleave', function() {
            this.classList.remove('flipped');
        });
    }
});
</script>
{% endblock %}


----- END OF FILE -----

===== templates/game/game_admin.html =====

{% extends 'game/base.html' %}
{% load game_filters %}

{% block title %}Game Admin - {{ game.title }}{% endblock %}

{% block header_title %}Game Admin{% endblock %}

{% block content %}
<div class="container-fluid p-0">
    <!-- Game Status Bar -->
    <div class="alert {% if game.status == 'in_progress' %}alert-primary{% elif game.status == 'finished' %}alert-secondary{% else %}alert-info{% endif %} mb-3 py-2">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-controller me-2"></i>
                <div>
                    <strong>{{ game.title }}</strong>
                    <small class="d-block text-muted">Join Code: {{ game.join_code }}</small>
                </div>
            </div>
            <span class="badge {% if game.status == 'setup' %}bg-secondary{% elif game.status == 'in_progress' %}bg-success{% else %}bg-danger{% endif %}">
                {{ game.get_status_display }}
            </span>
        </div>
    </div>
    
    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs nav-fill mb-3" id="adminTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="game-tab" data-bs-toggle="tab" data-bs-target="#game" type="button" role="tab">
                <i class="bi bi-controller me-1"></i>Game
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="players-tab" data-bs-toggle="tab" data-bs-target="#players" type="button" role="tab">
                <i class="bi bi-people me-1"></i>Players
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="cards-tab" data-bs-toggle="tab" data-bs-target="#cards" type="button" role="tab">
                <i class="bi bi-journals me-1"></i>Cards
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="messages-tab" data-bs-toggle="tab" data-bs-target="#messages" type="button" role="tab">
                <i class="bi bi-chat-dots me-1"></i>Messages
            </button>
        </li>
    </ul>
    
    <!-- Tab Content -->
    <div class="tab-content" id="adminTabsContent">
        <!-- Game Tab -->
        <div class="tab-pane fade show active" id="game" role="tabpanel" aria-labelledby="game-tab">
            {% include 'game/includes/admin_tab_game.html' %}
        </div>
        
        <!-- Players Tab -->
        <div class="tab-pane fade" id="players" role="tabpanel" aria-labelledby="players-tab">
            {% include 'game/includes/admin_tab_players.html' %}
        </div>
        
        <!-- Cards Tab -->
        <div class="tab-pane fade" id="cards" role="tabpanel" aria-labelledby="cards-tab">
            {% include 'game/includes/admin_tab_cards.html' %}
        </div>
        
        <!-- Messages Tab -->
        <div class="tab-pane fade" id="messages" role="tabpanel" aria-labelledby="messages-tab">
            {% include 'game/includes/admin_tab_messages.html' %}
        </div>
    </div>
    
    <!-- Back to Game Button -->
    <div class="d-grid gap-2 my-3">
        <a href="{% url 'game_detail' game.id %}" class="btn btn-outline-primary">
            <i class="bi bi-arrow-left me-2"></i>Back to Game
        </a>
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ block.super }}
<script>
// Activer le dernier onglet visité
document.addEventListener('DOMContentLoaded', function() {
    const lastTab = localStorage.getItem('adminLastTab');
    if (lastTab) {
        const tab = document.querySelector(`#${lastTab}-tab`);
        if (tab) {
            new bootstrap.Tab(tab).show();
        }
    }
    
    // Sauvegarder l'onglet actif
    document.querySelectorAll('#adminTabs button').forEach(button => {
        button.addEventListener('shown.bs.tab', function(e) {
            localStorage.setItem('adminLastTab', e.target.id.replace('-tab', ''));
        });
    });
});
</script>
{% endblock %}


----- END OF FILE -----

===== templates/game/game_admin_player_cards.html =====

{% extends 'game/base.html' %}
{% load game_filters %}

{% block title %}Manage Cards - {{ target_player.character_name }}{% endblock %}

{% block header_title %}Manage Player Cards{% endblock %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <!-- Player Info -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Player: <span class="{{ target_player.color }}">{{ target_player.character_name }}</span></span>
                    <span class="badge {% if game.status == 'setup' %}bg-secondary{% elif game.status == 'in_progress' %}bg-success{% else %}bg-danger{% endif %}">
                        {{ game.get_status_display }}
                    </span>
                </div>
                <div class="card-body">
                    <p><strong>User:</strong> {{ target_player.user.username }}</p>
                    <p><strong>Color:</strong> {{ target_player.get_color_display }}</p>
                    <p><strong>Host:</strong> {% if target_player.is_host %}Yes{% else %}No{% endif %}</p>
                    <p><strong>Cards in Hand:</strong> {{ player_cards|length }}</p>
                </div>
            </div>
            
            <!-- Current Cards -->
            <div class="card mb-3">
                <div class="card-header">Current Cards</div>
                <div class="card-body p-0">
                    {% if player_cards %}
                        <form method="post" class="mb-0">
                            {% csrf_token %}
                            <input type="hidden" name="action" value="remove">
                            
                            <ul class="list-group list-group-flush">
                                {% for card in player_cards %}
                                    <li class="list-group-item d-flex justify-content-between align-items-center {% if card.revealed %}text-muted{% endif %}">
                                        <div class="d-flex align-items-center w-100">
                                            <div class="form-check me-3">
                                                <input type="checkbox" name="card_ids" value="{{ card.id }}" class="form-check-input">
                                            </div>
                                            <div class="flex-grow-1">
                                                <div>{{ card.title }}</div>
                                                <small class="text-muted">{{ card.get_card_type_display }}</small>
                                                {% if card.reveal_time %}
                                                    <span class="badge bg-warning text-dark">Reveals at {{ card.reveal_time }} min</span>
                                                {% endif %}
                                            </div>
                                            <div class="d-flex align-items-center ms-auto">
                                                <!-- Move toggle form outside of the parent form -->
                                                <div class="toggle-container me-2">
                                                    <div class="d-flex align-items-center">
                                                        <form action="{% url 'game_admin_toggle_card' game.id card.id %}" method="post" class="d-inline mb-0">
                                                            {% csrf_token %}
                                                            <label class="toggle-switch mb-0">
                                                                <input type="checkbox" {% if card.revealed %}checked{% endif %} onchange="this.form.submit()">
                                                                <span class="toggle-slider"></span>
                                                            </label>
                                                        </form>
                                                        <span class="card-status ms-2">
                                                            {% if card.revealed %}Revealed{% else %}Hidden{% endif %}
                                                        </span>
                                                    </div>
                                                </div>
                                                <a href="{% url 'card_detail' game.id card.id %}" class="btn btn-sm btn-outline-primary">
                                                    View
                                                </a>
                                            </div>
                                        </div>
                                    </li>
                                {% endfor %}
                            </ul>
                            
                            <div class="p-3">
                                <button type="submit" class="btn btn-danger">Remove Selected Cards</button>
                            </div>
                        </form>
                    {% else %}
                        <div class="p-3 text-center text-muted">
                            This player has no cards yet.
                        </div>
                    {% endif %}
                </div>
            </div>
            
            <!-- Available Cards -->
            <div class="card mb-3">
                <div class="card-header">Add Cards</div>
                <div class="card-body">
                    {% if available_cards %}
                        <form method="post">
                            {% csrf_token %}
                            <input type="hidden" name="action" value="add">
                            
                            <!-- Character Cards -->
                            {% with character_cards=available_cards|filter:"card_type,character" %}
                                {% if character_cards %}
                                    <div class="mb-3">
                                        <h6 class="mb-2">Character Cards</h6>
                                        <div class="list-group mb-2">
                                            {% for card in character_cards %}
                                                <label class="list-group-item">
                                                    <input type="checkbox" name="card_ids" value="{{ card.id }}" class="form-check-input me-2">
                                                    {{ card.title }}
                                                </label>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endwith %}
                            
                            <!-- Clue Cards -->
                            {% with clue_cards=available_cards|filter:"card_type,clue" %}
                                {% if clue_cards %}
                                    <div class="mb-3">
                                        <h6 class="mb-2">Clue Cards</h6>
                                        <div class="list-group mb-2">
                                            {% for card in clue_cards %}
                                                <label class="list-group-item">
                                                    <input type="checkbox" name="card_ids" value="{{ card.id }}" class="form-check-input me-2">
                                                    {{ card.title }}
                                                    {% if card.reveal_time %}
                                                        <small class="text-muted">(Reveals at {{ card.reveal_time }} min)</small>
                                                    {% endif %}
                                                </label>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endwith %}
                            
                            <!-- Location Cards -->
                            {% with location_cards=available_cards|filter:"card_type,location" %}
                                {% if location_cards %}
                                    <div class="mb-3">
                                        <h6 class="mb-2">Location Cards</h6>
                                        <div class="list-group mb-2">
                                            {% for card in location_cards %}
                                                <label class="list-group-item">
                                                    <input type="checkbox" name="card_ids" value="{{ card.id }}" class="form-check-input me-2">
                                                    {{ card.title }}
                                                </label>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endwith %}
                            
                            <!-- Suspect Cards -->
                            {% with suspect_cards=available_cards|filter:"card_type,suspect" %}
                                {% if suspect_cards %}
                                    <div class="mb-3">
                                        <h6 class="mb-2">Suspect Cards</h6>
                                        <div class="list-group mb-2">
                                            {% for card in suspect_cards %}
                                                <label class="list-group-item">
                                                    <input type="checkbox" name="card_ids" value="{{ card.id }}" class="form-check-input me-2">
                                                    {{ card.title }}
                                                </label>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endwith %}
                            
                            <!-- Motive Cards -->
                            {% with motive_cards=available_cards|filter:"card_type,motive" %}
                                {% if motive_cards %}
                                    <div class="mb-3">
                                        <h6 class="mb-2">Motive Cards</h6>
                                        <div class="list-group mb-2">
                                            {% for card in motive_cards %}
                                                <label class="list-group-item">
                                                    <input type="checkbox" name="card_ids" value="{{ card.id }}" class="form-check-input me-2">
                                                    {{ card.title }}
                                                </label>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endwith %}
                            
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">Add Selected Cards</button>
                            </div>
                        </form>
                    {% else %}
                        <div class="text-center text-muted">
                            No available cards to add.
                        </div>
                    {% endif %}
                </div>
            </div>
            
            <!-- Navigation Buttons -->
            <div class="d-grid gap-2 mb-4">
                <a href="{% url 'game_admin' game.id %}" class="btn btn-primary">
                    <i class="bi bi-arrow-left"></i> Back to Admin Panel
                </a>
                <a href="{% url 'game_detail' game.id %}" class="btn btn-outline-secondary">
                    <i class="bi bi-phone"></i> Back to Game
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}


----- END OF FILE -----

===== templates/game/game_detail.html =====

{% extends 'game/base.html' %}
{% load static %}

{% block head_extra %}
    {{ block.super }}
    <!-- Mithril JS -->
    <script src="https://unpkg.com/mithril@2.2.2/mithril.js"></script>
    {{ initial_messages_json|json_script:"initial-messages-data" }}
{% endblock %}

{% block title %}{{ game.title }} - Alice is Missing{% endblock %}

{% block header_title %}
    <span class="{{ player.color }}">{{ player.character_name }}</span>
{% endblock %}

{% block content %}
<style>
/* Hide scrollbar for phone container but keep scroll functionality */
.phone-container {
    -ms-overflow-style: none !important;
    scrollbar-width: none !important;
    overflow-y: auto !important;
}

.phone-container::-webkit-scrollbar {
    width: 0 !important;
    display: none !important;
}

/* Messages container scroll */
/* Container styling */
.container-fluid {
    display: flex;
    flex-direction: column;
    min-height: 100%;
}

/* Status and player sections */
.alert, .player-status {
    flex-shrink: 0;
}

/* Messages area */
#mithril-messages {
    flex: 1;
    min-height: 0;  /* Important pour que flex fonctionne correctement */
    background: #f8f9fa;
    margin-bottom: 8px;
}

.messages-container {
    height: 100%;
    overflow-y: auto;
    padding: 15px;
}

/* Phone content */
.phone-content {
    overflow-y: visible !important;
}

/* Message input footer */
.message-input-footer {
    flex-shrink: 0;
    background: white;
    padding: 8px;
    border-top: 1px solid #dee2e6;
    width: 100%;
    max-width: 450px;
    margin: 0 auto;
}

/* Phone footer menu */
.phone-footer {
    flex-shrink: 0;
    background: white;
    padding: 8px;
    border-top: 1px solid #dee2e6;
    margin-top: 8px;
}

@media (max-width: 576px) {
    .message-input-footer {
        max-width: none;
    }
}

/* Message bubbles */
.message-bubble {
    padding: 10px 15px;
    margin-bottom: 10px;
    border-radius: 15px;
    max-width: 80%;
}

.message-sent {
    background-color: var(--sent-message-bg);
    margin-left: auto;
    border-bottom-right-radius: 5px;
}

.message-received {
    background-color: var(--received-message-bg);
    margin-right: auto;
    border-bottom-left-radius: 5px;
}

.message-system {
    background-color: var(--system-message-bg);
    margin: 10px auto;
    text-align: center;
    font-style: italic;
    max-width: 90%;
}

.message-direct {
    border: 2px solid rgba(0, 0, 0, 0.1);
}

/* Message content */
.message-sender {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
}

.direct-indicator {
    font-size: 0.85em;
    opacity: 0.7;
    margin-left: 5px;
}

.message-image {
    margin-top: 8px;
}

.message-time {
    font-size: 0.75em;
    color: #666;
    margin-top: 5px;
    text-align: right;
}

/* Message type selector */
.message-type-selector {
    display: flex;
    gap: 4px;
    margin-bottom: 8px;
}

.message-type-selector button,
.message-type-selector label {
    padding: 4px 8px;
    font-size: 13px;
}

/* Input group */
.input-group {
    display: flex;
    gap: 4px;
}

.input-group input {
    flex: 1;
    padding: 6px 8px;
}

.input-group button {
    padding: 6px 12px;
}

/* Recipient select improvements */
#recipient-select select {
    border-radius: 20px;
    height: 32px;
    padding: 0 12px;
    font-size: 0.875rem;
    background-position: right 12px center;
}

/* Image preview */
#image-preview {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 4px;
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
}

/* Image preview improvements */
.image-preview {
    position: relative;
    display: inline-block;
    border-radius: 4px;
    overflow: hidden;
}

.image-expand-indicator {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.4);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: all 0.2s ease;
}

.image-expand-indicator i {
    font-size: 1.5rem;
    transform: scale(0.8);
    transition: transform 0.2s ease;
}

.image-preview:hover .image-expand-indicator {
    opacity: 1;
}

.image-preview:hover .image-expand-indicator i {
    transform: scale(1);
}

.preview-thumbnail {
    max-width: 40px;
    max-height: 40px;
    border-radius: 4px;
    object-fit: cover;
    transition: transform 0.2s;
}

.message-thumbnail {
    display: block;
    max-width: 200px;
    max-height: 150px;
    border-radius: 4px;
    object-fit: cover;
}

/* Preview hover effects */
.preview-thumbnail:hover,
.image-preview:hover .message-thumbnail {
    transform: scale(1.02);
}

/* Mobile optimizations */
@media (max-width: 576px) {
    .messages-container {
        padding: 10px;
    }
    
    .message-bubble {
        max-width: 85%;
    }
    
    .message-thumbnail {
        max-width: 150px;
        max-height: 120px;
    }
}
</style>
<div class="container-fluid p-0 d-flex flex-column h-100">
    <!-- Game Status Bar -->
    <div class="alert {% if game.status == 'in_progress' %}alert-primary{% elif game.status == 'setup' %}alert-info{% else %}alert-secondary{% endif %} m-2 py-2">
        <div class="d-flex justify-content-between align-items-center">
            <small>
                {% if game.status == 'in_progress' %}
                    Game in progress
                {% elif game.status == 'finished' %}
                    Game ended
                {% elif game.status == 'setup' %}
                    Game Setup - Waiting for host
                {% endif %}
            </small>
        </div>
    </div>

    <!-- Player Status Section -->
    <div class="player-status mb-2 px-2">
        <div class="d-flex flex-wrap justify-content-center">
            {% for p_loop in game.players.all %}
                <div class="text-center mx-1 mb-1 player-avatar-container" title="{{ p_loop.user.username }}">
                    <div class="rounded-circle player-avatar"
                         style="border: 2px solid var(--{{ p_loop.color }}, #ccc);">
                        <span class="player-initial {{ p_loop.color }}">{{ p_loop.character_name|slice:":1"|upper }}</span>
                    </div>
                    <small class="player-name {{ p_loop.color }}">{{ p_loop.character_name|truncatechars:10 }}</small>
                </div>
            {% endfor %}
        </div>
    </div>

    <!-- Messages Section -->
    <div id="mithril-messages-mount" class="flex-grow-1">
        <!-- Mithril will render messages here -->
    </div>
</div>

<!-- Ajout de la modale Bootstrap pour l'affichage des images -->
<div class="modal fade" id="imageDisplayModal" tabindex="-1" aria-labelledby="imageDisplayModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content bg-dark text-light" style="background-color: rgba(0,0,0,0.85) !important;">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="imageDisplayModalLabel">Image Preview</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <img src="" id="modalImage" class="img-fluid" alt="Full size image" style="max-height: 80vh; object-fit: contain;">
        <p id="modalCaption" class="mt-2 small"></p>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block page_footer %}
<!-- Message Input Area -->
<div class="message-input-footer">
    <form id="message-form" method="post" action="{% url 'send_message' game.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <input type="hidden" name="message_type" id="message-type-input" value="public">

        <div id="image-preview-container" class="mb-2 d-none">
            <img src="" alt="Preview" id="image-preview-thumb">
            <button type="button" class="btn-close btn-sm" aria-label="Clear image" onclick="clearImagePreview()"></button>
        </div>

        <div class="d-flex mb-1 message-controls">
            <div class="btn-group btn-group-sm message-type-selector me-2">
                <button type="button" id="public-btn" class="btn btn-primary active" onclick="setMessageType('public')">Public</button>
                <button type="button" id="direct-btn" class="btn btn-outline-primary" onclick="toggleRecipientSelect()">Direct</button>
            </div>
            <div id="recipient-select-container" class="flex-grow-1 d-none">
                <select name="recipient" class="form-select form-select-sm">
                    <option value="">To everyone (public)</option>
                    {% for other_player in game.players.all %}
                        {% if other_player != player %}
                        <option value="{{ other_player.id }}">{{ other_player.character_name }}</option>
                        {% endif %}
                    {% endfor %}
                </select>
            </div>
        </div>

        <div class="input-group">
            <input type="text" name="message" class="form-control" placeholder="Type a message..." id="message-input">
            <input type="file" name="image" id="image-input" accept="image/*" class="d-none" onchange="handleImageSelect(event)">
            <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('image-input').click()">
                <i class="fas fa-image"></i>
            </button>
            <button type="submit" class="btn btn-primary">Send</button>
        </div>
    </form>
</div>
{% endblock %}

{% block scripts %}
    {{ block.super }}
    <script>
    // Récupérer les messages initiaux depuis la balise script générée par json_script
    const initialMessagesElement = document.getElementById('initial-messages-data');
    const initialMessages = initialMessagesElement ? JSON.parse(initialMessagesElement.textContent) : [];
    
    // Logger pour les erreurs côté client
    const Logger = {
        logError: async function(error, context = {}) {
            try {
                const response = await fetch('/log-error/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                    },
                    body: JSON.stringify({
                        error: error.message || String(error),
                        stack: error.stack,
                        context: {
                            ...context,
                            url: window.location.href,
                            userAgent: navigator.userAgent
                        }
                    })
                });
                if (!response.ok) {
                    console.error('Failed to log error:', await response.text());
                }
            } catch (e) {
                console.error('Error logging error:', e);
            }
        }
    };

    // Fonctions de gestion des images
    function handleImageSelect(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewContainer = document.getElementById('image-preview-container');
                const previewThumb = document.getElementById('image-preview-thumb');
                previewThumb.src = e.target.result;
                previewContainer.classList.remove('d-none');
            };
            reader.readAsDataURL(file);
        }
    }

    function clearImagePreview() {
        const previewContainer = document.getElementById('image-preview-container');
        const previewThumb = document.getElementById('image-preview-thumb');
        const imageInput = document.getElementById('image-input');
        previewThumb.src = '';
        previewContainer.classList.add('d-none');
        imageInput.value = '';
    }

    function wrapAsync(fn, context = {}) {
        return async function(...args) {
            try {
                return await fn.apply(this, args);
            } catch (error) {
                console.error('Error in async function:', error);
                await Logger.logError(error, context);
                throw error;
            }
        };
    }

    function log(msg, data) {
        console.log(`[${new Date().toISOString()}] ${msg}`, data || '');
    }

    function escapeHtml(unsafe) {
        if (unsafe === null || typeof unsafe === 'undefined') return '';
        return unsafe
             .replace(/&/g, "&amp;")
             .replace(/</g, "&lt;")
             .replace(/>/g, "&gt;")
             .replace(/"/g, "&quot;")
             .replace(/'/g, "&#039;");
    }

    // Fonction pour afficher l'image dans la modale
    let imageModalInstance = null;
    function showImageInModal(imageUrl, captionText = "") {
        const modalElement = document.getElementById('imageDisplayModal');
        if (!modalElement) {
            console.error("Modal element #imageDisplayModal not found!");
            return;
        }

        const modalImage = modalElement.querySelector('#modalImage');
        const modalCaption = modalElement.querySelector('#modalCaption');

        modalImage.src = imageUrl;
        modalImage.alt = captionText || "Full size image";
        if (modalCaption) {
            modalCaption.textContent = captionText;
        }

        if (!imageModalInstance) {
            imageModalInstance = new bootstrap.Modal(modalElement);
        }
        imageModalInstance.show();
    }

    // Messages component
    const MessagesComponent = {
        messages: initialMessages,
        lastMessageId: initialMessages.length > 0 ? Math.max(0, ...initialMessages.map(m => m.id)) : 0,
        isLoading: false,
        error: null,
        messageContainer: null,

        scrollToBottom: function() {
            if (MessagesComponent.messageContainer) {
                setTimeout(() => {
                    MessagesComponent.messageContainer.scrollTop = MessagesComponent.messageContainer.scrollHeight;
                }, 0);
            }
        },

        oncreate: function(vnode) {
            MessagesComponent.messageContainer = vnode.dom;
            MessagesComponent.scrollToBottom();
            if (gameStatus === 'in_progress') {
                MessagesComponent.fetchMessages();
                MessagesComponent.startPolling();
            }
        },

        onupdate: function() {
            MessagesComponent.scrollToBottom();
        },
        
        fetchMessages: function() {
            if (MessagesComponent.isLoading) return;
            MessagesComponent.isLoading = true;
            
            fetch(`/game/${gameId}/messages/?after=${MessagesComponent.lastMessageId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.messages && data.messages.length > 0) {
                        MessagesComponent.messages = [...MessagesComponent.messages, ...data.messages];
                        MessagesComponent.lastMessageId = Math.max(...data.messages.map(m => m.id));
                        m.redraw();
                    }
                })
                .catch(error => {
                    console.error('Error fetching messages:', error);
                    MessagesComponent.error = 'Failed to load new messages';
                    m.redraw();
                })
                .finally(() => {
                    MessagesComponent.isLoading = false;
                });
        },

        pollingInterval: null,
        startPolling: function() {
            if (MessagesComponent.pollingInterval) return;
            MessagesComponent.pollingInterval = setInterval(() => {
                MessagesComponent.fetchMessages();
            }, 5000); // Poll every 5 seconds
        },

        stopPolling: function() {
            if (MessagesComponent.pollingInterval) {
                clearInterval(MessagesComponent.pollingInterval);
                MessagesComponent.pollingInterval = null;
            }
        },

        view: function() {
            return m(".messages-container", [
                MessagesComponent.error && m(".alert.alert-danger.m-2", MessagesComponent.error),
                MessagesComponent.messages.length ? 
                MessagesComponent.messages.map(msg =>
                    m(`.message-bubble.${msg.type}${msg.isDirect ? '.message-direct' : ''}`, {
                        key: msg.id,
                        style: msg.isDirect && msg.sender && msg.sender.color ? `border-color: var(--${msg.sender.color})` : ''
                    }, [
                        msg.sender && m(".message-sender", { class: msg.sender.color }, [
                            msg.sender.name,
                            msg.isDirect && msg.recipient && m("span.direct-indicator", ` to ${msg.recipient}`)
                        ]),
                        !msg.sender && msg.type === "system" && m(".message-sender", "SYSTEM"),
                        msg.content && m(".message-content-text", {style: "white-space: pre-wrap;"}, msg.content),
                        msg.image && msg.image.url && m(".message-image.mt-1", 
                            m("img.message-thumbnail", { 
                                src: msg.image.url, 
                                alt: "Shared image (tap to enlarge)",
                                style: "cursor: pointer;",
                                onclick: function(e) {
                                    e.preventDefault();
                                    showImageInModal(msg.image.url, msg.content || `Image from ${msg.sender ? msg.sender.name : 'system'}`);
                                }
                            })
                        ),
                        m(".message-time", msg.time)
                    ])
                )
                : m(".text-center.text-muted.py-5.p-2", "No messages yet. Start the conversation!")
            ]);
        }
    };

    const gameStatus = "{{ game.status|escapejs }}";
    const gameId = {{ game.id }};
    const messagesMountPoint = document.getElementById('mithril-messages-mount');
    if (messagesMountPoint) {
        m.mount(messagesMountPoint, MessagesComponent);
    } else {
        console.error("Mithril mount point #mithril-messages-mount not found!");
    }
    
    // Modifier la soumission du formulaire pour mettre à jour Mithril
    const messageForm = document.getElementById('message-form');
    if (messageForm) {
        messageForm.addEventListener('submit', wrapAsync(async function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = true;
    
            try {
                const response = await fetch(this.action, {
                    method: 'POST',
                    body: formData,
                });
    
                const data = await response.json().catch(parseError => ({
                    success: false,
                    error: `Server returned non-JSON response: ${response.status} ${response.statusText}`,
                    details: parseError
                }));
    
                if (!response.ok || !data.success) {
                    const serverError = data.error || `HTTP error ${response.status}`;
                    console.error('Failed to send message:', serverError, data.details || '');
                    alert(`Failed to send message: ${serverError}`);
                    await Logger.logError(new Error(serverError), { action: 'message_form_submit' });
                } else {
                    this.reset();
                    clearImagePreview();
                    if (data.message) {
                        MessagesComponent.messages.push(data.message);
                        MessagesComponent.lastMessageId = data.message.id;
                        m.redraw();
                    }
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('A network error occurred. Please try again.');
                await Logger.logError(error, { action: 'message_form_submit' });
            } finally {
                submitButton.disabled = false;
                document.getElementById('message-input').focus();
            }
        }, { action: 'message_form_submit' }));
    }
    </script>
{% endblock %}


----- END OF FILE -----

===== templates/game/game_info.html =====

{% extends 'game/base.html' %}

{% block title %}{{ game.title }} - Game Info{% endblock %}

{% block header_title %}Game Information{% endblock %}

{% block content %}
<div class="container-fluid p-0">
    <!-- Game Status -->
    <div class="alert {% if game.status == 'in_progress' %}alert-primary{% elif game.status == 'finished' %}alert-secondary{% else %}alert-info{% endif %} mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">{{ game.get_status_display }}</h5>
            {% if game.status == 'in_progress' %}
                <span class="timer">{{ game.time_remaining }}:00</span>
            {% endif %}
        </div>
    </div>

    <!-- Game Info Card -->
    <div class="card mb-3">
        <div class="card-header bg-primary text-white">Game Details</div>
        <div class="card-body">
            <h5 class="card-title">{{ game.title }}</h5>
            <p><strong>Join Code:</strong> {{ game.join_code }}</p>
            {% if game.start_time %}
                <p><strong>Started:</strong> {{ game.start_time|date:"M d, Y H:i" }}</p>
            {% endif %}
            <p><strong>Players:</strong> {{ game.players.count }}</p>
        </div>
    </div>

    <!-- Players List -->
    <div class="card mb-3">
        <div class="card-header bg-primary text-white">Players</div>
        <div class="card-body p-0">
            <div class="list-group list-group-flush">
                {% for p in game.players.all %}
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <span class="{{ p.color }}">{{ p.character_name }}</span>
                                <small class="text-muted">({{ p.user.username }})</small>
                                {% if p.is_host %}
                                    <span class="badge bg-info">Host</span>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>

    {% if player.is_host %}
        <!-- Host Controls -->
        <div class="card mb-3">
            <div class="card-header bg-primary text-white">Host Controls</div>
            <div class="card-body">
                {% if game.status == 'setup' %}
                    <form method="post" action="{% url 'start_game' game.id %}" class="d-grid">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-success">Start Game</button>
                    </form>
                {% elif game.status == 'in_progress' %}
                    <form method="post" action="{% url 'end_game' game.id %}" class="d-grid">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to end the game?');">End Game</button>
                    </form>
                {% endif %}
            </div>
        </div>
    {% endif %}
</div>
{% endblock %}


----- END OF FILE -----

===== templates/game/game_setup.html =====

{% extends 'game/base.html' %}

{% block title %}Game Setup - Alice is Missing{% endblock %}

{% block header_title %}Game Setup{% endblock %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <h2 class="text-center mb-3">{{ game.title }}</h2>
            
            <!-- Join Code Display -->
            <div class="alert alert-info text-center mb-4">
                <p class="mb-0"><strong>Join Code:</strong> {{ game.join_code }}</p>
                <small>Share this code with other players</small>
            </div>
            
            <!-- Player Status -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Players ({{ players|length }})</span>
                    {% if player.character_name %}
                        <span class="badge bg-success">Ready</span>
                    {% else %}
                        <span class="badge bg-warning text-dark">Not Ready</span>
                    {% endif %}
                </div>
                <ul class="list-group list-group-flush">
                    {% for p in players %}
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        {% if p.character_name %}
                            <div>
                                <span class="{{ p.color }}">{{ p.character_name }}</span>
                                <small class="text-muted">({{ p.user.username }})</small>
                                {% if p.is_host %}
                                    <span class="badge bg-info">Host</span>
                                {% endif %}
                            </div>
                            <span class="badge bg-success">Ready</span>
                        {% else %}
                            <div>
                                {{ p.user.username }}
                                {% if p.is_host %}
                                    <span class="badge bg-info">Host</span>
                                {% endif %}
                            </div>
                            <span class="badge bg-warning text-dark">Selecting Character</span>
                        {% endif %}
                    </li>
                    {% endfor %}
                </ul>
            </div>
            
            <!-- Character Selection -->
            {% if not player.character_name %}
            <div class="d-grid mb-4">
                <a href="{% url 'select_character' game.id %}" class="btn btn-primary">
                    Select Your Character
                </a>
            </div>
            {% endif %}
            
            <!-- Game Controls -->
            {% if is_host %}
            <div class="card mb-4">
                <div class="card-header">
                    Host Controls
                </div>
                <div class="card-body">
                    <p>As the host, you control when the game begins.</p>
                    <p class="text-muted">All players must select their characters before starting.</p>
                    
                    <form method="post" action="{% url 'start_game' game.id %}">
                        {% csrf_token %}
                        <div class="d-grid">
                            <button type="submit" class="btn btn-danger" {% if not all_ready %}disabled{% endif %}>
                                Start Game
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            {% else %}
            <div class="alert alert-info text-center mb-4">
                <p class="mb-0">Waiting for the host to start the game...</p>
            </div>
            {% endif %}
            
            <!-- Game Rules -->
            <div class="accordion mb-4" id="gameRules">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="rulesHeading">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#rulesCollapse" aria-expanded="false" aria-controls="rulesCollapse">
                            Game Rules
                        </button>
                    </h2>
                    <div id="rulesCollapse" class="accordion-collapse collapse" aria-labelledby="rulesHeading" data-bs-parent="#gameRules">
                        <div class="accordion-body">
                            <p>Alice is Missing is a silent role-playing game about the disappearance of Alice Briarwood.</p>
                            <p>In this game, you'll communicate only through text messages as you work to uncover what happened to your missing friend.</p>
                            <p>The game runs in real-time over 90 minutes, and each player takes on the role of a character with a connection to Alice.</p>
                            <h5>Key Rules:</h5>
                            <ul>
                                <li>Communicate only through the in-game text messages</li>
                                <li>Reveal cards at their designated times</li>
                                <li>Stay in character throughout the game</li>
                                <li>Work together to piece together what happened to Alice</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Leave Game Option -->
            <div class="d-grid">
                <a href="{% url 'home' %}" class="btn btn-outline-secondary">Leave Game</a>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    // Add the all_ready variable for the template
    document.addEventListener('DOMContentLoaded', function() {
        {% if is_host %}
        const allReady = {% if all_ready %}true{% else %}false{% endif %};
        const startButton = document.querySelector('button[type="submit"]');
        
        if (!allReady && startButton) {
            startButton.setAttribute('title', 'All players must select their characters before starting');
        }
        {% endif %}
    });
</script>
{% endblock %}


----- END OF FILE -----

===== templates/game/home.html =====

{% extends 'game/base.html' %}

{% block title %}Home - Alice is Missing{% endblock %}

{% block header_title %}Home{% endblock %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <h2 class="text-center mb-4">Alice is Missing</h2>
            
            <div class="text-center mb-4">
                <p class="lead">A real-time SMS-based role-playing game</p>
                <p>To find Alice, you'll need to work together for the next 90 minutes.</p>
            </div>
            
            <div class="d-grid gap-2 mb-4">
                <a href="{% url 'new_game' %}" class="btn btn-primary">Create New Game</a>
                <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#joinGameModal">
                    Join Existing Game
                </button>
            </div>
            
            {% if user_games %}
                <h4 class="mb-3">Your Games</h4>
                <div class="list-group mb-4">
                    {% for player in user_games %}
                        <a href="{% url 'game_detail' player.game.id %}" class="list-group-item list-group-item-action">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">{{ player.game.title }}</h5>
                                <span class="badge {% if player.game.status == 'setup' %}bg-secondary{% elif player.game.status == 'in_progress' %}bg-primary{% else %}bg-success{% endif %}">
                                    {{ player.game.get_status_display }}
                                </span>
                            </div>
                            <p class="mb-1">
                                Your character: <span class="{{ player.color }}">{{ player.character_name }}</span>
                                {% if player.is_host %}<span class="badge bg-info">Host</span>{% endif %}
                            </p>
                            <small>
                                Players: {{ player.game.players.count }}
                                {% if player.game.status == 'in_progress' %}
                                    • Time remaining: {{ player.game.time_remaining }} min
                                {% endif %}
                            </small>
                        </a>
                    {% endfor %}
                </div>
            {% else %}
                <div class="alert alert-info text-center">
                    You are not part of any games yet. Create a new game or join an existing one.
                </div>
            {% endif %}
            
            {% if available_games %}
                <h4 class="mb-3">Available Games</h4>
                <div class="list-group">
                    {% for game in available_games %}
                        <div class="list-group-item">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">{{ game.title }}</h5>
                                <form method="post" action="{% url 'join_game_with_code' game.join_code %}">
                                    {% csrf_token %}
                                    <button type="submit" class="btn btn-sm btn-outline-primary">Join</button>
                                </form>
                            </div>
                            <p class="mb-1">
                                Status: {{ game.get_status_display }}
                            </p>
                            <small>
                                Players: {{ game.players.count }}
                                • Created: {{ game.created_at|timesince }} ago
                            </small>
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
        </div>
    </div>
</div>

<!-- Join Game Modal -->
<div class="modal fade" id="joinGameModal" tabindex="-1" aria-labelledby="joinGameModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="joinGameModalLabel">Join Game</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="{% url 'join_game' %}">
                {% csrf_token %}
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="join_code" class="form-label">Enter Game Code</label>
                        <input type="text" name="join_code" class="form-control" id="join_code" placeholder="Enter game code" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Join Game</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}


----- END OF FILE -----

===== templates/game/includes/admin_tab_cards.html =====

<!-- Card Distribution Card -->
<div class="card mb-3">
    <div class="card-header">Card Distribution</div>
    <div class="card-body">
        <p class="text-muted mb-3">Quick assign cards to players:</p>
        
        <form method="post" action="{% url 'game_admin_deal_cards' game.id %}" class="mb-3">
            {% csrf_token %}
            <div class="d-grid gap-2">
                <button type="submit" name="action" value="clues" class="btn btn-outline-primary">
                    <i class="bi bi-lightbulb me-2"></i>Deal Clue Cards
                </button>
                <button type="submit" name="action" value="characters" class="btn btn-outline-success">
                    <i class="bi bi-person-badge me-2"></i>Assign Character Cards
                </button>
                <button type="submit" name="action" value="locations" class="btn btn-outline-info">
                    <i class="bi bi-geo-alt me-2"></i>Deal Location Cards
                </button>
                <button type="submit" name="action" value="suspects" class="btn btn-outline-warning">
                    <i class="bi bi-person-lines-fill me-2"></i>Deal Suspect Cards
                </button>
                <button type="submit" name="action" value="motive" class="btn btn-outline-danger">
                    <i class="bi bi-question-circle me-2"></i>Deal Motive Card
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Card Status Card -->
<div class="card mb-3">
    <div class="card-header">Card Status</div>
    <div class="card-body">
        <div class="accordion" id="cardAccordion">
            {% for card_type, type_name in card_types %}
                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading{{ card_type }}">
                        <button class="accordion-button collapsed" type="button" 
                                data-bs-toggle="collapse" data-bs-target="#collapse{{ card_type }}" 
                                aria-expanded="false" aria-controls="collapse{{ card_type }}">
                            <i class="bi bi-journals me-2"></i>{{ type_name }} Cards
                        </button>
                    </h2>
                    <div id="collapse{{ card_type }}" class="accordion-collapse collapse" 
                         aria-labelledby="heading{{ card_type }}" data-bs-parent="#cardAccordion">
                        <div class="accordion-body p-0">
                            <div class="list-group list-group-flush">
                                {% for card in game_cards %}
                                    {% if card.card_type == card_type %}
                                        <div class="list-group-item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <h6 class="mb-1">{{ card.title }}</h6>
                                                    <small class="text-muted">{{ card.description|truncatechars:100 }}</small>
                                                    <div class="mt-1">
                                                        {% if card.revealed %}
                                                            <span class="badge bg-success">Revealed</span>
                                                        {% elif card.reveal_time %}
                                                            <span class="badge bg-warning text-dark">
                                                                Reveals in {{ card.reveal_time }}m
                                                            </span>
                                                        {% endif %}
                                                    </div>
                                                </div>
                                                <form action="{% url 'game_admin_toggle_card' game.id card.id %}" 
                                                      method="post" class="d-inline mb-0">
                                                    {% csrf_token %}
                                                    <label class="toggle-switch mb-0">
                                                        <input type="checkbox" 
                                                               {% if card.revealed %}checked{% endif %} 
                                                               onchange="this.form.submit()">
                                                        <span class="toggle-slider"></span>
                                                    </label>
                                                </form>
                                            </div>
                                        </div>
                                    {% endif %}
                                {% empty %}
                                    <div class="list-group-item text-muted text-center py-3">
                                        No {{ type_name }} cards for this game.
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</div> 
----- END OF FILE -----

===== templates/game/includes/admin_tab_game.html =====

<!-- Game Information Card -->
<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Game Information</span>
        <span class="badge {% if game.status == 'setup' %}bg-secondary{% elif game.status == 'in_progress' %}bg-success{% else %}bg-danger{% endif %}">
            {{ game.get_status_display }}
        </span>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                    <i class="bi bi-key me-2"></i>
                    <div>
                        <small class="text-muted d-block">Join Code</small>
                        <strong>{{ game.join_code }}</strong>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                    <i class="bi bi-people me-2"></i>
                    <div>
                        <small class="text-muted d-block">Players</small>
                        <strong>{{ game.players.count }}</strong>
                    </div>
                </div>
            </div>
            {% if game.status == 'in_progress' %}
            <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                    <i class="bi bi-clock-history me-2"></i>
                    <div>
                        <small class="text-muted d-block">Time Elapsed</small>
                        <strong>{{ game.time_elapsed }} minutes</strong>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                    <i class="bi bi-clock me-2"></i>
                    <div>
                        <small class="text-muted d-block">Time Remaining</small>
                        <strong>{{ game.time_remaining }} minutes</strong>
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
    </div>
</div>

<!-- Game Control Card -->
<div class="card mb-3">
    <div class="card-header">Game Control</div>
    <div class="card-body">
        {% if game.status == 'setup' %}
            <form method="post" action="{% url 'start_game' game.id %}" class="mb-2">
                {% csrf_token %}
                <div class="d-grid">
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-play-fill me-2"></i>Start Game
                    </button>
                </div>
            </form>
        {% elif game.status == 'in_progress' %}
            <form method="post" action="{% url 'end_game' game.id %}" class="mb-2">
                {% csrf_token %}
                <div class="d-grid">
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to end the game?');">
                        <i class="bi bi-stop-fill me-2"></i>End Game
                    </button>
                </div>
            </form>
        {% elif game.status == 'finished' %}
            <form method="post" action="{% url 'game_admin_reset' game.id %}" class="mb-2">
                {% csrf_token %}
                <div class="d-grid">
                    <button type="submit" class="btn btn-warning" onclick="return confirm('Are you sure you want to reset this game? This cannot be undone.');">
                        <i class="bi bi-arrow-counterclockwise me-2"></i>Reset Game
                    </button>
                </div>
            </form>
        {% endif %}
    </div>
</div>

<!-- Quick Actions Card -->
<div class="card mb-3">
    <div class="card-header">Quick Actions</div>
    <div class="card-body">
        <div class="d-grid gap-2">
            <a href="{% url 'game_detail' game.id %}" class="btn btn-outline-primary">
                <i class="bi bi-chat-dots me-2"></i>View Game Chat
            </a>
            <a href="{% url 'game_info' game.id %}" class="btn btn-outline-info">
                <i class="bi bi-info-circle me-2"></i>View Game Info
            </a>
        </div>
    </div>
</div> 
----- END OF FILE -----

===== templates/game/includes/admin_tab_messages.html =====

{% load game_filters %}

<!-- Message Log Card -->
<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Message Log</span>
        <div class="btn-group btn-group-sm">
            <button type="button" class="btn btn-outline-primary" id="refreshMessages">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
            <button type="button" class="btn btn-outline-danger" id="clearMessages" 
                    onclick="return confirm('Are you sure you want to clear all messages? This cannot be undone.');">
                <i class="bi bi-trash"></i>
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="list-group list-group-flush" id="messageLog">
            {% for message in game_messages %}
                <div class="list-group-item">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center mb-1">
                                {% if message.sender %}
                                    <div class="player-avatar me-2" style="border: 2px solid var(--{{ message.sender.color }}, #ccc);">
                                        <span class="player-initial {{ message.sender.color }}">
                                            {{ message.sender.character_name|slice:":1"|upper }}
                                        </span>
                                    </div>
                                    <div>
                                        <h6 class="mb-0 {{ message.sender.color }}">
                                            {{ message.sender.character_name }}
                                            {% if message.recipient %}
                                                <small class="text-muted">to {{ message.recipient.character_name }}</small>
                                            {% endif %}
                                        </h6>
                                        <small class="text-muted">{{ message.timestamp|date:"H:i" }}</small>
                                    </div>
                                {% else %}
                                    <div class="text-muted">
                                        <i class="bi bi-info-circle me-1"></i>System Message
                                        <small class="ms-2">{{ message.timestamp|date:"H:i" }}</small>
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="message-content">
                                {% if message.content %}
                                    <p class="mb-1">{{ message.content|linebreaksbr }}</p>
                                {% endif %}
                                
                                {% if message.image %}
                                    <div class="message-image mt-2">
                                        <a href="{{ message.image.url }}" target="_blank" class="d-inline-block">
                                            <img src="{{ message.image.url }}" alt="Message image" 
                                                 class="img-thumbnail" style="max-height: 100px;">
                                        </a>
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                        
                        <div class="btn-group btn-group-sm ms-2">
                            <a href="{% url 'message_detail' game.id message.id %}" 
                               class="btn btn-outline-primary" target="_blank">
                                <i class="bi bi-eye"></i>
                            </a>
                            <form method="post" action="{% url 'game_admin_delete_message' game.id message.id %}" 
                                  class="d-inline" onsubmit="return confirm('Delete this message?');">
                                {% csrf_token %}
                                <button type="submit" class="btn btn-outline-danger">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            {% empty %}
                <div class="text-center text-muted py-5">
                    <i class="bi bi-chat-dots display-4 mb-3"></i>
                    <p>No messages yet.</p>
                </div>
            {% endfor %}
        </div>
    </div>
</div>

<!-- Message Stats Card -->
<div class="card mb-3">
    <div class="card-header">Message Statistics</div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <i class="bi bi-chat-text me-2"></i>
                    <div>
                        <small class="text-muted d-block">Total Messages</small>
                        <strong>{{ game_messages|length }}</strong>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <i class="bi bi-image me-2"></i>
                    <div>
                        <small class="text-muted d-block">Images Shared</small>
                        <strong>{{ game_messages|filter:"image"|length }}</strong>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <i class="bi bi-envelope me-2"></i>
                    <div>
                        <small class="text-muted d-block">Direct Messages</small>
                        <strong>{{ game_messages|filter:"recipient"|length }}</strong>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <i class="bi bi-info-circle me-2"></i>
                    <div>
                        <small class="text-muted d-block">System Messages</small>
                        <strong>{{ game_messages|filter:"is_system_message"|length }}</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.getElementById('refreshMessages').addEventListener('click', function() {
    window.location.reload();
});

document.getElementById('clearMessages').addEventListener('click', function() {
    if (confirm('Are you sure you want to clear all messages? This cannot be undone.')) {
        fetch('{% url "game_admin_clear_messages" game.id %}', {
            method: 'POST',
            headers: {
                'X-CSRFToken': '{{ csrf_token }}',
                'Content-Type': 'application/json'
            }
        }).then(response => {
            if (response.ok) {
                window.location.reload();
            }
        });
    }
});
</script> 
----- END OF FILE -----

===== templates/game/includes/admin_tab_players.html =====

<!-- Player Management Card -->
<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Player Management</span>
        <span class="badge bg-primary">{{ game.players.count }} Players</span>
    </div>
    <div class="card-body">
        <div class="list-group">
            {% for player in game.players.all %}
                <div class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <div class="player-avatar me-3" style="border: 2px solid var(--{{ player.color }}, #ccc);">
                                <span class="player-initial {{ player.color }}">{{ player.character_name|slice:":1"|upper }}</span>
                            </div>
                            <div>
                                <h6 class="mb-0 {{ player.color }}">{{ player.character_name }}</h6>
                                <small class="text-muted">{{ player.user.username }}</small>
                                {% if player.is_host %}
                                    <span class="badge bg-info ms-2">Host</span>
                                {% endif %}
                            </div>
                        </div>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-outline-primary" 
                                    data-bs-toggle="collapse" data-bs-target="#playerDetails{{ player.id }}">
                                <i class="bi bi-info-circle me-1"></i>Details
                            </button>
                            {% if not player.is_host %}
                                <form method="post" action="{% url 'game_admin_make_host' game.id player.id %}" class="d-inline">
                                    {% csrf_token %}
                                    <button type="submit" class="btn btn-sm btn-outline-info">
                                        <i class="bi bi-star me-1"></i>Make Host
                                    </button>
                                </form>
                            {% endif %}
                        </div>
                    </div>
                    
                    <div class="collapse mt-3" id="playerDetails{{ player.id }}">
                        <div class="card card-body bg-light">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-palette me-2"></i>
                                        <div>
                                            <small class="text-muted d-block">Color</small>
                                            <strong>{{ player.get_color_display }}</strong>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-person-badge me-2"></i>
                                        <div>
                                            <small class="text-muted d-block">Character Card</small>
                                            <strong>
                                                {% if player.character_card %}
                                                    {{ player.character_card.title }}
                                                {% else %}
                                                    <span class="text-muted">None assigned</span>
                                                {% endif %}
                                            </strong>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-journals me-2"></i>
                                        <div>
                                            <small class="text-muted d-block">Cards in Hand</small>
                                            <strong>
                                                {% with card_count=player.hand.cards.count %}
                                                    {{ card_count }} card{{ card_count|pluralize }}
                                                {% endwith %}
                                            </strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="d-grid gap-2 mt-3">
                                <a href="{% url 'game_admin_player_cards' game.id player.id %}" 
                                   class="btn btn-sm btn-outline-primary">
                                    <i class="bi bi-journals me-1"></i>Manage Cards
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            {% empty %}
                <div class="text-center text-muted py-5">
                    <i class="bi bi-people display-4 mb-3"></i>
                    <p>No players have joined this game yet.</p>
                    <p class="small">Share the join code with players to let them join.</p>
                </div>
            {% endfor %}
        </div>
    </div>
</div> 
----- END OF FILE -----

===== templates/game/includes/message_input.html =====

{% if game.status == 'in_progress' %}
    <form method="post" action="{% url 'send_message' game.id %}" class="message-form mt-auto">
        {% csrf_token %}
        <div class="input-group">
            <input type="text" name="message" class="form-control" 
                   placeholder="Type your message as {{ player.character_name }}..." 
                   aria-label="Message" required autofocus>
            <button class="btn btn-primary" type="submit">
                <i class="bi bi-send-fill"></i>
            </button>
        </div>
        <small class="form-text text-muted mt-1">
            Messages are sent as <span class="{{ player.color }}">{{ player.character_name }}</span>
        </small>
    </form>
{% elif game.status == 'finished' %}
    <div class="alert alert-warning text-center">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        The game has ended. No more messages can be sent.
    </div>
{% elif game.status == 'setup' %}
    <div class="alert alert-info text-center">
        <i class="bi bi-info-circle-fill me-2"></i>
        Messages will be available once the game starts.
    </div>
{% endif %}


----- END OF FILE -----

===== templates/game/login.html =====

{% extends 'game/base.html' %}

{% block title %}Login - Alice is Missing{% endblock %}

{% block header_title %}Login{% endblock %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <h2 class="text-center mb-4">Login</h2>
            
            <form method="post" class="mb-4">
                {% csrf_token %}
                
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" name="username" class="form-control" id="username" placeholder="Enter your username" required>
                </div>
                
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" name="password" class="form-control" id="password" placeholder="Enter your password" required>
                </div>
                
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
            </form>
            
            <div class="text-center">
                <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
            </div>
        </div>
    </div>
</div>
{% endblock %}


----- END OF FILE -----

===== templates/game/message_detail.html =====

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image: {{ message.content|truncatechars:20 }} - {{ game.title }}</title>
    <style>
        body { 
            margin: 0; 
            background-color: #222; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            min-height: 100vh; 
        }
        img { 
            max-width: 95%; 
            max-height: 95vh; 
            object-fit: contain; 
            border-radius: 4px; 
            box-shadow: 0 0 20px rgba(0,0,0,0.5); 
        }
        .info { 
            position: fixed; 
            bottom: 10px; 
            left: 10px; 
            color: white; 
            background: rgba(0,0,0,0.7); 
            padding: 5px 10px; 
            border-radius: 3px; 
            font-family: sans-serif; 
            font-size: 0.8em;
        }
    </style>
</head>
<body>
    {% if message.image %}
        <img src="{{ message.image.url }}" alt="{% if message.content %}{{ message.content|truncatechars:50 }}{% else %}Shared image{% endif %}">
        <div class="info">
            {% if not message.is_system_message and message.sender %}
                From: {{ message.sender.character_name }} |
            {% endif %}
            {{ message.timestamp|date:"M d, Y H:i" }}
        </div>
    {% else %}
        <p style="color: white; font-family: sans-serif;">This message does not contain an image.</p>
    {% endif %}
</body>
</html>

----- END OF FILE -----

===== templates/game/new_game.html =====

{% extends 'game/base.html' %}

{% block title %}Create New Game - Alice is Missing{% endblock %}

{% block header_title %}Create Game{% endblock %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <h2 class="text-center mb-4">Create New Game</h2>
            
            <div class="alert alert-info mb-4">
                <p class="mb-0">You will be the host of this game. As the host, you'll control when the game starts and ends.</p>
                <small>Share the join code with friends after creating the game.</small>
            </div>
            
            <form method="post" class="mb-4">
                {% csrf_token %}
                
                <div class="mb-3">
                    <label for="title" class="form-label">Game Title</label>
                    <input type="text" name="title" class="form-control" id="title" 
                           placeholder="Enter a title for your game" value="Alice Search - {% now 'M d, Y' %}" required>
                    <div class="form-text">Give your investigation a name</div>
                </div>
                
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Create Game</button>
                    <a href="{% url 'home' %}" class="btn btn-outline-secondary">Cancel</a>
                </div>
            </form>
            
            <div class="card mb-4">
                <div class="card-header">About Hosting</div>
                <div class="card-body">
                    <p>As the host, you will be responsible for:</p>
                    <ul>
                        <li>Inviting players to join</li>
                        <li>Starting the game when everyone is ready</li>
                        <li>Managing the game timer</li>
                        <li>Ending the game if needed</li>
                    </ul>
                    <p class="mb-0 text-muted">You'll also play as a character in the game, just like everyone else.</p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}


----- END OF FILE -----

===== templates/game/player_hand.html =====

{% extends 'game/base.html' %}
{% load static %}

{% block title %}Your Hand - {{ game.name }}{% endblock %}

{% block header_title %}Your Hand{% endblock %}

{% block content %}
<div class="container-fluid p-0">
    <!-- Game Status Bar -->
    <div class="alert {% if game.status == 'in_progress' %}alert-primary{% elif game.status == 'finished' %}alert-secondary{% else %}alert-info{% endif %} mb-3 py-2">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-journals me-2"></i>
                <div>
                    <strong>{{ game.title }}</strong>
                    <small class="d-block text-muted">Your Hand</small>
                </div>
            </div>
            <span class="badge {% if game.status == 'setup' %}bg-secondary{% elif game.status == 'in_progress' %}bg-success{% else %}bg-danger{% endif %}">
                {{ game.get_status_display }}
            </span>
        </div>
    </div>

    <!-- Cards Grid -->
    <div class="row g-3">
        {% for card in cards %}
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card-container" onclick="this.classList.toggle('flipped')">
                <div class="card-inner">
                    <!-- Front of card -->
                    <div class="card-front">
                        {% if card.front_image %}
                            <img src="{{ card.front_image.url }}" alt="{{ card.title }}" class="card-image">
                        {% endif %}
                        <div class="card-type-badge {{ card.type|lower }}">
                            <i class="bi bi-{{ card.type|lower }}-icon"></i>
                            {{ card.type }}
                        </div>
                        <h3 class="card-title">{{ card.title }}</h3>
                        <p class="card-description">{{ card.description }}</p>
                        <div class="card-hint">
                            <i class="bi bi-arrow-repeat"></i>
                            Click to flip
                        </div>
                    </div>
                    
                    <!-- Back of card -->
                    <div class="card-back">
                        {% if card.back_image %}
                            <img src="{{ card.back_image.url }}" alt="{{ card.title }} back" class="card-image">
                        {% endif %}
                        <div class="card-type-badge {{ card.type|lower }}">
                            <i class="bi bi-{{ card.type|lower }}-icon"></i>
                            {{ card.type }}
                        </div>
                        <h3 class="card-title">{{ card.title }}</h3>
                        <p class="card-description">{{ card.back_description }}</p>
                        {% if card.reveal_time %}
                            <div class="card-reveal-time">
                                <i class="bi bi-clock"></i>
                                Reveals at {{ card.reveal_time }}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        {% empty %}
        <div class="col-12 text-center py-5">
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                You don't have any cards yet. Cards will be dealt by the game host.
            </div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ block.super }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Add hover effect for desktop
    if (window.innerWidth > 768) {
        document.querySelectorAll('.card-container').forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.classList.add('flipped');
            });
            card.addEventListener('mouseleave', function() {
                this.classList.remove('flipped');
            });
        });
    }
});
</script>
{% endblock %}


----- END OF FILE -----

===== templates/game/register.html =====

{% extends 'game/base.html' %}

{% block title %}Register - Alice is Missing{% endblock %}

{% block header_title %}Register{% endblock %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <h2 class="text-center mb-4">Create Account</h2>
            
            <form method="post" class="mb-4">
                {% csrf_token %}
                
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" name="username" class="form-control {% if form.username.errors %}is-invalid{% endif %}" 
                           id="username" placeholder="Choose a username" required>
                    {% if form.username.errors %}
                        <div class="invalid-feedback">
                            {% for error in form.username.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="password1" class="form-label">Password</label>
                    <input type="password" name="password1" class="form-control {% if form.password1.errors %}is-invalid{% endif %}" 
                           id="password1" placeholder="Choose a password" required>
                    {% if form.password1.errors %}
                        <div class="invalid-feedback">
                            {% for error in form.password1.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="password2" class="form-label">Confirm Password</label>
                    <input type="password" name="password2" class="form-control {% if form.password2.errors %}is-invalid{% endif %}" 
                           id="password2" placeholder="Confirm your password" required>
                    {% if form.password2.errors %}
                        <div class="invalid-feedback">
                            {% for error in form.password2.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Register</button>
                </div>
            </form>
            
            <div class="text-center">
                <p>Already have an account? <a href="{% url 'login' %}">Login here</a></p>
            </div>
        </div>
    </div>
</div>
{% endblock %}


----- END OF FILE -----

===== templates/game/select_character.html =====

{% extends 'game/base.html' %}

{% block title %}Select Character - Alice is Missing{% endblock %}

{% block header_title %}Character Selection{% endblock %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <h2 class="text-center mb-4">Select Your Character</h2>
            
            <div class="alert alert-info mb-4">
                <p class="mb-0">Choose a character name and color that you'll use throughout the game.</p>
                <small>Your character should be someone who knew Alice well and cares about finding her.</small>
            </div>
            
            <form method="post" class="mb-4">
                {% csrf_token %}
                
                <div class="mb-3">
                    <label for="character_name" class="form-label">Character Name</label>
                    <input type="text" name="character_name" class="form-control" id="character_name" 
                           placeholder="Enter your character's name" required>
                    <div class="form-text">Choose a name for your character who's searching for Alice.</div>
                </div>
                
                <div class="mb-4">
                    <label class="form-label">Choose Your Color</label>
                    <div class="row row-cols-2 g-2">
                        {% for color_code, color_name in player.PLAYER_COLORS %}
                            {% if color_code in available_colors %}
                            <div class="col">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="color" 
                                           id="color_{{ color_code }}" value="{{ color_code }}" required>
                                    <label class="form-check-label {{ color_code }}" for="color_{{ color_code }}">
                                        {{ color_name }}
                                    </label>
                                </div>
                            </div>
                            {% else %}
                            <div class="col">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="color" 
                                           id="color_{{ color_code }}" value="{{ color_code }}" disabled>
                                    <label class="form-check-label text-muted" for="color_{{ color_code }}">
                                        {{ color_name }} (Taken)
                                    </label>
                                </div>
                            </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Relationship to Alice</label>
                    <select class="form-select" id="relationship" name="relationship">
                        <option value="friend">Friend</option>
                        <option value="family">Family Member</option>
                        <option value="classmate">Classmate</option>
                        <option value="teammate">Teammate</option>
                        <option value="coworker">Co-worker</option>
                        <option value="neighbor">Neighbor</option>
                        <option value="other">Other</option>
                    </select>
                    <div class="form-text">How does your character know Alice?</div>
                </div>
                
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Confirm Character</button>
                    <a href="{% url 'game_setup' game.id %}" class="btn btn-outline-secondary">Cancel</a>
                </div>
            </form>
            
            <div class="card mb-4">
                <div class="card-header">Character Tips</div>
                <div class="card-body">
                    <p>Choose a character that:</p>
                    <ul>
                        <li>Has a strong connection to Alice</li>
                        <li>Has a reason to be deeply involved in the search</li>
                        <li>Might have information or theories about her disappearance</li>
                        <li>Has meaningful relationships with other characters</li>
                    </ul>
                    <p class="mb-0 text-muted">Your character is a local teenager from the town of Silent Falls.</p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}


----- END OF FILE -----

===== templates/game/test_error.html =====

{% extends 'game/base.html' %}

{% block content %}
    {{ non_existent_variable }}
{% endblock %} 
----- END OF FILE -----

===== urls.py =====

from django.urls import path
from . import views

urlpatterns = [
    # ... existing urls ...
    path('test-error/', views.test_error_view, name='test_error'),
] 
----- END OF FILE -----

===== views.py =====

import json
import logging
from datetime import datetime
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.shortcuts import render

# Configure logging
logger = logging.getLogger('game_logger')
logger.setLevel(logging.ERROR)

# Create file handler
file_handler = logging.FileHandler('log.txt')
file_handler.setLevel(logging.ERROR)

# Create formatter
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# Add handler to logger
logger.addHandler(file_handler)

@csrf_exempt
@require_http_methods(["POST"])
def log_error(request):
    try:
        data = json.loads(request.body)
        error_message = f"Error: {data.get('error', 'Unknown error')}\n"
        error_message += f"Stack: {data.get('stack', 'No stack trace')}\n"
        error_message += f"Context: {json.dumps(data.get('context', {}), indent=2)}\n"
        error_message += "-" * 80 + "\n"
        
        logger.error(error_message)
        
        return JsonResponse({'status': 'success'})
    except Exception as e:
        logger.error(f"Error in log_error view: {str(e)}")
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

def test_error_view(request):
    return render(request, 'game/test_error.html') 
----- END OF FILE -----

